
uhmero.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000610  00000684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000610  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000154  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000054d  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001c7  00000000  00000000  00000d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006a8  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000160  00000000  00000000  000015bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001c6  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001b9  00000000  00000000  000018e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__vector_15>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e1       	ldi	r30, 0x10	; 16
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 8b 02 	call	0x516	; 0x516 <main>
  b6:	0c 94 06 03 	jmp	0x60c	; 0x60c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <lcd_clock>:
	lcd_clock();
}

void lcd_clock()
{
	LCD_CMD_PORT |= (1<<LCD_EN);
  be:	e2 e6       	ldi	r30, 0x62	; 98
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c8:	20 ea       	ldi	r18, 0xA0	; 160
  ca:	3f e0       	ldi	r19, 0x0F	; 15
  cc:	c9 01       	movw	r24, r18
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_clock+0x10>
	_delay_ms(1);
	LCD_CMD_PORT &= ~(1<<LCD_EN);
  d2:	80 81       	ld	r24, Z
  d4:	87 7f       	andi	r24, 0xF7	; 247
  d6:	80 83       	st	Z, r24
  d8:	c9 01       	movw	r24, r18
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_clock+0x1c>
	_delay_ms(1);
}
  de:	08 95       	ret

000000e0 <lcd_cmd>:
	LCD_DATA_PORT |= ((data<<4)&0xF0);
	lcd_clock();
}

void lcd_cmd(uint8_t cmd)
{
  e0:	1f 93       	push	r17
  e2:	18 2f       	mov	r17, r24
	LCD_CMD_PORT &= ~(1<<LCD_RS); //parancsot küldünk
  e4:	e2 e6       	ldi	r30, 0x62	; 98
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	8d 7f       	andi	r24, 0xFD	; 253
  ec:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_RW);
  ee:	80 81       	ld	r24, Z
  f0:	8b 7f       	andi	r24, 0xFB	; 251
  f2:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_EN);
  f4:	80 81       	ld	r24, Z
  f6:	87 7f       	andi	r24, 0xF7	; 247
  f8:	80 83       	st	Z, r24

	LCD_DATA_PORT &= 0x0F;
  fa:	83 b1       	in	r24, 0x03	; 3
  fc:	8f 70       	andi	r24, 0x0F	; 15
  fe:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= (cmd&0xF0);
 100:	93 b1       	in	r25, 0x03	; 3
 102:	81 2f       	mov	r24, r17
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	89 2b       	or	r24, r25
 108:	83 b9       	out	0x03, r24	; 3
	lcd_clock();
 10a:	0e 94 5f 00 	call	0xbe	; 0xbe <lcd_clock>
	LCD_DATA_PORT &= 0x0F;
 10e:	83 b1       	in	r24, 0x03	; 3
 110:	8f 70       	andi	r24, 0x0F	; 15
 112:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= ((cmd<<4)&0xF0);
 114:	83 b1       	in	r24, 0x03	; 3
 116:	12 95       	swap	r17
 118:	10 7f       	andi	r17, 0xF0	; 240
 11a:	81 2b       	or	r24, r17
 11c:	83 b9       	out	0x03, r24	; 3
	lcd_clock();
 11e:	0e 94 5f 00 	call	0xbe	; 0xbe <lcd_clock>
}
 122:	1f 91       	pop	r17
 124:	08 95       	ret

00000126 <lcd_clr>:
}


void lcd_clr()
{
	lcd_cmd(0x01);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_cmd>
}
 12c:	08 95       	ret

0000012e <lcd_put_data>:

void lcd_put_data(uint8_t data)
{
 12e:	1f 93       	push	r17
 130:	18 2f       	mov	r17, r24
	LCD_CMD_PORT |= (1<<LCD_RS); //adatot küldünk
 132:	e2 e6       	ldi	r30, 0x62	; 98
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_RW);
 13c:	80 81       	ld	r24, Z
 13e:	8b 7f       	andi	r24, 0xFB	; 251
 140:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_EN);
 142:	80 81       	ld	r24, Z
 144:	87 7f       	andi	r24, 0xF7	; 247
 146:	80 83       	st	Z, r24

	LCD_DATA_PORT &= 0x0F;
 148:	83 b1       	in	r24, 0x03	; 3
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= (data&0xF0);
 14e:	93 b1       	in	r25, 0x03	; 3
 150:	81 2f       	mov	r24, r17
 152:	80 7f       	andi	r24, 0xF0	; 240
 154:	89 2b       	or	r24, r25
 156:	83 b9       	out	0x03, r24	; 3
	lcd_clock();
 158:	0e 94 5f 00 	call	0xbe	; 0xbe <lcd_clock>
	LCD_DATA_PORT &= 0x0F;
 15c:	83 b1       	in	r24, 0x03	; 3
 15e:	8f 70       	andi	r24, 0x0F	; 15
 160:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= ((data<<4)&0xF0);
 162:	83 b1       	in	r24, 0x03	; 3
 164:	12 95       	swap	r17
 166:	10 7f       	andi	r17, 0xF0	; 240
 168:	81 2b       	or	r24, r17
 16a:	83 b9       	out	0x03, r24	; 3
	lcd_clock();
 16c:	0e 94 5f 00 	call	0xbe	; 0xbe <lcd_clock>
}
 170:	1f 91       	pop	r17
 172:	08 95       	ret

00000174 <lcd_init>:
void lcd_clr();



void lcd_init()
{
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
	LCD_DATA_DDR |= 0xF0;
 178:	82 b1       	in	r24, 0x02	; 2
 17a:	80 6f       	ori	r24, 0xF0	; 240
 17c:	82 b9       	out	0x02, r24	; 2
	LCD_CMD_DDR |= ((1<<LCD_RS)
 17e:	e1 e6       	ldi	r30, 0x61	; 97
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	8e 60       	ori	r24, 0x0E	; 14
 186:	80 83       	st	Z, r24
	|(1<<LCD_RW)
	|(1<<LCD_EN));

	LCD_CMD_PORT &= ~(1<<LCD_RW);
 188:	e2 e6       	ldi	r30, 0x62	; 98
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	8b 7f       	andi	r24, 0xFB	; 251
 190:	80 83       	st	Z, r24
	//konfig

	lcd_cmd(0x30);
 192:	80 e3       	ldi	r24, 0x30	; 48
 194:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_cmd>
 198:	80 e2       	ldi	r24, 0x20	; 32
 19a:	9e e4       	ldi	r25, 0x4E	; 78
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_init+0x28>
	_delay_ms(5);
	lcd_cmd(0x30);
 1a0:	80 e3       	ldi	r24, 0x30	; 48
 1a2:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_cmd>
 1a6:	00 ea       	ldi	r16, 0xA0	; 160
 1a8:	1f e0       	ldi	r17, 0x0F	; 15
 1aa:	c8 01       	movw	r24, r16
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_init+0x38>
	_delay_ms(1);
	lcd_cmd(0x30);
 1b0:	80 e3       	ldi	r24, 0x30	; 48
 1b2:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_cmd>
 1b6:	c8 01       	movw	r24, r16
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_init+0x44>
	_delay_ms(1);
	lcd_cmd(0x20);
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_cmd>
 1c2:	c8 01       	movw	r24, r16
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init+0x50>
	_delay_ms(1);
	lcd_clock();
 1c8:	0e 94 5f 00 	call	0xbe	; 0xbe <lcd_clock>
	lcd_clock();
 1cc:	0e 94 5f 00 	call	0xbe	; 0xbe <lcd_clock>
	lcd_clock();
 1d0:	0e 94 5f 00 	call	0xbe	; 0xbe <lcd_clock>

	//LCD konf
	lcd_cmd(0x28);
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_cmd>
	lcd_cmd(0x0C);
 1da:	8c e0       	ldi	r24, 0x0C	; 12
 1dc:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_cmd>
	lcd_cmd(0x06);
 1e0:	86 e0       	ldi	r24, 0x06	; 6
 1e2:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_cmd>
	lcd_cmd(0x01);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_cmd>
	lcd_cmd(0x02);
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_cmd>
}
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	08 95       	ret

000001f8 <lcd_put_bin>:


}

void lcd_put_bin(uint8_t number)
{
 1f8:	ef 92       	push	r14
 1fa:	ff 92       	push	r15
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	d0 e0       	ldi	r29, 0x00	; 0
unsigned char bin_string[8];


	for(iterator = 0;iterator<=7;iterator++)
	{
		if(number & (128>>iterator))
 208:	90 e8       	ldi	r25, 0x80	; 128
 20a:	e9 2e       	mov	r14, r25
 20c:	f1 2c       	mov	r15, r1
 20e:	08 2f       	mov	r16, r24
 210:	10 e0       	ldi	r17, 0x00	; 0
 212:	c7 01       	movw	r24, r14
 214:	0c 2e       	mov	r0, r28
 216:	02 c0       	rjmp	.+4      	; 0x21c <lcd_put_bin+0x24>
 218:	95 95       	asr	r25
 21a:	87 95       	ror	r24
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <lcd_put_bin+0x20>
 220:	80 23       	and	r24, r16
 222:	91 23       	and	r25, r17
 224:	89 2b       	or	r24, r25
 226:	11 f0       	breq	.+4      	; 0x22c <lcd_put_bin+0x34>
		{
			lcd_put_data('1');
 228:	81 e3       	ldi	r24, 0x31	; 49
 22a:	01 c0       	rjmp	.+2      	; 0x22e <lcd_put_bin+0x36>
		}		
		else
		{
			lcd_put_data('0');
 22c:	80 e3       	ldi	r24, 0x30	; 48
 22e:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
 232:	21 96       	adiw	r28, 0x01	; 1

unsigned char iterator;
unsigned char bin_string[8];


	for(iterator = 0;iterator<=7;iterator++)
 234:	c8 30       	cpi	r28, 0x08	; 8
 236:	d1 05       	cpc	r29, r1
 238:	61 f7       	brne	.-40     	; 0x212 <lcd_put_bin+0x1a>
		{
			lcd_put_data('0');
		}
	}

}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	ff 90       	pop	r15
 244:	ef 90       	pop	r14
 246:	08 95       	ret

00000248 <lcd_put_int>:


void lcd_put_int(uint16_t num)
{
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	ec 01       	movw	r28, r24
	if(num>9999)lcd_put_data('0'+num/10000%10);
 24e:	87 e2       	ldi	r24, 0x27	; 39
 250:	c0 31       	cpi	r28, 0x10	; 16
 252:	d8 07       	cpc	r29, r24
 254:	70 f0       	brcs	.+28     	; 0x272 <lcd_put_int+0x2a>
 256:	ce 01       	movw	r24, r28
 258:	60 e1       	ldi	r22, 0x10	; 16
 25a:	77 e2       	ldi	r23, 0x27	; 39
 25c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 260:	cb 01       	movw	r24, r22
 262:	6a e0       	ldi	r22, 0x0A	; 10
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 26a:	80 5d       	subi	r24, 0xD0	; 208
 26c:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
 270:	04 c0       	rjmp	.+8      	; 0x27a <lcd_put_int+0x32>
	if(num>999)lcd_put_data('0'+num/1000%10);
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	c8 3e       	cpi	r28, 0xE8	; 232
 276:	d8 07       	cpc	r29, r24
 278:	70 f0       	brcs	.+28     	; 0x296 <lcd_put_int+0x4e>
 27a:	ce 01       	movw	r24, r28
 27c:	68 ee       	ldi	r22, 0xE8	; 232
 27e:	73 e0       	ldi	r23, 0x03	; 3
 280:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 284:	cb 01       	movw	r24, r22
 286:	6a e0       	ldi	r22, 0x0A	; 10
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 28e:	80 5d       	subi	r24, 0xD0	; 208
 290:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
 294:	03 c0       	rjmp	.+6      	; 0x29c <lcd_put_int+0x54>
	if(num>99)lcd_put_data('0'+num/100%10);
 296:	c4 36       	cpi	r28, 0x64	; 100
 298:	d1 05       	cpc	r29, r1
 29a:	70 f0       	brcs	.+28     	; 0x2b8 <lcd_put_int+0x70>
 29c:	ce 01       	movw	r24, r28
 29e:	64 e6       	ldi	r22, 0x64	; 100
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 2a6:	cb 01       	movw	r24, r22
 2a8:	6a e0       	ldi	r22, 0x0A	; 10
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 2b0:	80 5d       	subi	r24, 0xD0	; 208
 2b2:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
 2b6:	03 c0       	rjmp	.+6      	; 0x2be <lcd_put_int+0x76>
	if(num>9)lcd_put_data('0'+num/10%10);
 2b8:	ca 30       	cpi	r28, 0x0A	; 10
 2ba:	d1 05       	cpc	r29, r1
 2bc:	68 f0       	brcs	.+26     	; 0x2d8 <lcd_put_int+0x90>
 2be:	ce 01       	movw	r24, r28
 2c0:	6a e0       	ldi	r22, 0x0A	; 10
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 2c8:	cb 01       	movw	r24, r22
 2ca:	6a e0       	ldi	r22, 0x0A	; 10
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 2d2:	80 5d       	subi	r24, 0xD0	; 208
 2d4:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data('0'+num%10);
 2d8:	ce 01       	movw	r24, r28
 2da:	6a e0       	ldi	r22, 0x0A	; 10
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 2e2:	80 5d       	subi	r24, 0xD0	; 208
 2e4:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
}
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <lcd_put_freq>:

void lcd_put_freq(uint16_t num)
{
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	ec 01       	movw	r28, r24
	if(num>9999)lcd_put_data('0'+num/10000%10);
 2f4:	87 e2       	ldi	r24, 0x27	; 39
 2f6:	c0 31       	cpi	r28, 0x10	; 16
 2f8:	d8 07       	cpc	r29, r24
 2fa:	70 f0       	brcs	.+28     	; 0x318 <lcd_put_freq+0x2a>
 2fc:	ce 01       	movw	r24, r28
 2fe:	60 e1       	ldi	r22, 0x10	; 16
 300:	77 e2       	ldi	r23, 0x27	; 39
 302:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 306:	cb 01       	movw	r24, r22
 308:	6a e0       	ldi	r22, 0x0A	; 10
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 310:	80 5d       	subi	r24, 0xD0	; 208
 312:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
 316:	04 c0       	rjmp	.+8      	; 0x320 <lcd_put_freq+0x32>
	if(num>999)lcd_put_data('0'+num/1000%10);
 318:	83 e0       	ldi	r24, 0x03	; 3
 31a:	c8 3e       	cpi	r28, 0xE8	; 232
 31c:	d8 07       	cpc	r29, r24
 31e:	70 f0       	brcs	.+28     	; 0x33c <lcd_put_freq+0x4e>
 320:	ce 01       	movw	r24, r28
 322:	68 ee       	ldi	r22, 0xE8	; 232
 324:	73 e0       	ldi	r23, 0x03	; 3
 326:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 32a:	cb 01       	movw	r24, r22
 32c:	6a e0       	ldi	r22, 0x0A	; 10
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 334:	80 5d       	subi	r24, 0xD0	; 208
 336:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
 33a:	03 c0       	rjmp	.+6      	; 0x342 <lcd_put_freq+0x54>
	if(num>99)lcd_put_data('0'+num/100%10);
 33c:	c4 36       	cpi	r28, 0x64	; 100
 33e:	d1 05       	cpc	r29, r1
 340:	68 f0       	brcs	.+26     	; 0x35c <lcd_put_freq+0x6e>
 342:	ce 01       	movw	r24, r28
 344:	64 e6       	ldi	r22, 0x64	; 100
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 34c:	cb 01       	movw	r24, r22
 34e:	6a e0       	ldi	r22, 0x0A	; 10
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 356:	80 5d       	subi	r24, 0xD0	; 208
 358:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data('0'+num/10%10);
 35c:	ce 01       	movw	r24, r28
 35e:	6a e0       	ldi	r22, 0x0A	; 10
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 366:	cb 01       	movw	r24, r22
 368:	6a e0       	ldi	r22, 0x0A	; 10
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 370:	80 5d       	subi	r24, 0xD0	; 208
 372:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data('.');
 376:	8e e2       	ldi	r24, 0x2E	; 46
 378:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data('0'+num%10);
 37c:	ce 01       	movw	r24, r28
 37e:	6a e0       	ldi	r22, 0x0A	; 10
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__udivmodhi4>
 386:	80 5d       	subi	r24, 0xD0	; 208
 388:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
}
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <lcd_goto_yx>:

void lcd_goto_yx(uint8_t y, uint8_t x)
{
	switch(y)
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	51 f0       	breq	.+20     	; 0x3aa <lcd_goto_yx+0x18>
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	28 f0       	brcs	.+10     	; 0x3a4 <lcd_goto_yx+0x12>
 39a:	82 30       	cpi	r24, 0x02	; 2
 39c:	49 f0       	breq	.+18     	; 0x3b0 <lcd_goto_yx+0x1e>
 39e:	83 30       	cpi	r24, 0x03	; 3
 3a0:	61 f4       	brne	.+24     	; 0x3ba <lcd_goto_yx+0x28>
 3a2:	09 c0       	rjmp	.+18     	; 0x3b6 <lcd_goto_yx+0x24>
	{
		case 0: {y= 0x00 + 0x80 + x;break;}
 3a4:	86 2f       	mov	r24, r22
 3a6:	80 58       	subi	r24, 0x80	; 128
 3a8:	08 c0       	rjmp	.+16     	; 0x3ba <lcd_goto_yx+0x28>
		case 1: {y= 0x40 + 0x80 + x;break;}
 3aa:	86 2f       	mov	r24, r22
 3ac:	80 54       	subi	r24, 0x40	; 64
 3ae:	05 c0       	rjmp	.+10     	; 0x3ba <lcd_goto_yx+0x28>
		case 2: {y= 0x10 + 0x80 + x;break;}
 3b0:	86 2f       	mov	r24, r22
 3b2:	80 57       	subi	r24, 0x70	; 112
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <lcd_goto_yx+0x28>
		case 3: {y= 0x50 + 0x80 + x;break;}
 3b6:	86 2f       	mov	r24, r22
 3b8:	80 53       	subi	r24, 0x30	; 48

		default: break;
	}
	lcd_cmd(y);
 3ba:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_cmd>
}
 3be:	08 95       	ret

000003c0 <lcd_put_string>:
	LCD_CMD_PORT &= ~(1<<LCD_EN);
	_delay_ms(1);
}

void lcd_put_string(uint8_t *p)
{
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	ec 01       	movw	r28, r24
 3c8:	10 e0       	ldi	r17, 0x00	; 0
 3ca:	1a c0       	rjmp	.+52     	; 0x400 <lcd_put_string+0x40>
unsigned char counter = 0;

	while(*p)
	{
		lcd_put_data(*p++);
 3cc:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>

		counter++;
 3d0:	1f 5f       	subi	r17, 0xFF	; 255
		
		//lcd_goto_yx(2,0);
		
		switch(counter)
 3d2:	1f 31       	cpi	r17, 0x1F	; 31
 3d4:	61 f0       	breq	.+24     	; 0x3ee <lcd_put_string+0x2e>
 3d6:	10 32       	cpi	r17, 0x20	; 32
 3d8:	18 f4       	brcc	.+6      	; 0x3e0 <lcd_put_string+0x20>
 3da:	1f 30       	cpi	r17, 0x0F	; 15
 3dc:	81 f4       	brne	.+32     	; 0x3fe <lcd_put_string+0x3e>
 3de:	05 c0       	rjmp	.+10     	; 0x3ea <lcd_put_string+0x2a>
 3e0:	1f 32       	cpi	r17, 0x2F	; 47
 3e2:	39 f0       	breq	.+14     	; 0x3f2 <lcd_put_string+0x32>
 3e4:	1f 33       	cpi	r17, 0x3F	; 63
 3e6:	59 f4       	brne	.+22     	; 0x3fe <lcd_put_string+0x3e>
 3e8:	06 c0       	rjmp	.+12     	; 0x3f6 <lcd_put_string+0x36>
		{
		case 15: 	lcd_goto_yx(1,0);
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <lcd_put_string+0x38>
					break;
		case 31: 	lcd_goto_yx(2,0);
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <lcd_put_string+0x38>
					break;
		case 47: 	lcd_goto_yx(3,0);
 3f2:	83 e0       	ldi	r24, 0x03	; 3
 3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <lcd_put_string+0x38>
					break;
		case 63: 	lcd_goto_yx(0,0);
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	0e 94 c9 01 	call	0x392	; 0x392 <lcd_goto_yx>
{
unsigned char counter = 0;

	while(*p)
	{
		lcd_put_data(*p++);
 3fe:	21 96       	adiw	r28, 0x01	; 1

void lcd_put_string(uint8_t *p)
{
unsigned char counter = 0;

	while(*p)
 400:	88 81       	ld	r24, Y
 402:	88 23       	and	r24, r24
 404:	19 f7       	brne	.-58     	; 0x3cc <lcd_put_string+0xc>
					break;
		}	
	}


}
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	08 95       	ret

0000040e <lcd_clr_line>:
	lcd_cmd(0x02);
}


void lcd_clr_line(unsigned char line)
{
 40e:	1f 93       	push	r17
unsigned char i;

lcd_goto_yx(line,0);
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	0e 94 c9 01 	call	0x392	; 0x392 <lcd_goto_yx>
 416:	10 e0       	ldi	r17, 0x00	; 0

	for(i=0;i<15;i++)
	{
		lcd_put_data(' ');
 418:	80 e2       	ldi	r24, 0x20	; 32
 41a:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
{
unsigned char i;

lcd_goto_yx(line,0);

	for(i=0;i<15;i++)
 41e:	1f 5f       	subi	r17, 0xFF	; 255
 420:	1f 30       	cpi	r17, 0x0F	; 15
 422:	d1 f7       	brne	.-12     	; 0x418 <lcd_clr_line+0xa>
	{
		lcd_put_data(' ');
	}
}
 424:	1f 91       	pop	r17
 426:	08 95       	ret

00000428 <CreateCGram>:
	lcd_cmd(y);
}

void CreateCGram()
{
	lcd_cmd(0x40+(0<<3));	//címek : 44..
 428:	80 e4       	ldi	r24, 0x40	; 64
 42a:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_cmd>

	lcd_put_data(0b00001010);
 42e:	8a e0       	ldi	r24, 0x0A	; 10
 430:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data(0b00011111);
 434:	8f e1       	ldi	r24, 0x1F	; 31
 436:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data(0b00011111);
 43a:	8f e1       	ldi	r24, 0x1F	; 31
 43c:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data(0b00001110);
 440:	8e e0       	ldi	r24, 0x0E	; 14
 442:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data(0b00000100);
 446:	84 e0       	ldi	r24, 0x04	; 4
 448:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data(0b00000000);
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data(0b00000000);
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data(0b00000000);
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>

	lcd_cmd(0x80);
 45e:	80 e8       	ldi	r24, 0x80	; 128
 460:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_cmd>

	lcd_cmd(0x40+(1<<3));
 464:	88 e4       	ldi	r24, 0x48	; 72
 466:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_cmd>

	lcd_put_data(0b00001100);
 46a:	8c e0       	ldi	r24, 0x0C	; 12
 46c:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data(0b00011110);
 470:	8e e1       	ldi	r24, 0x1E	; 30
 472:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data(0b00001100);
 476:	8c e0       	ldi	r24, 0x0C	; 12
 478:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data(0b00011110);
 47c:	8e e1       	ldi	r24, 0x1E	; 30
 47e:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data(0b00001100);
 482:	8c e0       	ldi	r24, 0x0C	; 12
 484:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data(0b00001100);
 488:	8c e0       	ldi	r24, 0x0C	; 12
 48a:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data(0b00010010);
 48e:	82 e1       	ldi	r24, 0x12	; 18
 490:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>
	lcd_put_data(0b00011011);
 494:	8b e1       	ldi	r24, 0x1B	; 27
 496:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_put_data>

	lcd_cmd(0x80);
 49a:	80 e8       	ldi	r24, 0x80	; 128
 49c:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_cmd>
}
 4a0:	08 95       	ret

000004a2 <pushbutton_init>:

void pushbutton_init();

void pushbutton_init()
{
	DDRG |= 0x1F;
 4a2:	e4 e6       	ldi	r30, 0x64	; 100
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	8f 61       	ori	r24, 0x1F	; 31
 4aa:	80 83       	st	Z, r24
}
 4ac:	08 95       	ret

000004ae <led_init>:



void led_init()
{
	DDRB |= 0xF0;	// PORTB out
 4ae:	87 b3       	in	r24, 0x17	; 23
 4b0:	80 6f       	ori	r24, 0xF0	; 240
 4b2:	87 bb       	out	0x17, r24	; 23
	DDRD |= 0xF0;	// PORTD out
 4b4:	81 b3       	in	r24, 0x11	; 17
 4b6:	80 6f       	ori	r24, 0xF0	; 240
 4b8:	81 bb       	out	0x11, r24	; 17
}
 4ba:	08 95       	ret

000004bc <led_out>:

void led_out(unsigned char data)
{
	PORTD &= 0x0F;
 4bc:	92 b3       	in	r25, 0x12	; 18
 4be:	9f 70       	andi	r25, 0x0F	; 15
 4c0:	92 bb       	out	0x12, r25	; 18
	PORTB &= 0x0F;
 4c2:	98 b3       	in	r25, 0x18	; 24
 4c4:	9f 70       	andi	r25, 0x0F	; 15
 4c6:	98 bb       	out	0x18, r25	; 24
	
	PORTD |= (data & 0xF0);
 4c8:	22 b3       	in	r18, 0x12	; 18
 4ca:	98 2f       	mov	r25, r24
 4cc:	90 7f       	andi	r25, 0xF0	; 240
 4ce:	92 2b       	or	r25, r18
 4d0:	92 bb       	out	0x12, r25	; 18
	PORTB |= (data & 0x0F)<<4;
 4d2:	98 b3       	in	r25, 0x18	; 24
 4d4:	82 95       	swap	r24
 4d6:	80 7f       	andi	r24, 0xF0	; 240
 4d8:	98 2b       	or	r25, r24
 4da:	98 bb       	out	0x18, r25	; 24
}
 4dc:	08 95       	ret

000004de <timer0_init>:

}

void timer0_init(){
	
	OCR0 = 159;
 4de:	8f e9       	ldi	r24, 0x9F	; 159
 4e0:	81 bf       	out	0x31, r24	; 49
	TCCR0 = (1<<3); // CTC mode + no prescale
 4e2:	88 e0       	ldi	r24, 0x08	; 8
 4e4:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= 7;
 4e6:	83 b7       	in	r24, 0x33	; 51
 4e8:	87 60       	ori	r24, 0x07	; 7
 4ea:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<1);
 4ec:	87 b7       	in	r24, 0x37	; 55
 4ee:	82 60       	ori	r24, 0x02	; 2
 4f0:	87 bf       	out	0x37, r24	; 55
}
 4f2:	08 95       	ret

000004f4 <init_periph>:
}


void init_periph(){

	lcd_init();
 4f4:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_init>

void pushbutton_init();

void pushbutton_init()
{
	DDRG |= 0x1F;
 4f8:	e4 e6       	ldi	r30, 0x64	; 100
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	8f 61       	ori	r24, 0x1F	; 31
 500:	80 83       	st	Z, r24
	pushbutton_init();
	timer0_init();
 502:	0e 94 6f 02 	call	0x4de	; 0x4de <timer0_init>



void led_init()
{
	DDRB |= 0xF0;	// PORTB out
 506:	87 b3       	in	r24, 0x17	; 23
 508:	80 6f       	ori	r24, 0xF0	; 240
 50a:	87 bb       	out	0x17, r24	; 23
	DDRD |= 0xF0;	// PORTD out
 50c:	81 b3       	in	r24, 0x11	; 17
 50e:	80 6f       	ori	r24, 0xF0	; 240
 510:	81 bb       	out	0x11, r24	; 17
	led_init();

	sei(); // global interrupt enable
 512:	78 94       	sei


}
 514:	08 95       	ret

00000516 <main>:
void init_uh();
void timer0_init();
void impulse_start();
void impulse_stop();

int main (void){
 516:	df 93       	push	r29
 518:	cf 93       	push	r28
 51a:	00 d0       	rcall	.+0      	; 0x51c <main+0x6>
 51c:	00 d0       	rcall	.+0      	; 0x51e <main+0x8>
 51e:	00 d0       	rcall	.+0      	; 0x520 <main+0xa>
 520:	cd b7       	in	r28, 0x3d	; 61
 522:	de b7       	in	r29, 0x3e	; 62


	init_periph();
 524:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <init_periph>

	char test[]  = "teszt";
 528:	de 01       	movw	r26, r28
 52a:	11 96       	adiw	r26, 0x01	; 1
 52c:	e0 e0       	ldi	r30, 0x00	; 0
 52e:	f1 e0       	ldi	r31, 0x01	; 1
 530:	86 e0       	ldi	r24, 0x06	; 6
 532:	01 90       	ld	r0, Z+
 534:	0d 92       	st	X+, r0
 536:	81 50       	subi	r24, 0x01	; 1
 538:	e1 f7       	brne	.-8      	; 0x532 <main+0x1c>
	lcd_put_string(test);
 53a:	ce 01       	movw	r24, r28
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <lcd_put_string>
	
	timer0_init();
 542:	0e 94 6f 02 	call	0x4de	; 0x4de <timer0_init>
	TCCR0 |= 7;
	TIMSK |= (1<<1);
}

void impulse_start(){
	TCNT0 = 0;
 546:	12 be       	out	0x32, r1	; 50
	TCCR0 |= 1;
 548:	83 b7       	in	r24, 0x33	; 51
 54a:	81 60       	ori	r24, 0x01	; 1
 54c:	83 bf       	out	0x33, r24	; 51
}

void impulse_stop(){
	TCCR0 ^= 1;
 54e:	83 b7       	in	r24, 0x33	; 51
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	89 27       	eor	r24, r25
 554:	83 bf       	out	0x33, r24	; 51
 556:	ff cf       	rjmp	.-2      	; 0x556 <main+0x40>

00000558 <impulse_start>:
	TCCR0 |= 7;
	TIMSK |= (1<<1);
}

void impulse_start(){
	TCNT0 = 0;
 558:	12 be       	out	0x32, r1	; 50
	TCCR0 |= 1;
 55a:	83 b7       	in	r24, 0x33	; 51
 55c:	81 60       	ori	r24, 0x01	; 1
 55e:	83 bf       	out	0x33, r24	; 51
}
 560:	08 95       	ret

00000562 <impulse_stop>:

void impulse_stop(){
	TCCR0 ^= 1;
 562:	83 b7       	in	r24, 0x33	; 51
 564:	91 e0       	ldi	r25, 0x01	; 1
 566:	89 27       	eor	r24, r25
 568:	83 bf       	out	0x33, r24	; 51
}
 56a:	08 95       	ret

0000056c <__vector_15>:


ISR(TIMER0_COMP_vect)
{
 56c:	1f 92       	push	r1
 56e:	0f 92       	push	r0
 570:	0f b6       	in	r0, 0x3f	; 63
 572:	0f 92       	push	r0
 574:	0b b6       	in	r0, 0x3b	; 59
 576:	0f 92       	push	r0
 578:	11 24       	eor	r1, r1
 57a:	2f 93       	push	r18
 57c:	3f 93       	push	r19
 57e:	4f 93       	push	r20
 580:	5f 93       	push	r21
 582:	6f 93       	push	r22
 584:	7f 93       	push	r23
 586:	8f 93       	push	r24
 588:	9f 93       	push	r25
 58a:	af 93       	push	r26
 58c:	bf 93       	push	r27
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	ef 93       	push	r30
 594:	ff 93       	push	r31
	static int vmi = 1;
	
	if(vmi%2){
 596:	c0 91 06 01 	lds	r28, 0x0106
 59a:	d0 91 07 01 	lds	r29, 0x0107
 59e:	c0 ff       	sbrs	r28, 0
 5a0:	09 c0       	rjmp	.+18     	; 0x5b4 <__vector_15+0x48>
		led_out(0xff);
 5a2:	8f ef       	ldi	r24, 0xFF	; 255
 5a4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <led_out>
		vmi++;
 5a8:	21 96       	adiw	r28, 0x01	; 1
 5aa:	d0 93 07 01 	sts	0x0107, r29
 5ae:	c0 93 06 01 	sts	0x0106, r28
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <__vector_15+0x4e>
	}
	else{
		led_out(0);
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <led_out>
	}

}
 5ba:	ff 91       	pop	r31
 5bc:	ef 91       	pop	r30
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	bf 91       	pop	r27
 5c4:	af 91       	pop	r26
 5c6:	9f 91       	pop	r25
 5c8:	8f 91       	pop	r24
 5ca:	7f 91       	pop	r23
 5cc:	6f 91       	pop	r22
 5ce:	5f 91       	pop	r21
 5d0:	4f 91       	pop	r20
 5d2:	3f 91       	pop	r19
 5d4:	2f 91       	pop	r18
 5d6:	0f 90       	pop	r0
 5d8:	0b be       	out	0x3b, r0	; 59
 5da:	0f 90       	pop	r0
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	0f 90       	pop	r0
 5e0:	1f 90       	pop	r1
 5e2:	18 95       	reti

000005e4 <__udivmodhi4>:
 5e4:	aa 1b       	sub	r26, r26
 5e6:	bb 1b       	sub	r27, r27
 5e8:	51 e1       	ldi	r21, 0x11	; 17
 5ea:	07 c0       	rjmp	.+14     	; 0x5fa <__udivmodhi4_ep>

000005ec <__udivmodhi4_loop>:
 5ec:	aa 1f       	adc	r26, r26
 5ee:	bb 1f       	adc	r27, r27
 5f0:	a6 17       	cp	r26, r22
 5f2:	b7 07       	cpc	r27, r23
 5f4:	10 f0       	brcs	.+4      	; 0x5fa <__udivmodhi4_ep>
 5f6:	a6 1b       	sub	r26, r22
 5f8:	b7 0b       	sbc	r27, r23

000005fa <__udivmodhi4_ep>:
 5fa:	88 1f       	adc	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	5a 95       	dec	r21
 600:	a9 f7       	brne	.-22     	; 0x5ec <__udivmodhi4_loop>
 602:	80 95       	com	r24
 604:	90 95       	com	r25
 606:	bc 01       	movw	r22, r24
 608:	cd 01       	movw	r24, r26
 60a:	08 95       	ret

0000060c <_exit>:
 60c:	f8 94       	cli

0000060e <__stop_program>:
 60e:	ff cf       	rjmp	.-2      	; 0x60e <__stop_program>
