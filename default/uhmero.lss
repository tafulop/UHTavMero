
uhmero.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800100  00000b22  00000bb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080020a  0080020a  00000cc0  2**0
                  ALLOC
  3 .debug_aranges 00000140  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002bd  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000150c  00000000  00000000  000010bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c42  00000000  00000000  000025c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d9a  00000000  00000000  0000320b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00003fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000405  00000000  00000000  000041e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000490  00000000  00000000  000045ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_10>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_15>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_25>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e2       	ldi	r30, 0x22	; 34
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	12 e0       	ldi	r17, 0x02	; 2
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
  c6:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <set_uh_ports>:
	sei(); // global interrupt enable

}

void set_uh_ports(){
	DDRD |= 1;	// trigger kimenet
  ce:	88 9a       	sbi	0x11, 0	; 17
	DDRD &= 0b11111101;	// echo bemenet
  d0:	89 98       	cbi	0x11, 1	; 17
}
  d2:	08 95       	ret

000000d4 <timer0_init>:

void timer0_init(){
	
	OCR0 = 159;	// 10 usec széles trigger jelhez
  d4:	8f e9       	ldi	r24, 0x9F	; 159
  d6:	81 bf       	out	0x31, r24	; 49
	TCCR0 |= (1<<3); // CTC mode hogy pontos legyen a trigger
  d8:	83 b7       	in	r24, 0x33	; 51
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<1);	// interrupt enable
  de:	87 b7       	in	r24, 0x37	; 55
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	87 bf       	out	0x37, r24	; 55
}
  e4:	08 95       	ret

000000e6 <timer2_init>:

// Timer a 7seg meghajtásához
void timer2_init(){
	
	TCCR2 |= 3; 
  e6:	85 b5       	in	r24, 0x25	; 37
  e8:	83 60       	ori	r24, 0x03	; 3
  ea:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<6);	// interrupt
  ec:	87 b7       	in	r24, 0x37	; 55
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	87 bf       	out	0x37, r24	; 55
}
  f2:	08 95       	ret

000000f4 <timer3_input_capture_init>:

// impulzus szélességének mérése
void timer3_input_capture_init(){
	TCNT3 = 0;
  f4:	10 92 89 00 	sts	0x0089, r1
  f8:	10 92 88 00 	sts	0x0088, r1
	ETIMSK |= 1<<5;	// input capture interrupt enable
  fc:	ed e7       	ldi	r30, 0x7D	; 125
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 62       	ori	r24, 0x20	; 32
 104:	80 83       	st	Z, r24
	TCCR3B |= (1<<7)|(1<<6);	// noise filter + rising edge + 64 prescale
 106:	ea e8       	ldi	r30, 0x8A	; 138
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 6c       	ori	r24, 0xC0	; 192
 10e:	80 83       	st	Z, r24
}
 110:	08 95       	ret

00000112 <select_rising_edge>:

}

// beállítja a Timer 3 Input Capture módját Rising Edge-re
void select_rising_edge(){
	EICRA |= (1<<2)|(1<<3);
 112:	ea e6       	ldi	r30, 0x6A	; 106
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8c 60       	ori	r24, 0x0C	; 12
 11a:	80 83       	st	Z, r24
}
 11c:	08 95       	ret

0000011e <select_falling_edge>:

// beállítja a Timer 3 Input Capture módját Rising Edge-re
void select_falling_edge(){
	EICRA = 0;
 11e:	ea e6       	ldi	r30, 0x6A	; 106
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	10 82       	st	Z, r1
	EICRA |= (1<<3);
 124:	80 81       	ld	r24, Z
 126:	88 60       	ori	r24, 0x08	; 8
 128:	80 83       	st	Z, r24
}
 12a:	08 95       	ret

0000012c <__vector_10>:


// 7seg meghajtása
ISR(TIMER2_OVF_vect){
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	0b b6       	in	r0, 0x3b	; 59
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	segment_display();
 152:	0e 94 b8 01 	call	0x370	; 0x370 <segment_display>
} 
 156:	ff 91       	pop	r31
 158:	ef 91       	pop	r30
 15a:	bf 91       	pop	r27
 15c:	af 91       	pop	r26
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	7f 91       	pop	r23
 164:	6f 91       	pop	r22
 166:	5f 91       	pop	r21
 168:	4f 91       	pop	r20
 16a:	3f 91       	pop	r19
 16c:	2f 91       	pop	r18
 16e:	0f 90       	pop	r0
 170:	0b be       	out	0x3b, r0	; 59
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_25>:
	led_out(2);	
	TCCR3B |= 3;		// elindítjuk a Timer 3-at, ami méri az impulzus szélességét	
}

// Ide fut be, amint érkezik válasz a modultól (2x is ide fut egy mérés során)
ISR(TIMER3_CAPT_vect){
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	0b b6       	in	r0, 0x3b	; 59
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	6f 93       	push	r22
 194:	7f 93       	push	r23
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
	unsigned int res = 0;
	static unsigned int i1 =0;
	static unsigned int i2 =0;

	// ebbe fut bele elõször, mert 1/2 maradéka 1
	if(i%2){
 1a2:	20 91 00 01 	lds	r18, 0x0100
 1a6:	20 ff       	sbrs	r18, 0
 1a8:	11 c0       	rjmp	.+34     	; 0x1cc <__vector_25+0x50>
		i1 = ICR3;
 1aa:	80 91 80 00 	lds	r24, 0x0080
 1ae:	90 91 81 00 	lds	r25, 0x0081
 1b2:	90 93 0d 02 	sts	0x020D, r25
 1b6:	80 93 0c 02 	sts	0x020C, r24
		TCCR3B &= ~(1<<6);	// falling edge
 1ba:	80 91 8a 00 	lds	r24, 0x008A
 1be:	8f 7b       	andi	r24, 0xBF	; 191
 1c0:	80 93 8a 00 	sts	0x008A, r24
		i++;
 1c4:	2f 5f       	subi	r18, 0xFF	; 255
 1c6:	20 93 00 01 	sts	0x0100, r18
 1ca:	28 c0       	rjmp	.+80     	; 0x21c <__vector_25+0xa0>
	// ebbe másodszor, mert 2/2 maradéka 0		
	}else{
		TCCR3B |= 1<<6;		// rising edge
 1cc:	80 91 8a 00 	lds	r24, 0x008A
 1d0:	80 64       	ori	r24, 0x40	; 64
 1d2:	80 93 8a 00 	sts	0x008A, r24
		i2 = ICR3;
 1d6:	60 91 80 00 	lds	r22, 0x0080
 1da:	70 91 81 00 	lds	r23, 0x0081
 1de:	70 93 0b 02 	sts	0x020B, r23
 1e2:	60 93 0a 02 	sts	0x020A, r22
		i = 1;
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	20 93 00 01 	sts	0x0100, r18
		res = i2-i1;
	 	// eredetileg 58-cal kell osztani, de mi 4usec pontossággal mérünk, ezért 58/4=14.5-tel kell osztani
		segment_put_int((int)res/14.5);
 1ec:	20 91 0c 02 	lds	r18, 0x020C
 1f0:	30 91 0d 02 	lds	r19, 0x020D
 1f4:	62 1b       	sub	r22, r18
 1f6:	73 0b       	sbc	r23, r19
 1f8:	88 27       	eor	r24, r24
 1fa:	77 fd       	sbrc	r23, 7
 1fc:	80 95       	com	r24
 1fe:	98 2f       	mov	r25, r24
 200:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__floatsisf>
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	48 e6       	ldi	r20, 0x68	; 104
 20a:	51 e4       	ldi	r21, 0x41	; 65
 20c:	0e 94 37 02 	call	0x46e	; 0x46e <__divsf3>
 210:	0e 94 41 03 	call	0x682	; 0x682 <__fixsfsi>
 214:	dc 01       	movw	r26, r24
 216:	cb 01       	movw	r24, r22
 218:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <segment_put_int>
	}

	// ha egy mérés meg volt, akkor leállítjuk a timert 
	if(i > 2)
 21c:	80 91 00 01 	lds	r24, 0x0100
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	60 f0       	brcs	.+24     	; 0x23c <__vector_25+0xc0>
	{
		TCCR3B &= 0b11111000; // clock source off
 224:	80 91 8a 00 	lds	r24, 0x008A
 228:	88 7f       	andi	r24, 0xF8	; 248
 22a:	80 93 8a 00 	sts	0x008A, r24
		TCNT3 = 0;		// timert számláló regiszter nullázása
 22e:	10 92 89 00 	sts	0x0089, r1
 232:	10 92 88 00 	sts	0x0088, r1
		i = 1;	// i beállítása következõ méréshez.
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 00 01 	sts	0x0100, r24
	}

}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	bf 91       	pop	r27
 242:	af 91       	pop	r26
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	7f 91       	pop	r23
 24a:	6f 91       	pop	r22
 24c:	5f 91       	pop	r21
 24e:	4f 91       	pop	r20
 250:	3f 91       	pop	r19
 252:	2f 91       	pop	r18
 254:	0f 90       	pop	r0
 256:	0b be       	out	0x3b, r0	; 59
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <__vector_15>:
}


// ez állítja le a trigger impulzust
ISR(TIMER0_COMP_vect)
{	
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	0b b6       	in	r0, 0x3b	; 59
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	2f 93       	push	r18
 272:	3f 93       	push	r19
 274:	4f 93       	push	r20
 276:	5f 93       	push	r21
 278:	6f 93       	push	r22
 27a:	7f 93       	push	r23
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	af 93       	push	r26
 282:	bf 93       	push	r27
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
	PORTD &= 0b11111110;	// 10 usec impulzus vége, PORTD D0 ->0
 288:	90 98       	cbi	0x12, 0	; 18
	led_out(2);	
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	0e 94 a3 01 	call	0x346	; 0x346 <led_out>
	TCCR3B |= 3;		// elindítjuk a Timer 3-at, ami méri az impulzus szélességét	
 290:	ea e8       	ldi	r30, 0x8A	; 138
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	83 60       	ori	r24, 0x03	; 3
 298:	80 83       	st	Z, r24
}
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	bf 91       	pop	r27
 2a0:	af 91       	pop	r26
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	7f 91       	pop	r23
 2a8:	6f 91       	pop	r22
 2aa:	5f 91       	pop	r21
 2ac:	4f 91       	pop	r20
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0b be       	out	0x3b, r0	; 59
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <send_trigger>:
	TCCR3B |= (1<<7)|(1<<6);	// noise filter + rising edge + 64 prescale
}

// trigger küldése, leállítani a timer 0 fogja
void send_trigger(){
	TCNT0 = 0;	// timer számláló regiszter nullázás
 2c0:	12 be       	out	0x32, r1	; 50
	TCCR0 |= 1;	// timer 0 indítás
 2c2:	83 b7       	in	r24, 0x33	; 51
 2c4:	81 60       	ori	r24, 0x01	; 1
 2c6:	83 bf       	out	0x33, r24	; 51
	PORTD |= 1;
 2c8:	90 9a       	sbi	0x12, 0	; 18
	led_out(0);
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	0e 94 a3 01 	call	0x346	; 0x346 <led_out>
}
 2d0:	08 95       	ret

000002d2 <init_periph>:

}

void init_periph(){

	pushbutton_init();	// mérés starthoz
 2d2:	0e 94 2d 02 	call	0x45a	; 0x45a <pushbutton_init>
	led_init();		// debug infóhoz
 2d6:	0e 94 9c 01 	call	0x338	; 0x338 <led_init>
	sei(); // global interrupt enable

}

void set_uh_ports(){
	DDRD |= 1;	// trigger kimenet
 2da:	88 9a       	sbi	0x11, 0	; 17
	DDRD &= 0b11111101;	// echo bemenet
 2dc:	89 98       	cbi	0x11, 1	; 17

	pushbutton_init();	// mérés starthoz
	led_init();		// debug infóhoz
	
	set_uh_ports();	// Echo és Trigger beállítása
	segment_init();	// 7 szegmens init
 2de:	0e 94 b4 01 	call	0x368	; 0x368 <segment_init>
	DDRD &= 0b11111101;	// echo bemenet
}

void timer0_init(){
	
	OCR0 = 159;	// 10 usec széles trigger jelhez
 2e2:	8f e9       	ldi	r24, 0x9F	; 159
 2e4:	81 bf       	out	0x31, r24	; 49
	TCCR0 |= (1<<3); // CTC mode hogy pontos legyen a trigger
 2e6:	83 b7       	in	r24, 0x33	; 51
 2e8:	88 60       	ori	r24, 0x08	; 8
 2ea:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<1);	// interrupt enable
 2ec:	87 b7       	in	r24, 0x37	; 55
 2ee:	82 60       	ori	r24, 0x02	; 2
 2f0:	87 bf       	out	0x37, r24	; 55
}

// Timer a 7seg meghajtásához
void timer2_init(){
	
	TCCR2 |= 3; 
 2f2:	85 b5       	in	r24, 0x25	; 37
 2f4:	83 60       	ori	r24, 0x03	; 3
 2f6:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<6);	// interrupt
 2f8:	87 b7       	in	r24, 0x37	; 55
 2fa:	80 64       	ori	r24, 0x40	; 64
 2fc:	87 bf       	out	0x37, r24	; 55
}

// impulzus szélességének mérése
void timer3_input_capture_init(){
	TCNT3 = 0;
 2fe:	10 92 89 00 	sts	0x0089, r1
 302:	10 92 88 00 	sts	0x0088, r1
	ETIMSK |= 1<<5;	// input capture interrupt enable
 306:	ed e7       	ldi	r30, 0x7D	; 125
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	80 62       	ori	r24, 0x20	; 32
 30e:	80 83       	st	Z, r24
	TCCR3B |= (1<<7)|(1<<6);	// noise filter + rising edge + 64 prescale
 310:	ea e8       	ldi	r30, 0x8A	; 138
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	80 6c       	ori	r24, 0xC0	; 192
 318:	80 83       	st	Z, r24
	segment_init();	// 7 szegmens init
	timer0_init();	
	timer2_init();
	timer3_input_capture_init();
	
	sei(); // global interrupt enable
 31a:	78 94       	sei

}
 31c:	08 95       	ret

0000031e <main>:


int main (void){

	
	init_periph();
 31e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <init_periph>
	
	while(1){
		if(PING == 1){
 322:	80 91 63 00 	lds	r24, 0x0063
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	e1 f7       	brne	.-8      	; 0x322 <main+0x4>
			send_trigger();
 32a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <send_trigger>
			while(PING != 0){}
 32e:	80 91 63 00 	lds	r24, 0x0063
 332:	88 23       	and	r24, r24
 334:	e1 f7       	brne	.-8      	; 0x32e <main+0x10>
 336:	f5 cf       	rjmp	.-22     	; 0x322 <main+0x4>

00000338 <led_init>:
#include "led_driver.h"

void led_init()
{
	DDRB |= 0xF0;	// PORTB out
 338:	87 b3       	in	r24, 0x17	; 23
 33a:	80 6f       	ori	r24, 0xF0	; 240
 33c:	87 bb       	out	0x17, r24	; 23
	DDRD |= 0xF0;	// PORTD out
 33e:	81 b3       	in	r24, 0x11	; 17
 340:	80 6f       	ori	r24, 0xF0	; 240
 342:	81 bb       	out	0x11, r24	; 17
}
 344:	08 95       	ret

00000346 <led_out>:

void led_out(unsigned char data)
{
	PORTD &= 0x0F;
 346:	92 b3       	in	r25, 0x12	; 18
 348:	9f 70       	andi	r25, 0x0F	; 15
 34a:	92 bb       	out	0x12, r25	; 18
	PORTB &= 0x0F;
 34c:	98 b3       	in	r25, 0x18	; 24
 34e:	9f 70       	andi	r25, 0x0F	; 15
 350:	98 bb       	out	0x18, r25	; 24
	
	PORTD |= (data & 0xF0);
 352:	22 b3       	in	r18, 0x12	; 18
 354:	98 2f       	mov	r25, r24
 356:	90 7f       	andi	r25, 0xF0	; 240
 358:	92 2b       	or	r25, r18
 35a:	92 bb       	out	0x12, r25	; 18
	PORTB |= (data & 0x0F)<<4;
 35c:	98 b3       	in	r25, 0x18	; 24
 35e:	82 95       	swap	r24
 360:	80 7f       	andi	r24, 0xF0	; 240
 362:	98 2b       	or	r25, r24
 364:	98 bb       	out	0x18, r25	; 24
}
 366:	08 95       	ret

00000368 <segment_init>:
volatile unsigned char segment_data[4] = {0};


void segment_init()
{
	DDRA |= 0xFF;
 368:	8a b3       	in	r24, 0x1a	; 26
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	8a bb       	out	0x1a, r24	; 26
}
 36e:	08 95       	ret

00000370 <segment_display>:

void segment_display()
{
static unsigned char iterator,data_address;

PORTA = 0;	// en | _ _ _ | data
 370:	1b ba       	out	0x1b, r1	; 27
PORTA |= 0x80|(iterator++<<4)|segment_data[data_address--]; 
 372:	2b b3       	in	r18, 0x1b	; 27
 374:	90 91 13 02 	lds	r25, 0x0213
 378:	30 91 12 02 	lds	r19, 0x0212
 37c:	e3 2f       	mov	r30, r19
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	e2 5f       	subi	r30, 0xF2	; 242
 382:	fd 4f       	sbci	r31, 0xFD	; 253
 384:	40 81       	ld	r20, Z
 386:	20 68       	ori	r18, 0x80	; 128
 388:	89 2f       	mov	r24, r25
 38a:	82 95       	swap	r24
 38c:	80 7f       	andi	r24, 0xF0	; 240
 38e:	82 2b       	or	r24, r18
 390:	84 2b       	or	r24, r20
 392:	8b bb       	out	0x1b, r24	; 27
 394:	9f 5f       	subi	r25, 0xFF	; 255
 396:	90 93 13 02 	sts	0x0213, r25
 39a:	91 50       	subi	r25, 0x01	; 1
 39c:	31 50       	subi	r19, 0x01	; 1
 39e:	30 93 12 02 	sts	0x0212, r19

	if(iterator >= 	4 || iterator < 1)
 3a2:	93 30       	cpi	r25, 0x03	; 3
 3a4:	28 f0       	brcs	.+10     	; 0x3b0 <segment_display+0x40>
	{
		iterator = 0;
 3a6:	10 92 13 02 	sts	0x0213, r1
		data_address = 3;
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	80 93 12 02 	sts	0x0212, r24
 3b0:	08 95       	ret

000003b2 <segment_put_int>:
}



void segment_put_int(int data)
{
 3b2:	9c 01       	movw	r18, r24
	if(data <= 9999 && data >= 0)
 3b4:	87 e2       	ldi	r24, 0x27	; 39
 3b6:	20 31       	cpi	r18, 0x10	; 16
 3b8:	38 07       	cpc	r19, r24
 3ba:	58 f5       	brcc	.+86     	; 0x412 <segment_put_int+0x60>
	{
		unsigned char temp;
		temp = (data/1000)%10;
 3bc:	c9 01       	movw	r24, r18
 3be:	68 ee       	ldi	r22, 0xE8	; 232
 3c0:	73 e0       	ldi	r23, 0x03	; 3
 3c2:	0e 94 31 05 	call	0xa62	; 0xa62 <__divmodhi4>
 3c6:	cb 01       	movw	r24, r22
 3c8:	6a e0       	ldi	r22, 0x0A	; 10
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	0e 94 31 05 	call	0xa62	; 0xa62 <__divmodhi4>
		segment_data[0] = temp;		
 3d0:	80 93 0e 02 	sts	0x020E, r24
		temp = (data/100)%10;
 3d4:	c9 01       	movw	r24, r18
 3d6:	64 e6       	ldi	r22, 0x64	; 100
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	0e 94 31 05 	call	0xa62	; 0xa62 <__divmodhi4>
 3de:	cb 01       	movw	r24, r22
 3e0:	6a e0       	ldi	r22, 0x0A	; 10
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	0e 94 31 05 	call	0xa62	; 0xa62 <__divmodhi4>
		segment_data[1] = temp;
 3e8:	80 93 0f 02 	sts	0x020F, r24
		temp = (data/10)%10;
 3ec:	c9 01       	movw	r24, r18
 3ee:	6a e0       	ldi	r22, 0x0A	; 10
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	0e 94 31 05 	call	0xa62	; 0xa62 <__divmodhi4>
 3f6:	cb 01       	movw	r24, r22
 3f8:	6a e0       	ldi	r22, 0x0A	; 10
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	0e 94 31 05 	call	0xa62	; 0xa62 <__divmodhi4>
		segment_data[2] = temp;
 400:	80 93 10 02 	sts	0x0210, r24
		temp = data%10;
 404:	c9 01       	movw	r24, r18
 406:	6a e0       	ldi	r22, 0x0A	; 10
 408:	70 e0       	ldi	r23, 0x00	; 0
 40a:	0e 94 31 05 	call	0xa62	; 0xa62 <__divmodhi4>
		segment_data[3] = temp;
 40e:	80 93 11 02 	sts	0x0211, r24
 412:	08 95       	ret

00000414 <segment_get_int>:

int segment_get_int()
{
	int data = 0;
	
	data = 	segment_data[0]*1000;
 414:	80 91 0e 02 	lds	r24, 0x020E
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	28 ee       	ldi	r18, 0xE8	; 232
 41c:	33 e0       	ldi	r19, 0x03	; 3
 41e:	a9 01       	movw	r20, r18
 420:	84 9f       	mul	r24, r20
 422:	90 01       	movw	r18, r0
 424:	85 9f       	mul	r24, r21
 426:	30 0d       	add	r19, r0
 428:	94 9f       	mul	r25, r20
 42a:	30 0d       	add	r19, r0
 42c:	11 24       	eor	r1, r1
	data += segment_data[1]*100;
 42e:	80 91 0f 02 	lds	r24, 0x020F
	data += segment_data[2]*10;
 432:	40 91 10 02 	lds	r20, 0x0210
	data += segment_data[3];
 436:	70 91 11 02 	lds	r23, 0x0211
int segment_get_int()
{
	int data = 0;
	
	data = 	segment_data[0]*1000;
	data += segment_data[1]*100;
 43a:	64 e6       	ldi	r22, 0x64	; 100
 43c:	86 9f       	mul	r24, r22
 43e:	c0 01       	movw	r24, r0
 440:	11 24       	eor	r1, r1
 442:	28 0f       	add	r18, r24
 444:	39 1f       	adc	r19, r25
	data += segment_data[2]*10;
 446:	27 0f       	add	r18, r23
 448:	31 1d       	adc	r19, r1
 44a:	8a e0       	ldi	r24, 0x0A	; 10
 44c:	48 9f       	mul	r20, r24
 44e:	a0 01       	movw	r20, r0
 450:	11 24       	eor	r1, r1
 452:	24 0f       	add	r18, r20
 454:	35 1f       	adc	r19, r21
	data += segment_data[3];
	
return data;
}
 456:	c9 01       	movw	r24, r18
 458:	08 95       	ret

0000045a <pushbutton_init>:
#include "pushbutton_driver.h"

void pushbutton_init()
{
	DDRG |= 0x1F;
 45a:	e4 e6       	ldi	r30, 0x64	; 100
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	8f 61       	ori	r24, 0x1F	; 31
 462:	80 83       	st	Z, r24
}
 464:	08 95       	ret

00000466 <readbuttons>:

int readbuttons(){
	return PING;
 466:	80 91 63 00 	lds	r24, 0x0063
}
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	08 95       	ret

0000046e <__divsf3>:
 46e:	a8 e1       	ldi	r26, 0x18	; 24
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	ed e3       	ldi	r30, 0x3D	; 61
 474:	f2 e0       	ldi	r31, 0x02	; 2
 476:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__prologue_saves__+0x10>
 47a:	69 83       	std	Y+1, r22	; 0x01
 47c:	7a 83       	std	Y+2, r23	; 0x02
 47e:	8b 83       	std	Y+3, r24	; 0x03
 480:	9c 83       	std	Y+4, r25	; 0x04
 482:	2d 83       	std	Y+5, r18	; 0x05
 484:	3e 83       	std	Y+6, r19	; 0x06
 486:	4f 83       	std	Y+7, r20	; 0x07
 488:	58 87       	std	Y+8, r21	; 0x08
 48a:	b9 e0       	ldi	r27, 0x09	; 9
 48c:	eb 2e       	mov	r14, r27
 48e:	f1 2c       	mov	r15, r1
 490:	ec 0e       	add	r14, r28
 492:	fd 1e       	adc	r15, r29
 494:	ce 01       	movw	r24, r28
 496:	01 96       	adiw	r24, 0x01	; 1
 498:	b7 01       	movw	r22, r14
 49a:	0e 94 b9 04 	call	0x972	; 0x972 <__unpack_f>
 49e:	8e 01       	movw	r16, r28
 4a0:	0f 5e       	subi	r16, 0xEF	; 239
 4a2:	1f 4f       	sbci	r17, 0xFF	; 255
 4a4:	ce 01       	movw	r24, r28
 4a6:	05 96       	adiw	r24, 0x05	; 5
 4a8:	b8 01       	movw	r22, r16
 4aa:	0e 94 b9 04 	call	0x972	; 0x972 <__unpack_f>
 4ae:	29 85       	ldd	r18, Y+9	; 0x09
 4b0:	22 30       	cpi	r18, 0x02	; 2
 4b2:	08 f4       	brcc	.+2      	; 0x4b6 <__divsf3+0x48>
 4b4:	7e c0       	rjmp	.+252    	; 0x5b2 <__divsf3+0x144>
 4b6:	39 89       	ldd	r19, Y+17	; 0x11
 4b8:	32 30       	cpi	r19, 0x02	; 2
 4ba:	10 f4       	brcc	.+4      	; 0x4c0 <__divsf3+0x52>
 4bc:	b8 01       	movw	r22, r16
 4be:	7c c0       	rjmp	.+248    	; 0x5b8 <__divsf3+0x14a>
 4c0:	8a 85       	ldd	r24, Y+10	; 0x0a
 4c2:	9a 89       	ldd	r25, Y+18	; 0x12
 4c4:	89 27       	eor	r24, r25
 4c6:	8a 87       	std	Y+10, r24	; 0x0a
 4c8:	24 30       	cpi	r18, 0x04	; 4
 4ca:	11 f0       	breq	.+4      	; 0x4d0 <__divsf3+0x62>
 4cc:	22 30       	cpi	r18, 0x02	; 2
 4ce:	31 f4       	brne	.+12     	; 0x4dc <__divsf3+0x6e>
 4d0:	23 17       	cp	r18, r19
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <__divsf3+0x68>
 4d4:	6e c0       	rjmp	.+220    	; 0x5b2 <__divsf3+0x144>
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	71 e0       	ldi	r23, 0x01	; 1
 4da:	6e c0       	rjmp	.+220    	; 0x5b8 <__divsf3+0x14a>
 4dc:	34 30       	cpi	r19, 0x04	; 4
 4de:	39 f4       	brne	.+14     	; 0x4ee <__divsf3+0x80>
 4e0:	1d 86       	std	Y+13, r1	; 0x0d
 4e2:	1e 86       	std	Y+14, r1	; 0x0e
 4e4:	1f 86       	std	Y+15, r1	; 0x0f
 4e6:	18 8a       	std	Y+16, r1	; 0x10
 4e8:	1c 86       	std	Y+12, r1	; 0x0c
 4ea:	1b 86       	std	Y+11, r1	; 0x0b
 4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <__divsf3+0x88>
 4ee:	32 30       	cpi	r19, 0x02	; 2
 4f0:	21 f4       	brne	.+8      	; 0x4fa <__divsf3+0x8c>
 4f2:	84 e0       	ldi	r24, 0x04	; 4
 4f4:	89 87       	std	Y+9, r24	; 0x09
 4f6:	b7 01       	movw	r22, r14
 4f8:	5f c0       	rjmp	.+190    	; 0x5b8 <__divsf3+0x14a>
 4fa:	2b 85       	ldd	r18, Y+11	; 0x0b
 4fc:	3c 85       	ldd	r19, Y+12	; 0x0c
 4fe:	8b 89       	ldd	r24, Y+19	; 0x13
 500:	9c 89       	ldd	r25, Y+20	; 0x14
 502:	28 1b       	sub	r18, r24
 504:	39 0b       	sbc	r19, r25
 506:	3c 87       	std	Y+12, r19	; 0x0c
 508:	2b 87       	std	Y+11, r18	; 0x0b
 50a:	ed 84       	ldd	r14, Y+13	; 0x0d
 50c:	fe 84       	ldd	r15, Y+14	; 0x0e
 50e:	0f 85       	ldd	r16, Y+15	; 0x0f
 510:	18 89       	ldd	r17, Y+16	; 0x10
 512:	ad 88       	ldd	r10, Y+21	; 0x15
 514:	be 88       	ldd	r11, Y+22	; 0x16
 516:	cf 88       	ldd	r12, Y+23	; 0x17
 518:	d8 8c       	ldd	r13, Y+24	; 0x18
 51a:	ea 14       	cp	r14, r10
 51c:	fb 04       	cpc	r15, r11
 51e:	0c 05       	cpc	r16, r12
 520:	1d 05       	cpc	r17, r13
 522:	40 f4       	brcc	.+16     	; 0x534 <__divsf3+0xc6>
 524:	ee 0c       	add	r14, r14
 526:	ff 1c       	adc	r15, r15
 528:	00 1f       	adc	r16, r16
 52a:	11 1f       	adc	r17, r17
 52c:	21 50       	subi	r18, 0x01	; 1
 52e:	30 40       	sbci	r19, 0x00	; 0
 530:	3c 87       	std	Y+12, r19	; 0x0c
 532:	2b 87       	std	Y+11, r18	; 0x0b
 534:	20 e0       	ldi	r18, 0x00	; 0
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	50 e0       	ldi	r21, 0x00	; 0
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	a0 e0       	ldi	r26, 0x00	; 0
 542:	b0 e4       	ldi	r27, 0x40	; 64
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	ea 14       	cp	r14, r10
 54a:	fb 04       	cpc	r15, r11
 54c:	0c 05       	cpc	r16, r12
 54e:	1d 05       	cpc	r17, r13
 550:	40 f0       	brcs	.+16     	; 0x562 <__divsf3+0xf4>
 552:	28 2b       	or	r18, r24
 554:	39 2b       	or	r19, r25
 556:	4a 2b       	or	r20, r26
 558:	5b 2b       	or	r21, r27
 55a:	ea 18       	sub	r14, r10
 55c:	fb 08       	sbc	r15, r11
 55e:	0c 09       	sbc	r16, r12
 560:	1d 09       	sbc	r17, r13
 562:	b6 95       	lsr	r27
 564:	a7 95       	ror	r26
 566:	97 95       	ror	r25
 568:	87 95       	ror	r24
 56a:	ee 0c       	add	r14, r14
 56c:	ff 1c       	adc	r15, r15
 56e:	00 1f       	adc	r16, r16
 570:	11 1f       	adc	r17, r17
 572:	6f 5f       	subi	r22, 0xFF	; 255
 574:	7f 4f       	sbci	r23, 0xFF	; 255
 576:	6f 31       	cpi	r22, 0x1F	; 31
 578:	71 05       	cpc	r23, r1
 57a:	31 f7       	brne	.-52     	; 0x548 <__divsf3+0xda>
 57c:	da 01       	movw	r26, r20
 57e:	c9 01       	movw	r24, r18
 580:	8f 77       	andi	r24, 0x7F	; 127
 582:	90 70       	andi	r25, 0x00	; 0
 584:	a0 70       	andi	r26, 0x00	; 0
 586:	b0 70       	andi	r27, 0x00	; 0
 588:	80 34       	cpi	r24, 0x40	; 64
 58a:	91 05       	cpc	r25, r1
 58c:	a1 05       	cpc	r26, r1
 58e:	b1 05       	cpc	r27, r1
 590:	61 f4       	brne	.+24     	; 0x5aa <__divsf3+0x13c>
 592:	27 fd       	sbrc	r18, 7
 594:	0a c0       	rjmp	.+20     	; 0x5aa <__divsf3+0x13c>
 596:	e1 14       	cp	r14, r1
 598:	f1 04       	cpc	r15, r1
 59a:	01 05       	cpc	r16, r1
 59c:	11 05       	cpc	r17, r1
 59e:	29 f0       	breq	.+10     	; 0x5aa <__divsf3+0x13c>
 5a0:	20 5c       	subi	r18, 0xC0	; 192
 5a2:	3f 4f       	sbci	r19, 0xFF	; 255
 5a4:	4f 4f       	sbci	r20, 0xFF	; 255
 5a6:	5f 4f       	sbci	r21, 0xFF	; 255
 5a8:	20 78       	andi	r18, 0x80	; 128
 5aa:	2d 87       	std	Y+13, r18	; 0x0d
 5ac:	3e 87       	std	Y+14, r19	; 0x0e
 5ae:	4f 87       	std	Y+15, r20	; 0x0f
 5b0:	58 8b       	std	Y+16, r21	; 0x10
 5b2:	be 01       	movw	r22, r28
 5b4:	67 5f       	subi	r22, 0xF7	; 247
 5b6:	7f 4f       	sbci	r23, 0xFF	; 255
 5b8:	cb 01       	movw	r24, r22
 5ba:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__pack_f>
 5be:	68 96       	adiw	r28, 0x18	; 24
 5c0:	ea e0       	ldi	r30, 0x0A	; 10
 5c2:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__epilogue_restores__+0x10>

000005c6 <__floatsisf>:
 5c6:	a8 e0       	ldi	r26, 0x08	; 8
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	e9 ee       	ldi	r30, 0xE9	; 233
 5cc:	f2 e0       	ldi	r31, 0x02	; 2
 5ce:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__prologue_saves__+0x12>
 5d2:	9b 01       	movw	r18, r22
 5d4:	ac 01       	movw	r20, r24
 5d6:	83 e0       	ldi	r24, 0x03	; 3
 5d8:	89 83       	std	Y+1, r24	; 0x01
 5da:	da 01       	movw	r26, r20
 5dc:	c9 01       	movw	r24, r18
 5de:	88 27       	eor	r24, r24
 5e0:	b7 fd       	sbrc	r27, 7
 5e2:	83 95       	inc	r24
 5e4:	99 27       	eor	r25, r25
 5e6:	aa 27       	eor	r26, r26
 5e8:	bb 27       	eor	r27, r27
 5ea:	b8 2e       	mov	r11, r24
 5ec:	21 15       	cp	r18, r1
 5ee:	31 05       	cpc	r19, r1
 5f0:	41 05       	cpc	r20, r1
 5f2:	51 05       	cpc	r21, r1
 5f4:	19 f4       	brne	.+6      	; 0x5fc <__floatsisf+0x36>
 5f6:	82 e0       	ldi	r24, 0x02	; 2
 5f8:	89 83       	std	Y+1, r24	; 0x01
 5fa:	3a c0       	rjmp	.+116    	; 0x670 <__floatsisf+0xaa>
 5fc:	88 23       	and	r24, r24
 5fe:	a9 f0       	breq	.+42     	; 0x62a <__floatsisf+0x64>
 600:	20 30       	cpi	r18, 0x00	; 0
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	38 07       	cpc	r19, r24
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	48 07       	cpc	r20, r24
 60a:	80 e8       	ldi	r24, 0x80	; 128
 60c:	58 07       	cpc	r21, r24
 60e:	29 f4       	brne	.+10     	; 0x61a <__floatsisf+0x54>
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	70 e0       	ldi	r23, 0x00	; 0
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	9f ec       	ldi	r25, 0xCF	; 207
 618:	30 c0       	rjmp	.+96     	; 0x67a <__floatsisf+0xb4>
 61a:	ee 24       	eor	r14, r14
 61c:	ff 24       	eor	r15, r15
 61e:	87 01       	movw	r16, r14
 620:	e2 1a       	sub	r14, r18
 622:	f3 0a       	sbc	r15, r19
 624:	04 0b       	sbc	r16, r20
 626:	15 0b       	sbc	r17, r21
 628:	02 c0       	rjmp	.+4      	; 0x62e <__floatsisf+0x68>
 62a:	79 01       	movw	r14, r18
 62c:	8a 01       	movw	r16, r20
 62e:	8e e1       	ldi	r24, 0x1E	; 30
 630:	c8 2e       	mov	r12, r24
 632:	d1 2c       	mov	r13, r1
 634:	dc 82       	std	Y+4, r13	; 0x04
 636:	cb 82       	std	Y+3, r12	; 0x03
 638:	ed 82       	std	Y+5, r14	; 0x05
 63a:	fe 82       	std	Y+6, r15	; 0x06
 63c:	0f 83       	std	Y+7, r16	; 0x07
 63e:	18 87       	std	Y+8, r17	; 0x08
 640:	c8 01       	movw	r24, r16
 642:	b7 01       	movw	r22, r14
 644:	0e 94 95 03 	call	0x72a	; 0x72a <__clzsi2>
 648:	01 97       	sbiw	r24, 0x01	; 1
 64a:	18 16       	cp	r1, r24
 64c:	19 06       	cpc	r1, r25
 64e:	84 f4       	brge	.+32     	; 0x670 <__floatsisf+0xaa>
 650:	08 2e       	mov	r0, r24
 652:	04 c0       	rjmp	.+8      	; 0x65c <__floatsisf+0x96>
 654:	ee 0c       	add	r14, r14
 656:	ff 1c       	adc	r15, r15
 658:	00 1f       	adc	r16, r16
 65a:	11 1f       	adc	r17, r17
 65c:	0a 94       	dec	r0
 65e:	d2 f7       	brpl	.-12     	; 0x654 <__floatsisf+0x8e>
 660:	ed 82       	std	Y+5, r14	; 0x05
 662:	fe 82       	std	Y+6, r15	; 0x06
 664:	0f 83       	std	Y+7, r16	; 0x07
 666:	18 87       	std	Y+8, r17	; 0x08
 668:	c8 1a       	sub	r12, r24
 66a:	d9 0a       	sbc	r13, r25
 66c:	dc 82       	std	Y+4, r13	; 0x04
 66e:	cb 82       	std	Y+3, r12	; 0x03
 670:	ba 82       	std	Y+2, r11	; 0x02
 672:	ce 01       	movw	r24, r28
 674:	01 96       	adiw	r24, 0x01	; 1
 676:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__pack_f>
 67a:	28 96       	adiw	r28, 0x08	; 8
 67c:	e9 e0       	ldi	r30, 0x09	; 9
 67e:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__epilogue_restores__+0x12>

00000682 <__fixsfsi>:
 682:	ac e0       	ldi	r26, 0x0C	; 12
 684:	b0 e0       	ldi	r27, 0x00	; 0
 686:	e7 e4       	ldi	r30, 0x47	; 71
 688:	f3 e0       	ldi	r31, 0x03	; 3
 68a:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__prologue_saves__+0x20>
 68e:	69 83       	std	Y+1, r22	; 0x01
 690:	7a 83       	std	Y+2, r23	; 0x02
 692:	8b 83       	std	Y+3, r24	; 0x03
 694:	9c 83       	std	Y+4, r25	; 0x04
 696:	ce 01       	movw	r24, r28
 698:	01 96       	adiw	r24, 0x01	; 1
 69a:	be 01       	movw	r22, r28
 69c:	6b 5f       	subi	r22, 0xFB	; 251
 69e:	7f 4f       	sbci	r23, 0xFF	; 255
 6a0:	0e 94 b9 04 	call	0x972	; 0x972 <__unpack_f>
 6a4:	8d 81       	ldd	r24, Y+5	; 0x05
 6a6:	82 30       	cpi	r24, 0x02	; 2
 6a8:	61 f1       	breq	.+88     	; 0x702 <__fixsfsi+0x80>
 6aa:	82 30       	cpi	r24, 0x02	; 2
 6ac:	50 f1       	brcs	.+84     	; 0x702 <__fixsfsi+0x80>
 6ae:	84 30       	cpi	r24, 0x04	; 4
 6b0:	21 f4       	brne	.+8      	; 0x6ba <__fixsfsi+0x38>
 6b2:	8e 81       	ldd	r24, Y+6	; 0x06
 6b4:	88 23       	and	r24, r24
 6b6:	51 f1       	breq	.+84     	; 0x70c <__fixsfsi+0x8a>
 6b8:	2e c0       	rjmp	.+92     	; 0x716 <__fixsfsi+0x94>
 6ba:	2f 81       	ldd	r18, Y+7	; 0x07
 6bc:	38 85       	ldd	r19, Y+8	; 0x08
 6be:	37 fd       	sbrc	r19, 7
 6c0:	20 c0       	rjmp	.+64     	; 0x702 <__fixsfsi+0x80>
 6c2:	6e 81       	ldd	r22, Y+6	; 0x06
 6c4:	2f 31       	cpi	r18, 0x1F	; 31
 6c6:	31 05       	cpc	r19, r1
 6c8:	1c f0       	brlt	.+6      	; 0x6d0 <__fixsfsi+0x4e>
 6ca:	66 23       	and	r22, r22
 6cc:	f9 f0       	breq	.+62     	; 0x70c <__fixsfsi+0x8a>
 6ce:	23 c0       	rjmp	.+70     	; 0x716 <__fixsfsi+0x94>
 6d0:	8e e1       	ldi	r24, 0x1E	; 30
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	82 1b       	sub	r24, r18
 6d6:	93 0b       	sbc	r25, r19
 6d8:	29 85       	ldd	r18, Y+9	; 0x09
 6da:	3a 85       	ldd	r19, Y+10	; 0x0a
 6dc:	4b 85       	ldd	r20, Y+11	; 0x0b
 6de:	5c 85       	ldd	r21, Y+12	; 0x0c
 6e0:	04 c0       	rjmp	.+8      	; 0x6ea <__fixsfsi+0x68>
 6e2:	56 95       	lsr	r21
 6e4:	47 95       	ror	r20
 6e6:	37 95       	ror	r19
 6e8:	27 95       	ror	r18
 6ea:	8a 95       	dec	r24
 6ec:	d2 f7       	brpl	.-12     	; 0x6e2 <__fixsfsi+0x60>
 6ee:	66 23       	and	r22, r22
 6f0:	b1 f0       	breq	.+44     	; 0x71e <__fixsfsi+0x9c>
 6f2:	50 95       	com	r21
 6f4:	40 95       	com	r20
 6f6:	30 95       	com	r19
 6f8:	21 95       	neg	r18
 6fa:	3f 4f       	sbci	r19, 0xFF	; 255
 6fc:	4f 4f       	sbci	r20, 0xFF	; 255
 6fe:	5f 4f       	sbci	r21, 0xFF	; 255
 700:	0e c0       	rjmp	.+28     	; 0x71e <__fixsfsi+0x9c>
 702:	20 e0       	ldi	r18, 0x00	; 0
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	40 e0       	ldi	r20, 0x00	; 0
 708:	50 e0       	ldi	r21, 0x00	; 0
 70a:	09 c0       	rjmp	.+18     	; 0x71e <__fixsfsi+0x9c>
 70c:	2f ef       	ldi	r18, 0xFF	; 255
 70e:	3f ef       	ldi	r19, 0xFF	; 255
 710:	4f ef       	ldi	r20, 0xFF	; 255
 712:	5f e7       	ldi	r21, 0x7F	; 127
 714:	04 c0       	rjmp	.+8      	; 0x71e <__fixsfsi+0x9c>
 716:	20 e0       	ldi	r18, 0x00	; 0
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	40 e0       	ldi	r20, 0x00	; 0
 71c:	50 e8       	ldi	r21, 0x80	; 128
 71e:	b9 01       	movw	r22, r18
 720:	ca 01       	movw	r24, r20
 722:	2c 96       	adiw	r28, 0x0c	; 12
 724:	e2 e0       	ldi	r30, 0x02	; 2
 726:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__epilogue_restores__+0x20>

0000072a <__clzsi2>:
 72a:	ef 92       	push	r14
 72c:	ff 92       	push	r15
 72e:	0f 93       	push	r16
 730:	1f 93       	push	r17
 732:	7b 01       	movw	r14, r22
 734:	8c 01       	movw	r16, r24
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	e8 16       	cp	r14, r24
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	f8 06       	cpc	r15, r24
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	08 07       	cpc	r16, r24
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	18 07       	cpc	r17, r24
 746:	88 f4       	brcc	.+34     	; 0x76a <__clzsi2+0x40>
 748:	8f ef       	ldi	r24, 0xFF	; 255
 74a:	e8 16       	cp	r14, r24
 74c:	f1 04       	cpc	r15, r1
 74e:	01 05       	cpc	r16, r1
 750:	11 05       	cpc	r17, r1
 752:	31 f0       	breq	.+12     	; 0x760 <__clzsi2+0x36>
 754:	28 f0       	brcs	.+10     	; 0x760 <__clzsi2+0x36>
 756:	88 e0       	ldi	r24, 0x08	; 8
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	a0 e0       	ldi	r26, 0x00	; 0
 75c:	b0 e0       	ldi	r27, 0x00	; 0
 75e:	17 c0       	rjmp	.+46     	; 0x78e <__clzsi2+0x64>
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	a0 e0       	ldi	r26, 0x00	; 0
 766:	b0 e0       	ldi	r27, 0x00	; 0
 768:	12 c0       	rjmp	.+36     	; 0x78e <__clzsi2+0x64>
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	e8 16       	cp	r14, r24
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	f8 06       	cpc	r15, r24
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	08 07       	cpc	r16, r24
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	18 07       	cpc	r17, r24
 77a:	28 f0       	brcs	.+10     	; 0x786 <__clzsi2+0x5c>
 77c:	88 e1       	ldi	r24, 0x18	; 24
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	a0 e0       	ldi	r26, 0x00	; 0
 782:	b0 e0       	ldi	r27, 0x00	; 0
 784:	04 c0       	rjmp	.+8      	; 0x78e <__clzsi2+0x64>
 786:	80 e1       	ldi	r24, 0x10	; 16
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	a0 e0       	ldi	r26, 0x00	; 0
 78c:	b0 e0       	ldi	r27, 0x00	; 0
 78e:	20 e2       	ldi	r18, 0x20	; 32
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	40 e0       	ldi	r20, 0x00	; 0
 794:	50 e0       	ldi	r21, 0x00	; 0
 796:	28 1b       	sub	r18, r24
 798:	39 0b       	sbc	r19, r25
 79a:	4a 0b       	sbc	r20, r26
 79c:	5b 0b       	sbc	r21, r27
 79e:	04 c0       	rjmp	.+8      	; 0x7a8 <__clzsi2+0x7e>
 7a0:	16 95       	lsr	r17
 7a2:	07 95       	ror	r16
 7a4:	f7 94       	ror	r15
 7a6:	e7 94       	ror	r14
 7a8:	8a 95       	dec	r24
 7aa:	d2 f7       	brpl	.-12     	; 0x7a0 <__clzsi2+0x76>
 7ac:	f7 01       	movw	r30, r14
 7ae:	e7 5f       	subi	r30, 0xF7	; 247
 7b0:	fe 4f       	sbci	r31, 0xFE	; 254
 7b2:	80 81       	ld	r24, Z
 7b4:	28 1b       	sub	r18, r24
 7b6:	31 09       	sbc	r19, r1
 7b8:	41 09       	sbc	r20, r1
 7ba:	51 09       	sbc	r21, r1
 7bc:	c9 01       	movw	r24, r18
 7be:	1f 91       	pop	r17
 7c0:	0f 91       	pop	r16
 7c2:	ff 90       	pop	r15
 7c4:	ef 90       	pop	r14
 7c6:	08 95       	ret

000007c8 <__pack_f>:
 7c8:	df 92       	push	r13
 7ca:	ef 92       	push	r14
 7cc:	ff 92       	push	r15
 7ce:	0f 93       	push	r16
 7d0:	1f 93       	push	r17
 7d2:	fc 01       	movw	r30, r24
 7d4:	e4 80       	ldd	r14, Z+4	; 0x04
 7d6:	f5 80       	ldd	r15, Z+5	; 0x05
 7d8:	06 81       	ldd	r16, Z+6	; 0x06
 7da:	17 81       	ldd	r17, Z+7	; 0x07
 7dc:	d1 80       	ldd	r13, Z+1	; 0x01
 7de:	80 81       	ld	r24, Z
 7e0:	82 30       	cpi	r24, 0x02	; 2
 7e2:	48 f4       	brcc	.+18     	; 0x7f6 <__pack_f+0x2e>
 7e4:	80 e0       	ldi	r24, 0x00	; 0
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	a0 e1       	ldi	r26, 0x10	; 16
 7ea:	b0 e0       	ldi	r27, 0x00	; 0
 7ec:	e8 2a       	or	r14, r24
 7ee:	f9 2a       	or	r15, r25
 7f0:	0a 2b       	or	r16, r26
 7f2:	1b 2b       	or	r17, r27
 7f4:	a5 c0       	rjmp	.+330    	; 0x940 <__pack_f+0x178>
 7f6:	84 30       	cpi	r24, 0x04	; 4
 7f8:	09 f4       	brne	.+2      	; 0x7fc <__pack_f+0x34>
 7fa:	9f c0       	rjmp	.+318    	; 0x93a <__pack_f+0x172>
 7fc:	82 30       	cpi	r24, 0x02	; 2
 7fe:	21 f4       	brne	.+8      	; 0x808 <__pack_f+0x40>
 800:	ee 24       	eor	r14, r14
 802:	ff 24       	eor	r15, r15
 804:	87 01       	movw	r16, r14
 806:	05 c0       	rjmp	.+10     	; 0x812 <__pack_f+0x4a>
 808:	e1 14       	cp	r14, r1
 80a:	f1 04       	cpc	r15, r1
 80c:	01 05       	cpc	r16, r1
 80e:	11 05       	cpc	r17, r1
 810:	19 f4       	brne	.+6      	; 0x818 <__pack_f+0x50>
 812:	e0 e0       	ldi	r30, 0x00	; 0
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	96 c0       	rjmp	.+300    	; 0x944 <__pack_f+0x17c>
 818:	62 81       	ldd	r22, Z+2	; 0x02
 81a:	73 81       	ldd	r23, Z+3	; 0x03
 81c:	9f ef       	ldi	r25, 0xFF	; 255
 81e:	62 38       	cpi	r22, 0x82	; 130
 820:	79 07       	cpc	r23, r25
 822:	0c f0       	brlt	.+2      	; 0x826 <__pack_f+0x5e>
 824:	5b c0       	rjmp	.+182    	; 0x8dc <__pack_f+0x114>
 826:	22 e8       	ldi	r18, 0x82	; 130
 828:	3f ef       	ldi	r19, 0xFF	; 255
 82a:	26 1b       	sub	r18, r22
 82c:	37 0b       	sbc	r19, r23
 82e:	2a 31       	cpi	r18, 0x1A	; 26
 830:	31 05       	cpc	r19, r1
 832:	2c f0       	brlt	.+10     	; 0x83e <__pack_f+0x76>
 834:	20 e0       	ldi	r18, 0x00	; 0
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	40 e0       	ldi	r20, 0x00	; 0
 83a:	50 e0       	ldi	r21, 0x00	; 0
 83c:	2a c0       	rjmp	.+84     	; 0x892 <__pack_f+0xca>
 83e:	b8 01       	movw	r22, r16
 840:	a7 01       	movw	r20, r14
 842:	02 2e       	mov	r0, r18
 844:	04 c0       	rjmp	.+8      	; 0x84e <__pack_f+0x86>
 846:	76 95       	lsr	r23
 848:	67 95       	ror	r22
 84a:	57 95       	ror	r21
 84c:	47 95       	ror	r20
 84e:	0a 94       	dec	r0
 850:	d2 f7       	brpl	.-12     	; 0x846 <__pack_f+0x7e>
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	a0 e0       	ldi	r26, 0x00	; 0
 858:	b0 e0       	ldi	r27, 0x00	; 0
 85a:	04 c0       	rjmp	.+8      	; 0x864 <__pack_f+0x9c>
 85c:	88 0f       	add	r24, r24
 85e:	99 1f       	adc	r25, r25
 860:	aa 1f       	adc	r26, r26
 862:	bb 1f       	adc	r27, r27
 864:	2a 95       	dec	r18
 866:	d2 f7       	brpl	.-12     	; 0x85c <__pack_f+0x94>
 868:	01 97       	sbiw	r24, 0x01	; 1
 86a:	a1 09       	sbc	r26, r1
 86c:	b1 09       	sbc	r27, r1
 86e:	8e 21       	and	r24, r14
 870:	9f 21       	and	r25, r15
 872:	a0 23       	and	r26, r16
 874:	b1 23       	and	r27, r17
 876:	00 97       	sbiw	r24, 0x00	; 0
 878:	a1 05       	cpc	r26, r1
 87a:	b1 05       	cpc	r27, r1
 87c:	21 f0       	breq	.+8      	; 0x886 <__pack_f+0xbe>
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	a0 e0       	ldi	r26, 0x00	; 0
 884:	b0 e0       	ldi	r27, 0x00	; 0
 886:	9a 01       	movw	r18, r20
 888:	ab 01       	movw	r20, r22
 88a:	28 2b       	or	r18, r24
 88c:	39 2b       	or	r19, r25
 88e:	4a 2b       	or	r20, r26
 890:	5b 2b       	or	r21, r27
 892:	da 01       	movw	r26, r20
 894:	c9 01       	movw	r24, r18
 896:	8f 77       	andi	r24, 0x7F	; 127
 898:	90 70       	andi	r25, 0x00	; 0
 89a:	a0 70       	andi	r26, 0x00	; 0
 89c:	b0 70       	andi	r27, 0x00	; 0
 89e:	80 34       	cpi	r24, 0x40	; 64
 8a0:	91 05       	cpc	r25, r1
 8a2:	a1 05       	cpc	r26, r1
 8a4:	b1 05       	cpc	r27, r1
 8a6:	39 f4       	brne	.+14     	; 0x8b6 <__pack_f+0xee>
 8a8:	27 ff       	sbrs	r18, 7
 8aa:	09 c0       	rjmp	.+18     	; 0x8be <__pack_f+0xf6>
 8ac:	20 5c       	subi	r18, 0xC0	; 192
 8ae:	3f 4f       	sbci	r19, 0xFF	; 255
 8b0:	4f 4f       	sbci	r20, 0xFF	; 255
 8b2:	5f 4f       	sbci	r21, 0xFF	; 255
 8b4:	04 c0       	rjmp	.+8      	; 0x8be <__pack_f+0xf6>
 8b6:	21 5c       	subi	r18, 0xC1	; 193
 8b8:	3f 4f       	sbci	r19, 0xFF	; 255
 8ba:	4f 4f       	sbci	r20, 0xFF	; 255
 8bc:	5f 4f       	sbci	r21, 0xFF	; 255
 8be:	e0 e0       	ldi	r30, 0x00	; 0
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	20 30       	cpi	r18, 0x00	; 0
 8c4:	a0 e0       	ldi	r26, 0x00	; 0
 8c6:	3a 07       	cpc	r19, r26
 8c8:	a0 e0       	ldi	r26, 0x00	; 0
 8ca:	4a 07       	cpc	r20, r26
 8cc:	a0 e4       	ldi	r26, 0x40	; 64
 8ce:	5a 07       	cpc	r21, r26
 8d0:	10 f0       	brcs	.+4      	; 0x8d6 <__pack_f+0x10e>
 8d2:	e1 e0       	ldi	r30, 0x01	; 1
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	79 01       	movw	r14, r18
 8d8:	8a 01       	movw	r16, r20
 8da:	27 c0       	rjmp	.+78     	; 0x92a <__pack_f+0x162>
 8dc:	60 38       	cpi	r22, 0x80	; 128
 8de:	71 05       	cpc	r23, r1
 8e0:	64 f5       	brge	.+88     	; 0x93a <__pack_f+0x172>
 8e2:	fb 01       	movw	r30, r22
 8e4:	e1 58       	subi	r30, 0x81	; 129
 8e6:	ff 4f       	sbci	r31, 0xFF	; 255
 8e8:	d8 01       	movw	r26, r16
 8ea:	c7 01       	movw	r24, r14
 8ec:	8f 77       	andi	r24, 0x7F	; 127
 8ee:	90 70       	andi	r25, 0x00	; 0
 8f0:	a0 70       	andi	r26, 0x00	; 0
 8f2:	b0 70       	andi	r27, 0x00	; 0
 8f4:	80 34       	cpi	r24, 0x40	; 64
 8f6:	91 05       	cpc	r25, r1
 8f8:	a1 05       	cpc	r26, r1
 8fa:	b1 05       	cpc	r27, r1
 8fc:	39 f4       	brne	.+14     	; 0x90c <__pack_f+0x144>
 8fe:	e7 fe       	sbrs	r14, 7
 900:	0d c0       	rjmp	.+26     	; 0x91c <__pack_f+0x154>
 902:	80 e4       	ldi	r24, 0x40	; 64
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	a0 e0       	ldi	r26, 0x00	; 0
 908:	b0 e0       	ldi	r27, 0x00	; 0
 90a:	04 c0       	rjmp	.+8      	; 0x914 <__pack_f+0x14c>
 90c:	8f e3       	ldi	r24, 0x3F	; 63
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	a0 e0       	ldi	r26, 0x00	; 0
 912:	b0 e0       	ldi	r27, 0x00	; 0
 914:	e8 0e       	add	r14, r24
 916:	f9 1e       	adc	r15, r25
 918:	0a 1f       	adc	r16, r26
 91a:	1b 1f       	adc	r17, r27
 91c:	17 ff       	sbrs	r17, 7
 91e:	05 c0       	rjmp	.+10     	; 0x92a <__pack_f+0x162>
 920:	16 95       	lsr	r17
 922:	07 95       	ror	r16
 924:	f7 94       	ror	r15
 926:	e7 94       	ror	r14
 928:	31 96       	adiw	r30, 0x01	; 1
 92a:	87 e0       	ldi	r24, 0x07	; 7
 92c:	16 95       	lsr	r17
 92e:	07 95       	ror	r16
 930:	f7 94       	ror	r15
 932:	e7 94       	ror	r14
 934:	8a 95       	dec	r24
 936:	d1 f7       	brne	.-12     	; 0x92c <__pack_f+0x164>
 938:	05 c0       	rjmp	.+10     	; 0x944 <__pack_f+0x17c>
 93a:	ee 24       	eor	r14, r14
 93c:	ff 24       	eor	r15, r15
 93e:	87 01       	movw	r16, r14
 940:	ef ef       	ldi	r30, 0xFF	; 255
 942:	f0 e0       	ldi	r31, 0x00	; 0
 944:	6e 2f       	mov	r22, r30
 946:	67 95       	ror	r22
 948:	66 27       	eor	r22, r22
 94a:	67 95       	ror	r22
 94c:	90 2f       	mov	r25, r16
 94e:	9f 77       	andi	r25, 0x7F	; 127
 950:	d7 94       	ror	r13
 952:	dd 24       	eor	r13, r13
 954:	d7 94       	ror	r13
 956:	8e 2f       	mov	r24, r30
 958:	86 95       	lsr	r24
 95a:	49 2f       	mov	r20, r25
 95c:	46 2b       	or	r20, r22
 95e:	58 2f       	mov	r21, r24
 960:	5d 29       	or	r21, r13
 962:	b7 01       	movw	r22, r14
 964:	ca 01       	movw	r24, r20
 966:	1f 91       	pop	r17
 968:	0f 91       	pop	r16
 96a:	ff 90       	pop	r15
 96c:	ef 90       	pop	r14
 96e:	df 90       	pop	r13
 970:	08 95       	ret

00000972 <__unpack_f>:
 972:	fc 01       	movw	r30, r24
 974:	db 01       	movw	r26, r22
 976:	40 81       	ld	r20, Z
 978:	51 81       	ldd	r21, Z+1	; 0x01
 97a:	22 81       	ldd	r18, Z+2	; 0x02
 97c:	62 2f       	mov	r22, r18
 97e:	6f 77       	andi	r22, 0x7F	; 127
 980:	70 e0       	ldi	r23, 0x00	; 0
 982:	22 1f       	adc	r18, r18
 984:	22 27       	eor	r18, r18
 986:	22 1f       	adc	r18, r18
 988:	93 81       	ldd	r25, Z+3	; 0x03
 98a:	89 2f       	mov	r24, r25
 98c:	88 0f       	add	r24, r24
 98e:	82 2b       	or	r24, r18
 990:	28 2f       	mov	r18, r24
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	99 1f       	adc	r25, r25
 996:	99 27       	eor	r25, r25
 998:	99 1f       	adc	r25, r25
 99a:	11 96       	adiw	r26, 0x01	; 1
 99c:	9c 93       	st	X, r25
 99e:	11 97       	sbiw	r26, 0x01	; 1
 9a0:	21 15       	cp	r18, r1
 9a2:	31 05       	cpc	r19, r1
 9a4:	a9 f5       	brne	.+106    	; 0xa10 <__unpack_f+0x9e>
 9a6:	41 15       	cp	r20, r1
 9a8:	51 05       	cpc	r21, r1
 9aa:	61 05       	cpc	r22, r1
 9ac:	71 05       	cpc	r23, r1
 9ae:	11 f4       	brne	.+4      	; 0x9b4 <__unpack_f+0x42>
 9b0:	82 e0       	ldi	r24, 0x02	; 2
 9b2:	37 c0       	rjmp	.+110    	; 0xa22 <__unpack_f+0xb0>
 9b4:	82 e8       	ldi	r24, 0x82	; 130
 9b6:	9f ef       	ldi	r25, 0xFF	; 255
 9b8:	13 96       	adiw	r26, 0x03	; 3
 9ba:	9c 93       	st	X, r25
 9bc:	8e 93       	st	-X, r24
 9be:	12 97       	sbiw	r26, 0x02	; 2
 9c0:	9a 01       	movw	r18, r20
 9c2:	ab 01       	movw	r20, r22
 9c4:	67 e0       	ldi	r22, 0x07	; 7
 9c6:	22 0f       	add	r18, r18
 9c8:	33 1f       	adc	r19, r19
 9ca:	44 1f       	adc	r20, r20
 9cc:	55 1f       	adc	r21, r21
 9ce:	6a 95       	dec	r22
 9d0:	d1 f7       	brne	.-12     	; 0x9c6 <__unpack_f+0x54>
 9d2:	83 e0       	ldi	r24, 0x03	; 3
 9d4:	8c 93       	st	X, r24
 9d6:	0d c0       	rjmp	.+26     	; 0x9f2 <__unpack_f+0x80>
 9d8:	22 0f       	add	r18, r18
 9da:	33 1f       	adc	r19, r19
 9dc:	44 1f       	adc	r20, r20
 9de:	55 1f       	adc	r21, r21
 9e0:	12 96       	adiw	r26, 0x02	; 2
 9e2:	8d 91       	ld	r24, X+
 9e4:	9c 91       	ld	r25, X
 9e6:	13 97       	sbiw	r26, 0x03	; 3
 9e8:	01 97       	sbiw	r24, 0x01	; 1
 9ea:	13 96       	adiw	r26, 0x03	; 3
 9ec:	9c 93       	st	X, r25
 9ee:	8e 93       	st	-X, r24
 9f0:	12 97       	sbiw	r26, 0x02	; 2
 9f2:	20 30       	cpi	r18, 0x00	; 0
 9f4:	80 e0       	ldi	r24, 0x00	; 0
 9f6:	38 07       	cpc	r19, r24
 9f8:	80 e0       	ldi	r24, 0x00	; 0
 9fa:	48 07       	cpc	r20, r24
 9fc:	80 e4       	ldi	r24, 0x40	; 64
 9fe:	58 07       	cpc	r21, r24
 a00:	58 f3       	brcs	.-42     	; 0x9d8 <__unpack_f+0x66>
 a02:	14 96       	adiw	r26, 0x04	; 4
 a04:	2d 93       	st	X+, r18
 a06:	3d 93       	st	X+, r19
 a08:	4d 93       	st	X+, r20
 a0a:	5c 93       	st	X, r21
 a0c:	17 97       	sbiw	r26, 0x07	; 7
 a0e:	08 95       	ret
 a10:	2f 3f       	cpi	r18, 0xFF	; 255
 a12:	31 05       	cpc	r19, r1
 a14:	79 f4       	brne	.+30     	; 0xa34 <__unpack_f+0xc2>
 a16:	41 15       	cp	r20, r1
 a18:	51 05       	cpc	r21, r1
 a1a:	61 05       	cpc	r22, r1
 a1c:	71 05       	cpc	r23, r1
 a1e:	19 f4       	brne	.+6      	; 0xa26 <__unpack_f+0xb4>
 a20:	84 e0       	ldi	r24, 0x04	; 4
 a22:	8c 93       	st	X, r24
 a24:	08 95       	ret
 a26:	64 ff       	sbrs	r22, 4
 a28:	03 c0       	rjmp	.+6      	; 0xa30 <__unpack_f+0xbe>
 a2a:	81 e0       	ldi	r24, 0x01	; 1
 a2c:	8c 93       	st	X, r24
 a2e:	12 c0       	rjmp	.+36     	; 0xa54 <__unpack_f+0xe2>
 a30:	1c 92       	st	X, r1
 a32:	10 c0       	rjmp	.+32     	; 0xa54 <__unpack_f+0xe2>
 a34:	2f 57       	subi	r18, 0x7F	; 127
 a36:	30 40       	sbci	r19, 0x00	; 0
 a38:	13 96       	adiw	r26, 0x03	; 3
 a3a:	3c 93       	st	X, r19
 a3c:	2e 93       	st	-X, r18
 a3e:	12 97       	sbiw	r26, 0x02	; 2
 a40:	83 e0       	ldi	r24, 0x03	; 3
 a42:	8c 93       	st	X, r24
 a44:	87 e0       	ldi	r24, 0x07	; 7
 a46:	44 0f       	add	r20, r20
 a48:	55 1f       	adc	r21, r21
 a4a:	66 1f       	adc	r22, r22
 a4c:	77 1f       	adc	r23, r23
 a4e:	8a 95       	dec	r24
 a50:	d1 f7       	brne	.-12     	; 0xa46 <__unpack_f+0xd4>
 a52:	70 64       	ori	r23, 0x40	; 64
 a54:	14 96       	adiw	r26, 0x04	; 4
 a56:	4d 93       	st	X+, r20
 a58:	5d 93       	st	X+, r21
 a5a:	6d 93       	st	X+, r22
 a5c:	7c 93       	st	X, r23
 a5e:	17 97       	sbiw	r26, 0x07	; 7
 a60:	08 95       	ret

00000a62 <__divmodhi4>:
 a62:	97 fb       	bst	r25, 7
 a64:	09 2e       	mov	r0, r25
 a66:	07 26       	eor	r0, r23
 a68:	0a d0       	rcall	.+20     	; 0xa7e <__divmodhi4_neg1>
 a6a:	77 fd       	sbrc	r23, 7
 a6c:	04 d0       	rcall	.+8      	; 0xa76 <__divmodhi4_neg2>
 a6e:	0c d0       	rcall	.+24     	; 0xa88 <__udivmodhi4>
 a70:	06 d0       	rcall	.+12     	; 0xa7e <__divmodhi4_neg1>
 a72:	00 20       	and	r0, r0
 a74:	1a f4       	brpl	.+6      	; 0xa7c <__divmodhi4_exit>

00000a76 <__divmodhi4_neg2>:
 a76:	70 95       	com	r23
 a78:	61 95       	neg	r22
 a7a:	7f 4f       	sbci	r23, 0xFF	; 255

00000a7c <__divmodhi4_exit>:
 a7c:	08 95       	ret

00000a7e <__divmodhi4_neg1>:
 a7e:	f6 f7       	brtc	.-4      	; 0xa7c <__divmodhi4_exit>
 a80:	90 95       	com	r25
 a82:	81 95       	neg	r24
 a84:	9f 4f       	sbci	r25, 0xFF	; 255
 a86:	08 95       	ret

00000a88 <__udivmodhi4>:
 a88:	aa 1b       	sub	r26, r26
 a8a:	bb 1b       	sub	r27, r27
 a8c:	51 e1       	ldi	r21, 0x11	; 17
 a8e:	07 c0       	rjmp	.+14     	; 0xa9e <__udivmodhi4_ep>

00000a90 <__udivmodhi4_loop>:
 a90:	aa 1f       	adc	r26, r26
 a92:	bb 1f       	adc	r27, r27
 a94:	a6 17       	cp	r26, r22
 a96:	b7 07       	cpc	r27, r23
 a98:	10 f0       	brcs	.+4      	; 0xa9e <__udivmodhi4_ep>
 a9a:	a6 1b       	sub	r26, r22
 a9c:	b7 0b       	sbc	r27, r23

00000a9e <__udivmodhi4_ep>:
 a9e:	88 1f       	adc	r24, r24
 aa0:	99 1f       	adc	r25, r25
 aa2:	5a 95       	dec	r21
 aa4:	a9 f7       	brne	.-22     	; 0xa90 <__udivmodhi4_loop>
 aa6:	80 95       	com	r24
 aa8:	90 95       	com	r25
 aaa:	bc 01       	movw	r22, r24
 aac:	cd 01       	movw	r24, r26
 aae:	08 95       	ret

00000ab0 <__prologue_saves__>:
 ab0:	2f 92       	push	r2
 ab2:	3f 92       	push	r3
 ab4:	4f 92       	push	r4
 ab6:	5f 92       	push	r5
 ab8:	6f 92       	push	r6
 aba:	7f 92       	push	r7
 abc:	8f 92       	push	r8
 abe:	9f 92       	push	r9
 ac0:	af 92       	push	r10
 ac2:	bf 92       	push	r11
 ac4:	cf 92       	push	r12
 ac6:	df 92       	push	r13
 ac8:	ef 92       	push	r14
 aca:	ff 92       	push	r15
 acc:	0f 93       	push	r16
 ace:	1f 93       	push	r17
 ad0:	cf 93       	push	r28
 ad2:	df 93       	push	r29
 ad4:	cd b7       	in	r28, 0x3d	; 61
 ad6:	de b7       	in	r29, 0x3e	; 62
 ad8:	ca 1b       	sub	r28, r26
 ada:	db 0b       	sbc	r29, r27
 adc:	0f b6       	in	r0, 0x3f	; 63
 ade:	f8 94       	cli
 ae0:	de bf       	out	0x3e, r29	; 62
 ae2:	0f be       	out	0x3f, r0	; 63
 ae4:	cd bf       	out	0x3d, r28	; 61
 ae6:	09 94       	ijmp

00000ae8 <__epilogue_restores__>:
 ae8:	2a 88       	ldd	r2, Y+18	; 0x12
 aea:	39 88       	ldd	r3, Y+17	; 0x11
 aec:	48 88       	ldd	r4, Y+16	; 0x10
 aee:	5f 84       	ldd	r5, Y+15	; 0x0f
 af0:	6e 84       	ldd	r6, Y+14	; 0x0e
 af2:	7d 84       	ldd	r7, Y+13	; 0x0d
 af4:	8c 84       	ldd	r8, Y+12	; 0x0c
 af6:	9b 84       	ldd	r9, Y+11	; 0x0b
 af8:	aa 84       	ldd	r10, Y+10	; 0x0a
 afa:	b9 84       	ldd	r11, Y+9	; 0x09
 afc:	c8 84       	ldd	r12, Y+8	; 0x08
 afe:	df 80       	ldd	r13, Y+7	; 0x07
 b00:	ee 80       	ldd	r14, Y+6	; 0x06
 b02:	fd 80       	ldd	r15, Y+5	; 0x05
 b04:	0c 81       	ldd	r16, Y+4	; 0x04
 b06:	1b 81       	ldd	r17, Y+3	; 0x03
 b08:	aa 81       	ldd	r26, Y+2	; 0x02
 b0a:	b9 81       	ldd	r27, Y+1	; 0x01
 b0c:	ce 0f       	add	r28, r30
 b0e:	d1 1d       	adc	r29, r1
 b10:	0f b6       	in	r0, 0x3f	; 63
 b12:	f8 94       	cli
 b14:	de bf       	out	0x3e, r29	; 62
 b16:	0f be       	out	0x3f, r0	; 63
 b18:	cd bf       	out	0x3d, r28	; 61
 b1a:	ed 01       	movw	r28, r26
 b1c:	08 95       	ret

00000b1e <_exit>:
 b1e:	f8 94       	cli

00000b20 <__stop_program>:
 b20:	ff cf       	rjmp	.-2      	; 0xb20 <__stop_program>
