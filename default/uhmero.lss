
uhmero.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000074c  000007e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000074c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  000007e2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000007e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000022d  00000000  00000000  00000802  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d7  00000000  00000000  00000a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001fe  00000000  00000000  00001106  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000087e  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  00001b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000266  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b9  00000000  00000000  0000200a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 45 03 	jmp	0x68a	; 0x68a <__vector_2>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_9>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__vector_15>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e4       	ldi	r30, 0x4C	; 76
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <main>
  c6:	0c 94 a4 03 	jmp	0x748	; 0x748 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <lcd_clock>:
	lcd_clock();
}

void lcd_clock()
{
	LCD_CMD_PORT |= (1<<LCD_EN);
  ce:	e2 e6       	ldi	r30, 0x62	; 98
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d8:	20 ea       	ldi	r18, 0xA0	; 160
  da:	3f e0       	ldi	r19, 0x0F	; 15
  dc:	c9 01       	movw	r24, r18
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_clock+0x10>
	_delay_ms(1);
	LCD_CMD_PORT &= ~(1<<LCD_EN);
  e2:	80 81       	ld	r24, Z
  e4:	87 7f       	andi	r24, 0xF7	; 247
  e6:	80 83       	st	Z, r24
  e8:	c9 01       	movw	r24, r18
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_clock+0x1c>
	_delay_ms(1);
}
  ee:	08 95       	ret

000000f0 <lcd_cmd>:
	LCD_DATA_PORT |= ((data<<4)&0xF0);
	lcd_clock();
}

void lcd_cmd(uint8_t cmd)
{
  f0:	1f 93       	push	r17
  f2:	18 2f       	mov	r17, r24
	LCD_CMD_PORT &= ~(1<<LCD_RS); //parancsot küldünk
  f4:	e2 e6       	ldi	r30, 0x62	; 98
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8d 7f       	andi	r24, 0xFD	; 253
  fc:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_RW);
  fe:	80 81       	ld	r24, Z
 100:	8b 7f       	andi	r24, 0xFB	; 251
 102:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_EN);
 104:	80 81       	ld	r24, Z
 106:	87 7f       	andi	r24, 0xF7	; 247
 108:	80 83       	st	Z, r24

	LCD_DATA_PORT &= 0x0F;
 10a:	83 b1       	in	r24, 0x03	; 3
 10c:	8f 70       	andi	r24, 0x0F	; 15
 10e:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= (cmd&0xF0);
 110:	93 b1       	in	r25, 0x03	; 3
 112:	81 2f       	mov	r24, r17
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	89 2b       	or	r24, r25
 118:	83 b9       	out	0x03, r24	; 3
	lcd_clock();
 11a:	0e 94 67 00 	call	0xce	; 0xce <lcd_clock>
	LCD_DATA_PORT &= 0x0F;
 11e:	83 b1       	in	r24, 0x03	; 3
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= ((cmd<<4)&0xF0);
 124:	83 b1       	in	r24, 0x03	; 3
 126:	12 95       	swap	r17
 128:	10 7f       	andi	r17, 0xF0	; 240
 12a:	81 2b       	or	r24, r17
 12c:	83 b9       	out	0x03, r24	; 3
	lcd_clock();
 12e:	0e 94 67 00 	call	0xce	; 0xce <lcd_clock>
}
 132:	1f 91       	pop	r17
 134:	08 95       	ret

00000136 <lcd_clr>:
}


void lcd_clr()
{
	lcd_cmd(0x01);
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
}
 13c:	08 95       	ret

0000013e <lcd_put_data>:

void lcd_put_data(uint8_t data)
{
 13e:	1f 93       	push	r17
 140:	18 2f       	mov	r17, r24
	LCD_CMD_PORT |= (1<<LCD_RS); //adatot küldünk
 142:	e2 e6       	ldi	r30, 0x62	; 98
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_RW);
 14c:	80 81       	ld	r24, Z
 14e:	8b 7f       	andi	r24, 0xFB	; 251
 150:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_EN);
 152:	80 81       	ld	r24, Z
 154:	87 7f       	andi	r24, 0xF7	; 247
 156:	80 83       	st	Z, r24

	LCD_DATA_PORT &= 0x0F;
 158:	83 b1       	in	r24, 0x03	; 3
 15a:	8f 70       	andi	r24, 0x0F	; 15
 15c:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= (data&0xF0);
 15e:	93 b1       	in	r25, 0x03	; 3
 160:	81 2f       	mov	r24, r17
 162:	80 7f       	andi	r24, 0xF0	; 240
 164:	89 2b       	or	r24, r25
 166:	83 b9       	out	0x03, r24	; 3
	lcd_clock();
 168:	0e 94 67 00 	call	0xce	; 0xce <lcd_clock>
	LCD_DATA_PORT &= 0x0F;
 16c:	83 b1       	in	r24, 0x03	; 3
 16e:	8f 70       	andi	r24, 0x0F	; 15
 170:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= ((data<<4)&0xF0);
 172:	83 b1       	in	r24, 0x03	; 3
 174:	12 95       	swap	r17
 176:	10 7f       	andi	r17, 0xF0	; 240
 178:	81 2b       	or	r24, r17
 17a:	83 b9       	out	0x03, r24	; 3
	lcd_clock();
 17c:	0e 94 67 00 	call	0xce	; 0xce <lcd_clock>
}
 180:	1f 91       	pop	r17
 182:	08 95       	ret

00000184 <lcd_init>:
void lcd_clr();



void lcd_init()
{
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
	LCD_DATA_DDR |= 0xF0;
 188:	82 b1       	in	r24, 0x02	; 2
 18a:	80 6f       	ori	r24, 0xF0	; 240
 18c:	82 b9       	out	0x02, r24	; 2
	LCD_CMD_DDR |= ((1<<LCD_RS)
 18e:	e1 e6       	ldi	r30, 0x61	; 97
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	8e 60       	ori	r24, 0x0E	; 14
 196:	80 83       	st	Z, r24
	|(1<<LCD_RW)
	|(1<<LCD_EN));

	LCD_CMD_PORT &= ~(1<<LCD_RW);
 198:	e2 e6       	ldi	r30, 0x62	; 98
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	8b 7f       	andi	r24, 0xFB	; 251
 1a0:	80 83       	st	Z, r24
	//konfig

	lcd_cmd(0x30);
 1a2:	80 e3       	ldi	r24, 0x30	; 48
 1a4:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
 1a8:	80 e2       	ldi	r24, 0x20	; 32
 1aa:	9e e4       	ldi	r25, 0x4E	; 78
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_init+0x28>
	_delay_ms(5);
	lcd_cmd(0x30);
 1b0:	80 e3       	ldi	r24, 0x30	; 48
 1b2:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
 1b6:	00 ea       	ldi	r16, 0xA0	; 160
 1b8:	1f e0       	ldi	r17, 0x0F	; 15
 1ba:	c8 01       	movw	r24, r16
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_init+0x38>
	_delay_ms(1);
	lcd_cmd(0x30);
 1c0:	80 e3       	ldi	r24, 0x30	; 48
 1c2:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
 1c6:	c8 01       	movw	r24, r16
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_init+0x44>
	_delay_ms(1);
	lcd_cmd(0x20);
 1cc:	80 e2       	ldi	r24, 0x20	; 32
 1ce:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
 1d2:	c8 01       	movw	r24, r16
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x50>
	_delay_ms(1);
	lcd_clock();
 1d8:	0e 94 67 00 	call	0xce	; 0xce <lcd_clock>
	lcd_clock();
 1dc:	0e 94 67 00 	call	0xce	; 0xce <lcd_clock>
	lcd_clock();
 1e0:	0e 94 67 00 	call	0xce	; 0xce <lcd_clock>

	//LCD konf
	lcd_cmd(0x28);
 1e4:	88 e2       	ldi	r24, 0x28	; 40
 1e6:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(0x0C);
 1ea:	8c e0       	ldi	r24, 0x0C	; 12
 1ec:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(0x06);
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(0x01);
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(0x02);
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
}
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	08 95       	ret

00000208 <lcd_put_bin>:


}

void lcd_put_bin(uint8_t number)
{
 208:	ef 92       	push	r14
 20a:	ff 92       	push	r15
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	c0 e0       	ldi	r28, 0x00	; 0
 216:	d0 e0       	ldi	r29, 0x00	; 0
unsigned char bin_string[8];


	for(iterator = 0;iterator<=7;iterator++)
	{
		if(number & (128>>iterator))
 218:	90 e8       	ldi	r25, 0x80	; 128
 21a:	e9 2e       	mov	r14, r25
 21c:	f1 2c       	mov	r15, r1
 21e:	08 2f       	mov	r16, r24
 220:	10 e0       	ldi	r17, 0x00	; 0
 222:	c7 01       	movw	r24, r14
 224:	0c 2e       	mov	r0, r28
 226:	02 c0       	rjmp	.+4      	; 0x22c <lcd_put_bin+0x24>
 228:	95 95       	asr	r25
 22a:	87 95       	ror	r24
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <lcd_put_bin+0x20>
 230:	80 23       	and	r24, r16
 232:	91 23       	and	r25, r17
 234:	89 2b       	or	r24, r25
 236:	11 f0       	breq	.+4      	; 0x23c <lcd_put_bin+0x34>
		{
			lcd_put_data('1');
 238:	81 e3       	ldi	r24, 0x31	; 49
 23a:	01 c0       	rjmp	.+2      	; 0x23e <lcd_put_bin+0x36>
		}		
		else
		{
			lcd_put_data('0');
 23c:	80 e3       	ldi	r24, 0x30	; 48
 23e:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
 242:	21 96       	adiw	r28, 0x01	; 1

unsigned char iterator;
unsigned char bin_string[8];


	for(iterator = 0;iterator<=7;iterator++)
 244:	c8 30       	cpi	r28, 0x08	; 8
 246:	d1 05       	cpc	r29, r1
 248:	61 f7       	brne	.-40     	; 0x222 <lcd_put_bin+0x1a>
		{
			lcd_put_data('0');
		}
	}

}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	ff 90       	pop	r15
 254:	ef 90       	pop	r14
 256:	08 95       	ret

00000258 <lcd_put_int>:


void lcd_put_int(uint16_t num)
{
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	ec 01       	movw	r28, r24
	if(num>9999)lcd_put_data('0'+num/10000%10);
 25e:	87 e2       	ldi	r24, 0x27	; 39
 260:	c0 31       	cpi	r28, 0x10	; 16
 262:	d8 07       	cpc	r29, r24
 264:	70 f0       	brcs	.+28     	; 0x282 <lcd_put_int+0x2a>
 266:	ce 01       	movw	r24, r28
 268:	60 e1       	ldi	r22, 0x10	; 16
 26a:	77 e2       	ldi	r23, 0x27	; 39
 26c:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 270:	cb 01       	movw	r24, r22
 272:	6a e0       	ldi	r22, 0x0A	; 10
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 27a:	80 5d       	subi	r24, 0xD0	; 208
 27c:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
 280:	04 c0       	rjmp	.+8      	; 0x28a <lcd_put_int+0x32>
	if(num>999)lcd_put_data('0'+num/1000%10);
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	c8 3e       	cpi	r28, 0xE8	; 232
 286:	d8 07       	cpc	r29, r24
 288:	70 f0       	brcs	.+28     	; 0x2a6 <lcd_put_int+0x4e>
 28a:	ce 01       	movw	r24, r28
 28c:	68 ee       	ldi	r22, 0xE8	; 232
 28e:	73 e0       	ldi	r23, 0x03	; 3
 290:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 294:	cb 01       	movw	r24, r22
 296:	6a e0       	ldi	r22, 0x0A	; 10
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 29e:	80 5d       	subi	r24, 0xD0	; 208
 2a0:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <lcd_put_int+0x54>
	if(num>99)lcd_put_data('0'+num/100%10);
 2a6:	c4 36       	cpi	r28, 0x64	; 100
 2a8:	d1 05       	cpc	r29, r1
 2aa:	70 f0       	brcs	.+28     	; 0x2c8 <lcd_put_int+0x70>
 2ac:	ce 01       	movw	r24, r28
 2ae:	64 e6       	ldi	r22, 0x64	; 100
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 2b6:	cb 01       	movw	r24, r22
 2b8:	6a e0       	ldi	r22, 0x0A	; 10
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 2c0:	80 5d       	subi	r24, 0xD0	; 208
 2c2:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <lcd_put_int+0x76>
	if(num>9)lcd_put_data('0'+num/10%10);
 2c8:	ca 30       	cpi	r28, 0x0A	; 10
 2ca:	d1 05       	cpc	r29, r1
 2cc:	68 f0       	brcs	.+26     	; 0x2e8 <lcd_put_int+0x90>
 2ce:	ce 01       	movw	r24, r28
 2d0:	6a e0       	ldi	r22, 0x0A	; 10
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 2d8:	cb 01       	movw	r24, r22
 2da:	6a e0       	ldi	r22, 0x0A	; 10
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 2e2:	80 5d       	subi	r24, 0xD0	; 208
 2e4:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data('0'+num%10);
 2e8:	ce 01       	movw	r24, r28
 2ea:	6a e0       	ldi	r22, 0x0A	; 10
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 2f2:	80 5d       	subi	r24, 0xD0	; 208
 2f4:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <lcd_put_freq>:

void lcd_put_freq(uint16_t num)
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ec 01       	movw	r28, r24
	if(num>9999)lcd_put_data('0'+num/10000%10);
 304:	87 e2       	ldi	r24, 0x27	; 39
 306:	c0 31       	cpi	r28, 0x10	; 16
 308:	d8 07       	cpc	r29, r24
 30a:	70 f0       	brcs	.+28     	; 0x328 <lcd_put_freq+0x2a>
 30c:	ce 01       	movw	r24, r28
 30e:	60 e1       	ldi	r22, 0x10	; 16
 310:	77 e2       	ldi	r23, 0x27	; 39
 312:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 316:	cb 01       	movw	r24, r22
 318:	6a e0       	ldi	r22, 0x0A	; 10
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 320:	80 5d       	subi	r24, 0xD0	; 208
 322:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
 326:	04 c0       	rjmp	.+8      	; 0x330 <lcd_put_freq+0x32>
	if(num>999)lcd_put_data('0'+num/1000%10);
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	c8 3e       	cpi	r28, 0xE8	; 232
 32c:	d8 07       	cpc	r29, r24
 32e:	70 f0       	brcs	.+28     	; 0x34c <lcd_put_freq+0x4e>
 330:	ce 01       	movw	r24, r28
 332:	68 ee       	ldi	r22, 0xE8	; 232
 334:	73 e0       	ldi	r23, 0x03	; 3
 336:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 33a:	cb 01       	movw	r24, r22
 33c:	6a e0       	ldi	r22, 0x0A	; 10
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 344:	80 5d       	subi	r24, 0xD0	; 208
 346:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
 34a:	03 c0       	rjmp	.+6      	; 0x352 <lcd_put_freq+0x54>
	if(num>99)lcd_put_data('0'+num/100%10);
 34c:	c4 36       	cpi	r28, 0x64	; 100
 34e:	d1 05       	cpc	r29, r1
 350:	68 f0       	brcs	.+26     	; 0x36c <lcd_put_freq+0x6e>
 352:	ce 01       	movw	r24, r28
 354:	64 e6       	ldi	r22, 0x64	; 100
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 35c:	cb 01       	movw	r24, r22
 35e:	6a e0       	ldi	r22, 0x0A	; 10
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 366:	80 5d       	subi	r24, 0xD0	; 208
 368:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data('0'+num/10%10);
 36c:	ce 01       	movw	r24, r28
 36e:	6a e0       	ldi	r22, 0x0A	; 10
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 376:	cb 01       	movw	r24, r22
 378:	6a e0       	ldi	r22, 0x0A	; 10
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 380:	80 5d       	subi	r24, 0xD0	; 208
 382:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data('.');
 386:	8e e2       	ldi	r24, 0x2E	; 46
 388:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data('0'+num%10);
 38c:	ce 01       	movw	r24, r28
 38e:	6a e0       	ldi	r22, 0x0A	; 10
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 396:	80 5d       	subi	r24, 0xD0	; 208
 398:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <lcd_goto_yx>:

void lcd_goto_yx(uint8_t y, uint8_t x)
{
	switch(y)
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	51 f0       	breq	.+20     	; 0x3ba <lcd_goto_yx+0x18>
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	28 f0       	brcs	.+10     	; 0x3b4 <lcd_goto_yx+0x12>
 3aa:	82 30       	cpi	r24, 0x02	; 2
 3ac:	49 f0       	breq	.+18     	; 0x3c0 <lcd_goto_yx+0x1e>
 3ae:	83 30       	cpi	r24, 0x03	; 3
 3b0:	61 f4       	brne	.+24     	; 0x3ca <lcd_goto_yx+0x28>
 3b2:	09 c0       	rjmp	.+18     	; 0x3c6 <lcd_goto_yx+0x24>
	{
		case 0: {y= 0x00 + 0x80 + x;break;}
 3b4:	86 2f       	mov	r24, r22
 3b6:	80 58       	subi	r24, 0x80	; 128
 3b8:	08 c0       	rjmp	.+16     	; 0x3ca <lcd_goto_yx+0x28>
		case 1: {y= 0x40 + 0x80 + x;break;}
 3ba:	86 2f       	mov	r24, r22
 3bc:	80 54       	subi	r24, 0x40	; 64
 3be:	05 c0       	rjmp	.+10     	; 0x3ca <lcd_goto_yx+0x28>
		case 2: {y= 0x10 + 0x80 + x;break;}
 3c0:	86 2f       	mov	r24, r22
 3c2:	80 57       	subi	r24, 0x70	; 112
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <lcd_goto_yx+0x28>
		case 3: {y= 0x50 + 0x80 + x;break;}
 3c6:	86 2f       	mov	r24, r22
 3c8:	80 53       	subi	r24, 0x30	; 48

		default: break;
	}
	lcd_cmd(y);
 3ca:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
}
 3ce:	08 95       	ret

000003d0 <lcd_put_string>:
	LCD_CMD_PORT &= ~(1<<LCD_EN);
	_delay_ms(1);
}

void lcd_put_string(uint8_t *p)
{
 3d0:	1f 93       	push	r17
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	ec 01       	movw	r28, r24
 3d8:	10 e0       	ldi	r17, 0x00	; 0
 3da:	1a c0       	rjmp	.+52     	; 0x410 <lcd_put_string+0x40>
unsigned char counter = 0;

	while(*p)
	{
		lcd_put_data(*p++);
 3dc:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>

		counter++;
 3e0:	1f 5f       	subi	r17, 0xFF	; 255
		
		//lcd_goto_yx(2,0);
		
		switch(counter)
 3e2:	1f 31       	cpi	r17, 0x1F	; 31
 3e4:	61 f0       	breq	.+24     	; 0x3fe <lcd_put_string+0x2e>
 3e6:	10 32       	cpi	r17, 0x20	; 32
 3e8:	18 f4       	brcc	.+6      	; 0x3f0 <lcd_put_string+0x20>
 3ea:	1f 30       	cpi	r17, 0x0F	; 15
 3ec:	81 f4       	brne	.+32     	; 0x40e <lcd_put_string+0x3e>
 3ee:	05 c0       	rjmp	.+10     	; 0x3fa <lcd_put_string+0x2a>
 3f0:	1f 32       	cpi	r17, 0x2F	; 47
 3f2:	39 f0       	breq	.+14     	; 0x402 <lcd_put_string+0x32>
 3f4:	1f 33       	cpi	r17, 0x3F	; 63
 3f6:	59 f4       	brne	.+22     	; 0x40e <lcd_put_string+0x3e>
 3f8:	06 c0       	rjmp	.+12     	; 0x406 <lcd_put_string+0x36>
		{
		case 15: 	lcd_goto_yx(1,0);
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	05 c0       	rjmp	.+10     	; 0x408 <lcd_put_string+0x38>
					break;
		case 31: 	lcd_goto_yx(2,0);
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	03 c0       	rjmp	.+6      	; 0x408 <lcd_put_string+0x38>
					break;
		case 47: 	lcd_goto_yx(3,0);
 402:	83 e0       	ldi	r24, 0x03	; 3
 404:	01 c0       	rjmp	.+2      	; 0x408 <lcd_put_string+0x38>
					break;
		case 63: 	lcd_goto_yx(0,0);
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd_goto_yx>
{
unsigned char counter = 0;

	while(*p)
	{
		lcd_put_data(*p++);
 40e:	21 96       	adiw	r28, 0x01	; 1

void lcd_put_string(uint8_t *p)
{
unsigned char counter = 0;

	while(*p)
 410:	88 81       	ld	r24, Y
 412:	88 23       	and	r24, r24
 414:	19 f7       	brne	.-58     	; 0x3dc <lcd_put_string+0xc>
					break;
		}	
	}


}
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	08 95       	ret

0000041e <lcd_clr_line>:
	lcd_cmd(0x02);
}


void lcd_clr_line(unsigned char line)
{
 41e:	1f 93       	push	r17
unsigned char i;

lcd_goto_yx(line,0);
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd_goto_yx>
 426:	10 e0       	ldi	r17, 0x00	; 0

	for(i=0;i<15;i++)
	{
		lcd_put_data(' ');
 428:	80 e2       	ldi	r24, 0x20	; 32
 42a:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
{
unsigned char i;

lcd_goto_yx(line,0);

	for(i=0;i<15;i++)
 42e:	1f 5f       	subi	r17, 0xFF	; 255
 430:	1f 30       	cpi	r17, 0x0F	; 15
 432:	d1 f7       	brne	.-12     	; 0x428 <lcd_clr_line+0xa>
	{
		lcd_put_data(' ');
	}
}
 434:	1f 91       	pop	r17
 436:	08 95       	ret

00000438 <CreateCGram>:
	lcd_cmd(y);
}

void CreateCGram()
{
	lcd_cmd(0x40+(0<<3));	//címek : 44..
 438:	80 e4       	ldi	r24, 0x40	; 64
 43a:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>

	lcd_put_data(0b00001010);
 43e:	8a e0       	ldi	r24, 0x0A	; 10
 440:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00011111);
 444:	8f e1       	ldi	r24, 0x1F	; 31
 446:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00011111);
 44a:	8f e1       	ldi	r24, 0x1F	; 31
 44c:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00001110);
 450:	8e e0       	ldi	r24, 0x0E	; 14
 452:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00000100);
 456:	84 e0       	ldi	r24, 0x04	; 4
 458:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00000000);
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00000000);
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00000000);
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>

	lcd_cmd(0x80);
 46e:	80 e8       	ldi	r24, 0x80	; 128
 470:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>

	lcd_cmd(0x40+(1<<3));
 474:	88 e4       	ldi	r24, 0x48	; 72
 476:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>

	lcd_put_data(0b00001100);
 47a:	8c e0       	ldi	r24, 0x0C	; 12
 47c:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00011110);
 480:	8e e1       	ldi	r24, 0x1E	; 30
 482:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00001100);
 486:	8c e0       	ldi	r24, 0x0C	; 12
 488:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00011110);
 48c:	8e e1       	ldi	r24, 0x1E	; 30
 48e:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00001100);
 492:	8c e0       	ldi	r24, 0x0C	; 12
 494:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00001100);
 498:	8c e0       	ldi	r24, 0x0C	; 12
 49a:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00010010);
 49e:	82 e1       	ldi	r24, 0x12	; 18
 4a0:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00011011);
 4a4:	8b e1       	ldi	r24, 0x1B	; 27
 4a6:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>

	lcd_cmd(0x80);
 4aa:	80 e8       	ldi	r24, 0x80	; 128
 4ac:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
}
 4b0:	08 95       	ret

000004b2 <pushbutton_init>:

void pushbutton_init();

void pushbutton_init()
{
	DDRG |= 0x1F;
 4b2:	e4 e6       	ldi	r30, 0x64	; 100
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	8f 61       	ori	r24, 0x1F	; 31
 4ba:	80 83       	st	Z, r24
}
 4bc:	08 95       	ret

000004be <led_init>:



void led_init()
{
	DDRB |= 0xF0;	// PORTB out
 4be:	87 b3       	in	r24, 0x17	; 23
 4c0:	80 6f       	ori	r24, 0xF0	; 240
 4c2:	87 bb       	out	0x17, r24	; 23
	DDRD |= 0xF0;	// PORTD out
 4c4:	81 b3       	in	r24, 0x11	; 17
 4c6:	80 6f       	ori	r24, 0xF0	; 240
 4c8:	81 bb       	out	0x11, r24	; 17
}
 4ca:	08 95       	ret

000004cc <led_out>:

void led_out(unsigned char data)
{
	PORTD &= 0x0F;
 4cc:	92 b3       	in	r25, 0x12	; 18
 4ce:	9f 70       	andi	r25, 0x0F	; 15
 4d0:	92 bb       	out	0x12, r25	; 18
	PORTB &= 0x0F;
 4d2:	98 b3       	in	r25, 0x18	; 24
 4d4:	9f 70       	andi	r25, 0x0F	; 15
 4d6:	98 bb       	out	0x18, r25	; 24
	
	PORTD |= (data & 0xF0);
 4d8:	22 b3       	in	r18, 0x12	; 18
 4da:	98 2f       	mov	r25, r24
 4dc:	90 7f       	andi	r25, 0xF0	; 240
 4de:	92 2b       	or	r25, r18
 4e0:	92 bb       	out	0x12, r25	; 18
	PORTB |= (data & 0x0F)<<4;
 4e2:	98 b3       	in	r25, 0x18	; 24
 4e4:	82 95       	swap	r24
 4e6:	80 7f       	andi	r24, 0xF0	; 240
 4e8:	98 2b       	or	r25, r24
 4ea:	98 bb       	out	0x18, r25	; 24
}
 4ec:	08 95       	ret

000004ee <__vector_9>:
	return;
}


ISR(TIMER2_COMP_vect)
{	
 4ee:	1f 92       	push	r1
 4f0:	0f 92       	push	r0
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	0f 92       	push	r0
 4f6:	11 24       	eor	r1, r1
 4f8:	8f 93       	push	r24
 4fa:	9f 93       	push	r25
	blabla = blabla + 20;
 4fc:	80 91 02 01 	lds	r24, 0x0102
 500:	90 91 03 01 	lds	r25, 0x0103
 504:	44 96       	adiw	r24, 0x14	; 20
 506:	90 93 03 01 	sts	0x0103, r25
 50a:	80 93 02 01 	sts	0x0102, r24
}
 50e:	9f 91       	pop	r25
 510:	8f 91       	pop	r24
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <timer0_init>:

}

void timer0_init(){
	
	OCR0 = 159;
 51c:	8f e9       	ldi	r24, 0x9F	; 159
 51e:	81 bf       	out	0x31, r24	; 49
	TCCR0 = 0;
 520:	13 be       	out	0x33, r1	; 51
	TCCR0 |= (1<<3); // CTC mode 
 522:	83 b7       	in	r24, 0x33	; 51
 524:	88 60       	ori	r24, 0x08	; 8
 526:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<1);	// interrupt enable
 528:	87 b7       	in	r24, 0x37	; 55
 52a:	82 60       	ori	r24, 0x02	; 2
 52c:	87 bf       	out	0x37, r24	; 55
}
 52e:	08 95       	ret

00000530 <init_periph>:
}


void init_periph(){

	lcd_init();
 530:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_init>

void pushbutton_init();

void pushbutton_init()
{
	DDRG |= 0x1F;
 534:	e4 e6       	ldi	r30, 0x64	; 100
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	8f 61       	ori	r24, 0x1F	; 31
 53c:	80 83       	st	Z, r24



void led_init()
{
	DDRB |= 0xF0;	// PORTB out
 53e:	87 b3       	in	r24, 0x17	; 23
 540:	80 6f       	ori	r24, 0xF0	; 240
 542:	87 bb       	out	0x17, r24	; 23
	DDRD |= 0xF0;	// PORTD out
 544:	81 b3       	in	r24, 0x11	; 17
 546:	80 6f       	ori	r24, 0xF0	; 240
 548:	81 bb       	out	0x11, r24	; 17
	TCCR0 |= (1<<3); // CTC mode 
	TIMSK |= (1<<1);	// interrupt enable
}

void set_uh_ports(){
	DDRD |= 1;	// trigger kimenet
 54a:	88 9a       	sbi	0x11, 0	; 17
	DDRD &= 0b11111101;	// echo bemenet
 54c:	89 98       	cbi	0x11, 1	; 17
	lcd_init();
	pushbutton_init();
	led_init();
	set_uh_ports();

	timer0_init();
 54e:	0e 94 8e 02 	call	0x51c	; 0x51c <timer0_init>
	print_result();
}

void timer2_init(){
	
	OCR2 = 4;
 552:	84 e0       	ldi	r24, 0x04	; 4
 554:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (1<<3); // CTC mode 
 556:	85 b5       	in	r24, 0x25	; 37
 558:	88 60       	ori	r24, 0x08	; 8
 55a:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<7);	// interrupt
 55c:	87 b7       	in	r24, 0x37	; 55
 55e:	80 68       	ori	r24, 0x80	; 128
 560:	87 bf       	out	0x37, r24	; 55

	run++;	
}

void select_rising_edge(){
	EICRA |= (1<<2)|(1<<3);
 562:	ea e6       	ldi	r30, 0x6A	; 106
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	8c 60       	ori	r24, 0x0C	; 12
 56a:	80 83       	st	Z, r24
	DDRD &= 0b11111101;	// echo bemenet
}

void ext_int_init(){
	select_rising_edge();
	EIMSK |= 2;
 56c:	89 b7       	in	r24, 0x39	; 57
 56e:	82 60       	ori	r24, 0x02	; 2
 570:	89 bf       	out	0x39, r24	; 57

	timer0_init();
	timer2_init();
	ext_int_init();
	
	sei(); // global interrupt enable
 572:	78 94       	sei

}
 574:	08 95       	ret

00000576 <set_uh_ports>:
	TCCR0 |= (1<<3); // CTC mode 
	TIMSK |= (1<<1);	// interrupt enable
}

void set_uh_ports(){
	DDRD |= 1;	// trigger kimenet
 576:	88 9a       	sbi	0x11, 0	; 17
	DDRD &= 0b11111101;	// echo bemenet
 578:	89 98       	cbi	0x11, 1	; 17
}
 57a:	08 95       	ret

0000057c <ext_int_init>:

	run++;	
}

void select_rising_edge(){
	EICRA |= (1<<2)|(1<<3);
 57c:	ea e6       	ldi	r30, 0x6A	; 106
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	8c 60       	ori	r24, 0x0C	; 12
 584:	80 83       	st	Z, r24
	DDRD &= 0b11111101;	// echo bemenet
}

void ext_int_init(){
	select_rising_edge();
	EIMSK |= 2;
 586:	89 b7       	in	r24, 0x39	; 57
 588:	82 60       	ori	r24, 0x02	; 2
 58a:	89 bf       	out	0x39, r24	; 57
}
 58c:	08 95       	ret

0000058e <impulse_start>:


void impulse_start(){
	TCNT0 = 0;	// timer számláló regiszter nullázás
 58e:	12 be       	out	0x32, r1	; 50
	TCCR0 |= 1;	// timer 0 indítás
 590:	83 b7       	in	r24, 0x33	; 51
 592:	81 60       	ori	r24, 0x01	; 1
 594:	83 bf       	out	0x33, r24	; 51
	PORTD |= 1; // trigger impulse 1
 596:	90 9a       	sbi	0x12, 0	; 18
	led_out(1);
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	0e 94 66 02 	call	0x4cc	; 0x4cc <led_out>
}
 59e:	08 95       	ret

000005a0 <main>:

int main (void){

	

	init_periph();
 5a0:	0e 94 98 02 	call	0x530	; 0x530 <init_periph>

	
	impulse_start();
 5a4:	0e 94 c7 02 	call	0x58e	; 0x58e <impulse_start>
	

	while(1){
		if(PING == 1){impulse_start();}
 5a8:	80 91 63 00 	lds	r24, 0x0063
 5ac:	81 30       	cpi	r24, 0x01	; 1
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <main+0x8>
 5b0:	f9 cf       	rjmp	.-14     	; 0x5a4 <main+0x4>

000005b2 <__vector_15>:
	led_out(1);
}


ISR(TIMER0_COMP_vect)
{	
 5b2:	1f 92       	push	r1
 5b4:	0f 92       	push	r0
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	0f 92       	push	r0
 5ba:	0b b6       	in	r0, 0x3b	; 59
 5bc:	0f 92       	push	r0
 5be:	11 24       	eor	r1, r1
 5c0:	2f 93       	push	r18
 5c2:	3f 93       	push	r19
 5c4:	4f 93       	push	r20
 5c6:	5f 93       	push	r21
 5c8:	6f 93       	push	r22
 5ca:	7f 93       	push	r23
 5cc:	8f 93       	push	r24
 5ce:	9f 93       	push	r25
 5d0:	af 93       	push	r26
 5d2:	bf 93       	push	r27
 5d4:	ef 93       	push	r30
 5d6:	ff 93       	push	r31
		
}

void impulse_stop(){
	//TCCR0 &= 0b11111110;
	TIMSK &= 0b11111101;	// timer 0 CTC interrupt disable
 5d8:	87 b7       	in	r24, 0x37	; 55
 5da:	8d 7f       	andi	r24, 0xFD	; 253
 5dc:	87 bf       	out	0x37, r24	; 55
	PORTD &= 0xFE;	// trigger impulse 0
 5de:	90 98       	cbi	0x12, 0	; 18


ISR(TIMER0_COMP_vect)
{	
	impulse_stop();	// 10 usec impulzus vége
	led_out(2);
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	0e 94 66 02 	call	0x4cc	; 0x4cc <led_out>
	//measure_echo();	// mérés indítás
		
}
 5e6:	ff 91       	pop	r31
 5e8:	ef 91       	pop	r30
 5ea:	bf 91       	pop	r27
 5ec:	af 91       	pop	r26
 5ee:	9f 91       	pop	r25
 5f0:	8f 91       	pop	r24
 5f2:	7f 91       	pop	r23
 5f4:	6f 91       	pop	r22
 5f6:	5f 91       	pop	r21
 5f8:	4f 91       	pop	r20
 5fa:	3f 91       	pop	r19
 5fc:	2f 91       	pop	r18
 5fe:	0f 90       	pop	r0
 600:	0b be       	out	0x3b, r0	; 59
 602:	0f 90       	pop	r0
 604:	0f be       	out	0x3f, r0	; 63
 606:	0f 90       	pop	r0
 608:	1f 90       	pop	r1
 60a:	18 95       	reti

0000060c <impulse_stop>:

void impulse_stop(){
	//TCCR0 &= 0b11111110;
	TIMSK &= 0b11111101;	// timer 0 CTC interrupt disable
 60c:	87 b7       	in	r24, 0x37	; 55
 60e:	8d 7f       	andi	r24, 0xFD	; 253
 610:	87 bf       	out	0x37, r24	; 55
	PORTD &= 0xFE;	// trigger impulse 0
 612:	90 98       	cbi	0x12, 0	; 18
	//led_out(16);
}
 614:	08 95       	ret

00000616 <measure_echo>:

void measure_echo(){
	
	TCCR2 |= 3;	// timer 2 indítás
 616:	85 b5       	in	r24, 0x25	; 37
 618:	83 60       	ori	r24, 0x03	; 3
 61a:	85 bd       	out	0x25, r24	; 37
	led_out(3);
 61c:	83 e0       	ldi	r24, 0x03	; 3
 61e:	0e 94 66 02 	call	0x4cc	; 0x4cc <led_out>
	
}
 622:	08 95       	ret

00000624 <select_rising_edge>:

	run++;	
}

void select_rising_edge(){
	EICRA |= (1<<2)|(1<<3);
 624:	ea e6       	ldi	r30, 0x6A	; 106
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	8c 60       	ori	r24, 0x0C	; 12
 62c:	80 83       	st	Z, r24
}
 62e:	08 95       	ret

00000630 <select_falling_edge>:

void select_falling_edge(){
	EICRA = 0;
 630:	ea e6       	ldi	r30, 0x6A	; 106
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	10 82       	st	Z, r1
	EICRA |= (1<<3);
 636:	80 81       	ld	r24, Z
 638:	88 60       	ori	r24, 0x08	; 8
 63a:	80 83       	st	Z, r24
}
 63c:	08 95       	ret

0000063e <getCnt>:
//
//
int* getCnt(){	
	static unsigned int cnt = 0; // 16 bites
	return &cnt;
}
 63e:	84 e0       	ldi	r24, 0x04	; 4
 640:	91 e0       	ldi	r25, 0x01	; 1
 642:	08 95       	ret

00000644 <timer2_init>:
	print_result();
}

void timer2_init(){
	
	OCR2 = 4;
 644:	84 e0       	ldi	r24, 0x04	; 4
 646:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (1<<3); // CTC mode 
 648:	85 b5       	in	r24, 0x25	; 37
 64a:	88 60       	ori	r24, 0x08	; 8
 64c:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<7);	// interrupt
 64e:	87 b7       	in	r24, 0x37	; 55
 650:	80 68       	ori	r24, 0x80	; 128
 652:	87 bf       	out	0x37, r24	; 55
}
 654:	08 95       	ret

00000656 <timer2_stop>:

void timer2_stop(){
	TIMSK &= ~(1<<7);	// interrupt
 656:	87 b7       	in	r24, 0x37	; 55
 658:	8f 77       	andi	r24, 0x7F	; 127
 65a:	87 bf       	out	0x37, r24	; 55
	//TIMSK = 0;
	led_out(4);
 65c:	84 e0       	ldi	r24, 0x04	; 4
 65e:	0e 94 66 02 	call	0x4cc	; 0x4cc <led_out>
}
 662:	08 95       	ret

00000664 <print_result>:


void print_result(){
	
	lcd_goto_yx(0,0);
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	60 e0       	ldi	r22, 0x00	; 0
 668:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd_goto_yx>
	lcd_put_int(blabla/58);
 66c:	80 91 02 01 	lds	r24, 0x0102
 670:	90 91 03 01 	lds	r25, 0x0103
 674:	6a e3       	ldi	r22, 0x3A	; 58
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodhi4>
 67c:	cb 01       	movw	r24, r22
 67e:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_put_int>

}
 682:	08 95       	ret

00000684 <calc_distance>:
	//int* cnt = getCnt();
	//int result = 0xff;//*cnt/58;
	//led_out(blabla);

	//led_out(6);
	print_result();
 684:	0e 94 32 03 	call	0x664	; 0x664 <print_result>
}
 688:	08 95       	ret

0000068a <__vector_2>:
	led_out(3);
	
}


ISR(INT1_vect){
 68a:	1f 92       	push	r1
 68c:	0f 92       	push	r0
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	0f 92       	push	r0
 692:	0b b6       	in	r0, 0x3b	; 59
 694:	0f 92       	push	r0
 696:	11 24       	eor	r1, r1
 698:	2f 93       	push	r18
 69a:	3f 93       	push	r19
 69c:	4f 93       	push	r20
 69e:	5f 93       	push	r21
 6a0:	6f 93       	push	r22
 6a2:	7f 93       	push	r23
 6a4:	8f 93       	push	r24
 6a6:	9f 93       	push	r25
 6a8:	af 93       	push	r26
 6aa:	bf 93       	push	r27
 6ac:	cf 93       	push	r28
 6ae:	df 93       	push	r29
 6b0:	ef 93       	push	r30
 6b2:	ff 93       	push	r31
	
	static int run = 1;
	EIFR = 0;
 6b4:	18 be       	out	0x38, r1	; 56

	if(run%2){
 6b6:	c0 91 00 01 	lds	r28, 0x0100
 6ba:	d0 91 01 01 	lds	r29, 0x0101
 6be:	c0 ff       	sbrs	r28, 0
 6c0:	0a c0       	rjmp	.+20     	; 0x6d6 <__vector_2+0x4c>
		measure_echo();	
 6c2:	0e 94 0b 03 	call	0x616	; 0x616 <measure_echo>
void select_rising_edge(){
	EICRA |= (1<<2)|(1<<3);
}

void select_falling_edge(){
	EICRA = 0;
 6c6:	10 92 6a 00 	sts	0x006A, r1
	EICRA |= (1<<3);
 6ca:	80 91 6a 00 	lds	r24, 0x006A
 6ce:	88 60       	ori	r24, 0x08	; 8
 6d0:	80 93 6a 00 	sts	0x006A, r24
 6d4:	0b c0       	rjmp	.+22     	; 0x6ec <__vector_2+0x62>

	if(run%2){
		measure_echo();	
		select_falling_edge();
	}else{
		timer2_stop();
 6d6:	0e 94 2b 03 	call	0x656	; 0x656 <timer2_stop>
void select_rising_edge(){
	EICRA |= (1<<2)|(1<<3);
}

void select_falling_edge(){
	EICRA = 0;
 6da:	10 92 6a 00 	sts	0x006A, r1
	EICRA |= (1<<3);
 6de:	80 91 6a 00 	lds	r24, 0x006A
 6e2:	88 60       	ori	r24, 0x08	; 8
 6e4:	80 93 6a 00 	sts	0x006A, r24
	//int* cnt = getCnt();
	//int result = 0xff;//*cnt/58;
	//led_out(blabla);

	//led_out(6);
	print_result();
 6e8:	0e 94 32 03 	call	0x664	; 0x664 <print_result>
		timer2_stop();
		select_falling_edge();
		calc_distance();	
	}

	run++;	
 6ec:	21 96       	adiw	r28, 0x01	; 1
 6ee:	d0 93 01 01 	sts	0x0101, r29
 6f2:	c0 93 00 01 	sts	0x0100, r28
}
 6f6:	ff 91       	pop	r31
 6f8:	ef 91       	pop	r30
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	bf 91       	pop	r27
 700:	af 91       	pop	r26
 702:	9f 91       	pop	r25
 704:	8f 91       	pop	r24
 706:	7f 91       	pop	r23
 708:	6f 91       	pop	r22
 70a:	5f 91       	pop	r21
 70c:	4f 91       	pop	r20
 70e:	3f 91       	pop	r19
 710:	2f 91       	pop	r18
 712:	0f 90       	pop	r0
 714:	0b be       	out	0x3b, r0	; 59
 716:	0f 90       	pop	r0
 718:	0f be       	out	0x3f, r0	; 63
 71a:	0f 90       	pop	r0
 71c:	1f 90       	pop	r1
 71e:	18 95       	reti

00000720 <__udivmodhi4>:
 720:	aa 1b       	sub	r26, r26
 722:	bb 1b       	sub	r27, r27
 724:	51 e1       	ldi	r21, 0x11	; 17
 726:	07 c0       	rjmp	.+14     	; 0x736 <__udivmodhi4_ep>

00000728 <__udivmodhi4_loop>:
 728:	aa 1f       	adc	r26, r26
 72a:	bb 1f       	adc	r27, r27
 72c:	a6 17       	cp	r26, r22
 72e:	b7 07       	cpc	r27, r23
 730:	10 f0       	brcs	.+4      	; 0x736 <__udivmodhi4_ep>
 732:	a6 1b       	sub	r26, r22
 734:	b7 0b       	sbc	r27, r23

00000736 <__udivmodhi4_ep>:
 736:	88 1f       	adc	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	5a 95       	dec	r21
 73c:	a9 f7       	brne	.-22     	; 0x728 <__udivmodhi4_loop>
 73e:	80 95       	com	r24
 740:	90 95       	com	r25
 742:	bc 01       	movw	r22, r24
 744:	cd 01       	movw	r24, r26
 746:	08 95       	ret

00000748 <_exit>:
 748:	f8 94       	cli

0000074a <__stop_program>:
 74a:	ff cf       	rjmp	.-2      	; 0x74a <__stop_program>
