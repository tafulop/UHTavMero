
uhmero.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800100  00000b14  00000ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080020a  0080020a  00000cb2  2**0
                  ALLOC
  3 .debug_aranges 00000140  00000000  00000000  00000cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000256  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000147a  00000000  00000000  0000104e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bf1  00000000  00000000  000024c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ce4  00000000  00000000  000030b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e0  00000000  00000000  00003da0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ad  00000000  00000000  00003f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000490  00000000  00000000  0000432d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_10>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_15>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_25>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e1       	ldi	r30, 0x14	; 20
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	12 e0       	ldi	r17, 0x02	; 2
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 31       	cpi	r26, 0x13	; 19
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
  c6:	0c 94 88 05 	jmp	0xb10	; 0xb10 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <set_uh_ports>:
	sei(); // global interrupt enable

}

void set_uh_ports(){
	DDRD |= 1;	// trigger kimenet
  ce:	88 9a       	sbi	0x11, 0	; 17
	DDRD &= 0b11111101;	// echo bemenet
  d0:	89 98       	cbi	0x11, 1	; 17
}
  d2:	08 95       	ret

000000d4 <timer3_input_capture_init>:



// impulzus szélességének mérése
void timer3_input_capture_init(){
	TCNT3 = 0;
  d4:	10 92 89 00 	sts	0x0089, r1
  d8:	10 92 88 00 	sts	0x0088, r1
	ETIMSK |= 1<<5;	// input capture interrupt enable
  dc:	ed e7       	ldi	r30, 0x7D	; 125
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	80 83       	st	Z, r24
	TCCR3B |= (1<<7)|(1<<6);	// noise filter + rising edge + 64 prescale
  e6:	ea e8       	ldi	r30, 0x8A	; 138
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	80 6c       	ori	r24, 0xC0	; 192
  ee:	80 83       	st	Z, r24
}
  f0:	08 95       	ret

000000f2 <select_rising_edge>:

}

// beállítja a Timer 3 Input Capture módját Rising Edge-re
void select_rising_edge(){
	EICRA |= (1<<2)|(1<<3);
  f2:	ea e6       	ldi	r30, 0x6A	; 106
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	8c 60       	ori	r24, 0x0C	; 12
  fa:	80 83       	st	Z, r24
}
  fc:	08 95       	ret

000000fe <select_falling_edge>:

// beállítja a Timer 3 Input Capture módját Rising Edge-re
void select_falling_edge(){
	EICRA = 0;
  fe:	ea e6       	ldi	r30, 0x6A	; 106
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	10 82       	st	Z, r1
	EICRA |= (1<<3);
 104:	80 81       	ld	r24, Z
 106:	88 60       	ori	r24, 0x08	; 8
 108:	80 83       	st	Z, r24
}
 10a:	08 95       	ret

0000010c <__vector_10>:


// 7seg meghajtása
ISR(TIMER2_OVF_vect){
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	0b b6       	in	r0, 0x3b	; 59
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	2f 93       	push	r18
 11c:	3f 93       	push	r19
 11e:	4f 93       	push	r20
 120:	5f 93       	push	r21
 122:	6f 93       	push	r22
 124:	7f 93       	push	r23
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	segment_display();
 132:	0e 94 9a 01 	call	0x334	; 0x334 <segment_display>
} 
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	bf 91       	pop	r27
 13c:	af 91       	pop	r26
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	7f 91       	pop	r23
 144:	6f 91       	pop	r22
 146:	5f 91       	pop	r21
 148:	4f 91       	pop	r20
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0b be       	out	0x3b, r0	; 59
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_25>:
	led_out(2);	
	TCCR3B |= 3;		// elindítjuk a Timer 3-at, ami méri az impulzus szélességét	
}

// Ide fut be, amint érkezik válasz a modultól (2x is ide fut egy mérés során)
ISR(TIMER3_CAPT_vect){
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	0b b6       	in	r0, 0x3b	; 59
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	4f 93       	push	r20
 170:	5f 93       	push	r21
 172:	6f 93       	push	r22
 174:	7f 93       	push	r23
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	af 93       	push	r26
 17c:	bf 93       	push	r27
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
	unsigned int res = 0;
	static unsigned int i1 =0;
	static unsigned int i2 =0;

	// ebbe fut bele elõször, mert 1/2 maradéka 1
	if(i%2){
 182:	20 91 00 01 	lds	r18, 0x0100
 186:	20 ff       	sbrs	r18, 0
 188:	11 c0       	rjmp	.+34     	; 0x1ac <__vector_25+0x50>
		i1 = ICR3;
 18a:	80 91 80 00 	lds	r24, 0x0080
 18e:	90 91 81 00 	lds	r25, 0x0081
 192:	90 93 0d 02 	sts	0x020D, r25
 196:	80 93 0c 02 	sts	0x020C, r24
		TCCR3B &= ~(1<<6);	// falling edge
 19a:	80 91 8a 00 	lds	r24, 0x008A
 19e:	8f 7b       	andi	r24, 0xBF	; 191
 1a0:	80 93 8a 00 	sts	0x008A, r24
		i++;
 1a4:	2f 5f       	subi	r18, 0xFF	; 255
 1a6:	20 93 00 01 	sts	0x0100, r18
 1aa:	28 c0       	rjmp	.+80     	; 0x1fc <__vector_25+0xa0>
	// ebbe másodszor, mert 2/2 maradéka 0		
	}else{
		TCCR3B |= 1<<6;		// rising edge
 1ac:	80 91 8a 00 	lds	r24, 0x008A
 1b0:	80 64       	ori	r24, 0x40	; 64
 1b2:	80 93 8a 00 	sts	0x008A, r24
		i2 = ICR3;
 1b6:	60 91 80 00 	lds	r22, 0x0080
 1ba:	70 91 81 00 	lds	r23, 0x0081
 1be:	70 93 0b 02 	sts	0x020B, r23
 1c2:	60 93 0a 02 	sts	0x020A, r22
		i = 1;
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	20 93 00 01 	sts	0x0100, r18
		res = i2-i1;
	 	// eredetileg 58-cal kell osztani, de mi 4usec pontossággal mérünk, ezért 58/4=14.5-tel kell osztani
		segment_put_int((int)res/14.5);
 1cc:	20 91 0c 02 	lds	r18, 0x020C
 1d0:	30 91 0d 02 	lds	r19, 0x020D
 1d4:	62 1b       	sub	r22, r18
 1d6:	73 0b       	sbc	r23, r19
 1d8:	88 27       	eor	r24, r24
 1da:	77 fd       	sbrc	r23, 7
 1dc:	80 95       	com	r24
 1de:	98 2f       	mov	r25, r24
 1e0:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__floatsisf>
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	48 e6       	ldi	r20, 0x68	; 104
 1ea:	51 e4       	ldi	r21, 0x41	; 65
 1ec:	0e 94 30 02 	call	0x460	; 0x460 <__divsf3>
 1f0:	0e 94 3a 03 	call	0x674	; 0x674 <__fixsfsi>
 1f4:	dc 01       	movw	r26, r24
 1f6:	cb 01       	movw	r24, r22
 1f8:	0e 94 bb 01 	call	0x376	; 0x376 <segment_put_int>
	}

	// ha egy mérés meg volt, akkor leállítjuk a timert 
	if(i > 2)
 1fc:	80 91 00 01 	lds	r24, 0x0100
 200:	83 30       	cpi	r24, 0x03	; 3
 202:	60 f0       	brcs	.+24     	; 0x21c <__vector_25+0xc0>
	{
		TCCR3B &= 0b11111000; // clock source off
 204:	80 91 8a 00 	lds	r24, 0x008A
 208:	88 7f       	andi	r24, 0xF8	; 248
 20a:	80 93 8a 00 	sts	0x008A, r24
		TCNT3 = 0;		// timert számláló regiszter nullázása
 20e:	10 92 89 00 	sts	0x0089, r1
 212:	10 92 88 00 	sts	0x0088, r1
		i = 1;	// i beállítása következõ méréshez.
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 00 01 	sts	0x0100, r24
	}

}
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	7f 91       	pop	r23
 22a:	6f 91       	pop	r22
 22c:	5f 91       	pop	r21
 22e:	4f 91       	pop	r20
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	0b be       	out	0x3b, r0	; 59
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <__vector_15>:
}


// ez állítja le a trigger impulzust
ISR(TIMER0_COMP_vect)
{	
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	0b b6       	in	r0, 0x3b	; 59
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
	PORTD &= 0b11111110;	// 10 usec impulzus vége, PORTD D0 ->0
 268:	90 98       	cbi	0x12, 0	; 18
	led_out(2);	
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	0e 94 89 01 	call	0x312	; 0x312 <led_out>
	TCCR3B |= 3;		// elindítjuk a Timer 3-at, ami méri az impulzus szélességét	
 270:	ea e8       	ldi	r30, 0x8A	; 138
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	83 60       	ori	r24, 0x03	; 3
 278:	80 83       	st	Z, r24
}
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	bf 91       	pop	r27
 280:	af 91       	pop	r26
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	7f 91       	pop	r23
 288:	6f 91       	pop	r22
 28a:	5f 91       	pop	r21
 28c:	4f 91       	pop	r20
 28e:	3f 91       	pop	r19
 290:	2f 91       	pop	r18
 292:	0f 90       	pop	r0
 294:	0b be       	out	0x3b, r0	; 59
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <send_trigger>:
	TCCR3B |= (1<<7)|(1<<6);	// noise filter + rising edge + 64 prescale
}

// trigger küldése, leállítani a timer 0 fogja
void send_trigger(){
	TCNT0 = 0;	// timer számláló regiszter nullázás
 2a0:	12 be       	out	0x32, r1	; 50
	TCCR0 |= 1;	// timer 0 indítás
 2a2:	83 b7       	in	r24, 0x33	; 51
 2a4:	81 60       	ori	r24, 0x01	; 1
 2a6:	83 bf       	out	0x33, r24	; 51
	PORTD |= 1;
 2a8:	90 9a       	sbi	0x12, 0	; 18
	led_out(0);
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 89 01 	call	0x312	; 0x312 <led_out>
}
 2b0:	08 95       	ret

000002b2 <init_periph>:
}

void init_periph(){

	
	asmPushButtonInit();	// mérés starthoz
 2b2:	0e 94 25 02 	call	0x44a	; 0x44a <asmPushButtonInit>
	asmLEDInit();
 2b6:	0e 94 0f 02 	call	0x41e	; 0x41e <asmLEDInit>

	asmSetUHPorts();	// Echo és Trigger beállítása
 2ba:	0e 94 2d 02 	call	0x45a	; 0x45a <asmSetUHPorts>
	asmSegmentInit();	// 7 szegmens init
 2be:	0e 94 2a 02 	call	0x454	; 0x454 <asmSegmentInit>
	
	asmTimer0Init();	// trigger jelhez 10usec impulzus
 2c2:	0e 94 16 02 	call	0x42c	; 0x42c <asmTimer0Init>
	asmTimer2Init();	// 7 seg drive
 2c6:	0e 94 1f 02 	call	0x43e	; 0x43e <asmTimer2Init>



// impulzus szélességének mérése
void timer3_input_capture_init(){
	TCNT3 = 0;
 2ca:	10 92 89 00 	sts	0x0089, r1
 2ce:	10 92 88 00 	sts	0x0088, r1
	ETIMSK |= 1<<5;	// input capture interrupt enable
 2d2:	ed e7       	ldi	r30, 0x7D	; 125
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	80 62       	ori	r24, 0x20	; 32
 2da:	80 83       	st	Z, r24
	TCCR3B |= (1<<7)|(1<<6);	// noise filter + rising edge + 64 prescale
 2dc:	ea e8       	ldi	r30, 0x8A	; 138
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	80 6c       	ori	r24, 0xC0	; 192
 2e4:	80 83       	st	Z, r24
	asmTimer0Init();	// trigger jelhez 10usec impulzus
	asmTimer2Init();	// 7 seg drive

	timer3_input_capture_init();
	
	sei(); // global interrupt enable
 2e6:	78 94       	sei

}
 2e8:	08 95       	ret

000002ea <main>:


int main (void){


	init_periph();
 2ea:	0e 94 59 01 	call	0x2b2	; 0x2b2 <init_periph>
	
	// gombra indul a mérés
	while(1){
		if(PING == 1){
 2ee:	80 91 63 00 	lds	r24, 0x0063
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <main+0x4>
			send_trigger();
 2f6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_trigger>
			while(PING != 0){}
 2fa:	80 91 63 00 	lds	r24, 0x0063
 2fe:	88 23       	and	r24, r24
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x10>
 302:	f5 cf       	rjmp	.-22     	; 0x2ee <main+0x4>

00000304 <led_init>:
#include "led_driver.h"

void led_init()
{
	DDRB |= 0xF0;	// PORTB out
 304:	87 b3       	in	r24, 0x17	; 23
 306:	80 6f       	ori	r24, 0xF0	; 240
 308:	87 bb       	out	0x17, r24	; 23
	DDRD |= 0xF0;	// PORTD out
 30a:	81 b3       	in	r24, 0x11	; 17
 30c:	80 6f       	ori	r24, 0xF0	; 240
 30e:	81 bb       	out	0x11, r24	; 17
}
 310:	08 95       	ret

00000312 <led_out>:

void led_out(unsigned char data)
{
	PORTD &= 0x0F;
 312:	92 b3       	in	r25, 0x12	; 18
 314:	9f 70       	andi	r25, 0x0F	; 15
 316:	92 bb       	out	0x12, r25	; 18
	PORTB &= 0x0F;
 318:	98 b3       	in	r25, 0x18	; 24
 31a:	9f 70       	andi	r25, 0x0F	; 15
 31c:	98 bb       	out	0x18, r25	; 24
	
	PORTD |= (data & 0xF0);
 31e:	22 b3       	in	r18, 0x12	; 18
 320:	98 2f       	mov	r25, r24
 322:	90 7f       	andi	r25, 0xF0	; 240
 324:	92 2b       	or	r25, r18
 326:	92 bb       	out	0x12, r25	; 18
	PORTB |= (data & 0x0F)<<4;
 328:	98 b3       	in	r25, 0x18	; 24
 32a:	82 95       	swap	r24
 32c:	80 7f       	andi	r24, 0xF0	; 240
 32e:	98 2b       	or	r25, r24
 330:	98 bb       	out	0x18, r25	; 24
}
 332:	08 95       	ret

00000334 <segment_display>:

void segment_display()
{
static unsigned char iterator = 0, data_address = 3;

PORTA = 0;	// en | _ _ _ | data
 334:	1b ba       	out	0x1b, r1	; 27
PORTA |= 0x80|(iterator++<<4)|segment_data[data_address--]; 
 336:	2b b3       	in	r18, 0x1b	; 27
 338:	90 91 12 02 	lds	r25, 0x0212
 33c:	30 91 01 01 	lds	r19, 0x0101
 340:	e3 2f       	mov	r30, r19
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	e2 5f       	subi	r30, 0xF2	; 242
 346:	fd 4f       	sbci	r31, 0xFD	; 253
 348:	40 81       	ld	r20, Z
 34a:	20 68       	ori	r18, 0x80	; 128
 34c:	89 2f       	mov	r24, r25
 34e:	82 95       	swap	r24
 350:	80 7f       	andi	r24, 0xF0	; 240
 352:	82 2b       	or	r24, r18
 354:	84 2b       	or	r24, r20
 356:	8b bb       	out	0x1b, r24	; 27
 358:	9f 5f       	subi	r25, 0xFF	; 255
 35a:	90 93 12 02 	sts	0x0212, r25
 35e:	91 50       	subi	r25, 0x01	; 1
 360:	31 50       	subi	r19, 0x01	; 1
 362:	30 93 01 01 	sts	0x0101, r19

	if(iterator >= 	4 || iterator < 1)
 366:	93 30       	cpi	r25, 0x03	; 3
 368:	28 f0       	brcs	.+10     	; 0x374 <segment_display+0x40>
	{
		iterator = 0;
 36a:	10 92 12 02 	sts	0x0212, r1
		data_address = 3;
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	80 93 01 01 	sts	0x0101, r24
 374:	08 95       	ret

00000376 <segment_put_int>:
}



void segment_put_int(int data)
{
 376:	9c 01       	movw	r18, r24
	if(data <= 9999 && data >= 0)
 378:	87 e2       	ldi	r24, 0x27	; 39
 37a:	20 31       	cpi	r18, 0x10	; 16
 37c:	38 07       	cpc	r19, r24
 37e:	58 f5       	brcc	.+86     	; 0x3d6 <segment_put_int+0x60>
	{
		unsigned char temp;
		temp = (data/1000)%10;
 380:	c9 01       	movw	r24, r18
 382:	68 ee       	ldi	r22, 0xE8	; 232
 384:	73 e0       	ldi	r23, 0x03	; 3
 386:	0e 94 2a 05 	call	0xa54	; 0xa54 <__divmodhi4>
 38a:	cb 01       	movw	r24, r22
 38c:	6a e0       	ldi	r22, 0x0A	; 10
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	0e 94 2a 05 	call	0xa54	; 0xa54 <__divmodhi4>
		segment_data[0] = temp;		
 394:	80 93 0e 02 	sts	0x020E, r24
		temp = (data/100)%10;
 398:	c9 01       	movw	r24, r18
 39a:	64 e6       	ldi	r22, 0x64	; 100
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	0e 94 2a 05 	call	0xa54	; 0xa54 <__divmodhi4>
 3a2:	cb 01       	movw	r24, r22
 3a4:	6a e0       	ldi	r22, 0x0A	; 10
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	0e 94 2a 05 	call	0xa54	; 0xa54 <__divmodhi4>
		segment_data[1] = temp;
 3ac:	80 93 0f 02 	sts	0x020F, r24
		temp = (data/10)%10;
 3b0:	c9 01       	movw	r24, r18
 3b2:	6a e0       	ldi	r22, 0x0A	; 10
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	0e 94 2a 05 	call	0xa54	; 0xa54 <__divmodhi4>
 3ba:	cb 01       	movw	r24, r22
 3bc:	6a e0       	ldi	r22, 0x0A	; 10
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	0e 94 2a 05 	call	0xa54	; 0xa54 <__divmodhi4>
		segment_data[2] = temp;
 3c4:	80 93 10 02 	sts	0x0210, r24
		temp = data%10;
 3c8:	c9 01       	movw	r24, r18
 3ca:	6a e0       	ldi	r22, 0x0A	; 10
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	0e 94 2a 05 	call	0xa54	; 0xa54 <__divmodhi4>
		segment_data[3] = temp;
 3d2:	80 93 11 02 	sts	0x0211, r24
 3d6:	08 95       	ret

000003d8 <segment_get_int>:

int segment_get_int()
{
	int data = 0;
	
	data = 	segment_data[0]*1000;
 3d8:	80 91 0e 02 	lds	r24, 0x020E
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	28 ee       	ldi	r18, 0xE8	; 232
 3e0:	33 e0       	ldi	r19, 0x03	; 3
 3e2:	a9 01       	movw	r20, r18
 3e4:	84 9f       	mul	r24, r20
 3e6:	90 01       	movw	r18, r0
 3e8:	85 9f       	mul	r24, r21
 3ea:	30 0d       	add	r19, r0
 3ec:	94 9f       	mul	r25, r20
 3ee:	30 0d       	add	r19, r0
 3f0:	11 24       	eor	r1, r1
	data += segment_data[1]*100;
 3f2:	80 91 0f 02 	lds	r24, 0x020F
	data += segment_data[2]*10;
 3f6:	40 91 10 02 	lds	r20, 0x0210
	data += segment_data[3];
 3fa:	70 91 11 02 	lds	r23, 0x0211
int segment_get_int()
{
	int data = 0;
	
	data = 	segment_data[0]*1000;
	data += segment_data[1]*100;
 3fe:	64 e6       	ldi	r22, 0x64	; 100
 400:	86 9f       	mul	r24, r22
 402:	c0 01       	movw	r24, r0
 404:	11 24       	eor	r1, r1
 406:	28 0f       	add	r18, r24
 408:	39 1f       	adc	r19, r25
	data += segment_data[2]*10;
 40a:	27 0f       	add	r18, r23
 40c:	31 1d       	adc	r19, r1
 40e:	8a e0       	ldi	r24, 0x0A	; 10
 410:	48 9f       	mul	r20, r24
 412:	a0 01       	movw	r20, r0
 414:	11 24       	eor	r1, r1
 416:	24 0f       	add	r18, r20
 418:	35 1f       	adc	r19, r21
	data += segment_data[3];
	
return data;
}
 41a:	c9 01       	movw	r24, r18
 41c:	08 95       	ret

0000041e <asmLEDInit>:

// LED init asm function
.global asmLEDInit
asmLEDInit:
	
	in	r24, DDRD
 41e:	81 b3       	in	r24, 0x11	; 17
	ori	r24, 0xF0	
 420:	80 6f       	ori	r24, 0xF0	; 240
	out	DDRD, r24	;PORTD
 422:	81 bb       	out	0x11, r24	; 17

	in	r24, DDRB	
 424:	87 b3       	in	r24, 0x17	; 23
	ori	r24, 0xF0	
 426:	80 6f       	ori	r24, 0xF0	; 240
	out	DDRB, r24	;PORTB
 428:	87 bb       	out	0x17, r24	; 23

	ret
 42a:	08 95       	ret

0000042c <asmTimer0Init>:

	
// Timer 0 init
.global asmTimer0Init
asmTimer0Init:
	ldi	r16, 0x9F
 42c:	0f e9       	ldi	r16, 0x9F	; 159
	out	OCR0, r16
 42e:	01 bf       	out	0x31, r16	; 49
	

	in	r16, TCCR0 	; r24 beolvas, hogy megtartsuk az értékét
 430:	03 b7       	in	r16, 0x33	; 51
	ori	r16, 0x08	; 0x08 || r24
 432:	08 60       	ori	r16, 0x08	; 8
	out	TCCR0, r16
 434:	03 bf       	out	0x33, r16	; 51
	
	in	r16, TIMSK	; interruptot engedélyezzük úgy, hogy minden más marad a régi	
 436:	07 b7       	in	r16, 0x37	; 55
	ori	r16, 0x02	; 
 438:	02 60       	ori	r16, 0x02	; 2
	out	TIMSK, r16	; 
 43a:	07 bf       	out	0x37, r16	; 55
	
	ret
 43c:	08 95       	ret

0000043e <asmTimer2Init>:

// Timer 2 init, hasonlo logika mint a timer 0
.global asmTimer2Init
asmTimer2Init:

	in	r16, TCCR2	
 43e:	05 b5       	in	r16, 0x25	; 37
	ori	r16, 0x03	
 440:	03 60       	ori	r16, 0x03	; 3
 	out	TCCR2, r16	
 442:	05 bd       	out	0x25, r16	; 37
	
	in	r16, TIMSK	; interrupt engedélyezés
 444:	07 b7       	in	r16, 0x37	; 55
   	ori	r16, 0x40	
 446:	00 64       	ori	r16, 0x40	; 64
	out	TIMSK, r16
 448:	07 bf       	out	0x37, r16	; 55

0000044a <asmPushButtonInit>:

// Összes gomb bemenet
.global asmPushButtonInit
asmPushButtonInit:

	ldi r16, DDRG
 44a:	04 e6       	ldi	r16, 0x64	; 100
	ori r16, 0x1F
 44c:	0f 61       	ori	r16, 0x1F	; 31
	sts DDRG, r16
 44e:	00 93 64 00 	sts	0x0064, r16

	ret
 452:	08 95       	ret

00000454 <asmSegmentInit>:

// 7 segmens inicializálás
.global asmSegmentInit
asmSegmentInit:

	ldi	r24, 0xFF	; 255
 454:	8f ef       	ldi	r24, 0xFF	; 255
	out	DDRA, r24	; 26
 456:	8a bb       	out	0x1a, r24	; 26

	ret
 458:	08 95       	ret

0000045a <asmSetUHPorts>:

// UH modulnak portbeállítás
.global asmSetUHPorts
asmSetUHPorts:

	sbi	DDRD, 0	; TRIGGER kimenet
 45a:	88 9a       	sbi	0x11, 0	; 17

	cbi	DDRD, 1	; ECHO bemenet
 45c:	89 98       	cbi	0x11, 1	; 17

	ret
 45e:	08 95       	ret

00000460 <__divsf3>:
 460:	a8 e1       	ldi	r26, 0x18	; 24
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	e6 e3       	ldi	r30, 0x36	; 54
 466:	f2 e0       	ldi	r31, 0x02	; 2
 468:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__prologue_saves__+0x10>
 46c:	69 83       	std	Y+1, r22	; 0x01
 46e:	7a 83       	std	Y+2, r23	; 0x02
 470:	8b 83       	std	Y+3, r24	; 0x03
 472:	9c 83       	std	Y+4, r25	; 0x04
 474:	2d 83       	std	Y+5, r18	; 0x05
 476:	3e 83       	std	Y+6, r19	; 0x06
 478:	4f 83       	std	Y+7, r20	; 0x07
 47a:	58 87       	std	Y+8, r21	; 0x08
 47c:	b9 e0       	ldi	r27, 0x09	; 9
 47e:	eb 2e       	mov	r14, r27
 480:	f1 2c       	mov	r15, r1
 482:	ec 0e       	add	r14, r28
 484:	fd 1e       	adc	r15, r29
 486:	ce 01       	movw	r24, r28
 488:	01 96       	adiw	r24, 0x01	; 1
 48a:	b7 01       	movw	r22, r14
 48c:	0e 94 b2 04 	call	0x964	; 0x964 <__unpack_f>
 490:	8e 01       	movw	r16, r28
 492:	0f 5e       	subi	r16, 0xEF	; 239
 494:	1f 4f       	sbci	r17, 0xFF	; 255
 496:	ce 01       	movw	r24, r28
 498:	05 96       	adiw	r24, 0x05	; 5
 49a:	b8 01       	movw	r22, r16
 49c:	0e 94 b2 04 	call	0x964	; 0x964 <__unpack_f>
 4a0:	29 85       	ldd	r18, Y+9	; 0x09
 4a2:	22 30       	cpi	r18, 0x02	; 2
 4a4:	08 f4       	brcc	.+2      	; 0x4a8 <__divsf3+0x48>
 4a6:	7e c0       	rjmp	.+252    	; 0x5a4 <__divsf3+0x144>
 4a8:	39 89       	ldd	r19, Y+17	; 0x11
 4aa:	32 30       	cpi	r19, 0x02	; 2
 4ac:	10 f4       	brcc	.+4      	; 0x4b2 <__divsf3+0x52>
 4ae:	b8 01       	movw	r22, r16
 4b0:	7c c0       	rjmp	.+248    	; 0x5aa <__divsf3+0x14a>
 4b2:	8a 85       	ldd	r24, Y+10	; 0x0a
 4b4:	9a 89       	ldd	r25, Y+18	; 0x12
 4b6:	89 27       	eor	r24, r25
 4b8:	8a 87       	std	Y+10, r24	; 0x0a
 4ba:	24 30       	cpi	r18, 0x04	; 4
 4bc:	11 f0       	breq	.+4      	; 0x4c2 <__divsf3+0x62>
 4be:	22 30       	cpi	r18, 0x02	; 2
 4c0:	31 f4       	brne	.+12     	; 0x4ce <__divsf3+0x6e>
 4c2:	23 17       	cp	r18, r19
 4c4:	09 f0       	breq	.+2      	; 0x4c8 <__divsf3+0x68>
 4c6:	6e c0       	rjmp	.+220    	; 0x5a4 <__divsf3+0x144>
 4c8:	62 e0       	ldi	r22, 0x02	; 2
 4ca:	71 e0       	ldi	r23, 0x01	; 1
 4cc:	6e c0       	rjmp	.+220    	; 0x5aa <__divsf3+0x14a>
 4ce:	34 30       	cpi	r19, 0x04	; 4
 4d0:	39 f4       	brne	.+14     	; 0x4e0 <__divsf3+0x80>
 4d2:	1d 86       	std	Y+13, r1	; 0x0d
 4d4:	1e 86       	std	Y+14, r1	; 0x0e
 4d6:	1f 86       	std	Y+15, r1	; 0x0f
 4d8:	18 8a       	std	Y+16, r1	; 0x10
 4da:	1c 86       	std	Y+12, r1	; 0x0c
 4dc:	1b 86       	std	Y+11, r1	; 0x0b
 4de:	04 c0       	rjmp	.+8      	; 0x4e8 <__divsf3+0x88>
 4e0:	32 30       	cpi	r19, 0x02	; 2
 4e2:	21 f4       	brne	.+8      	; 0x4ec <__divsf3+0x8c>
 4e4:	84 e0       	ldi	r24, 0x04	; 4
 4e6:	89 87       	std	Y+9, r24	; 0x09
 4e8:	b7 01       	movw	r22, r14
 4ea:	5f c0       	rjmp	.+190    	; 0x5aa <__divsf3+0x14a>
 4ec:	2b 85       	ldd	r18, Y+11	; 0x0b
 4ee:	3c 85       	ldd	r19, Y+12	; 0x0c
 4f0:	8b 89       	ldd	r24, Y+19	; 0x13
 4f2:	9c 89       	ldd	r25, Y+20	; 0x14
 4f4:	28 1b       	sub	r18, r24
 4f6:	39 0b       	sbc	r19, r25
 4f8:	3c 87       	std	Y+12, r19	; 0x0c
 4fa:	2b 87       	std	Y+11, r18	; 0x0b
 4fc:	ed 84       	ldd	r14, Y+13	; 0x0d
 4fe:	fe 84       	ldd	r15, Y+14	; 0x0e
 500:	0f 85       	ldd	r16, Y+15	; 0x0f
 502:	18 89       	ldd	r17, Y+16	; 0x10
 504:	ad 88       	ldd	r10, Y+21	; 0x15
 506:	be 88       	ldd	r11, Y+22	; 0x16
 508:	cf 88       	ldd	r12, Y+23	; 0x17
 50a:	d8 8c       	ldd	r13, Y+24	; 0x18
 50c:	ea 14       	cp	r14, r10
 50e:	fb 04       	cpc	r15, r11
 510:	0c 05       	cpc	r16, r12
 512:	1d 05       	cpc	r17, r13
 514:	40 f4       	brcc	.+16     	; 0x526 <__divsf3+0xc6>
 516:	ee 0c       	add	r14, r14
 518:	ff 1c       	adc	r15, r15
 51a:	00 1f       	adc	r16, r16
 51c:	11 1f       	adc	r17, r17
 51e:	21 50       	subi	r18, 0x01	; 1
 520:	30 40       	sbci	r19, 0x00	; 0
 522:	3c 87       	std	Y+12, r19	; 0x0c
 524:	2b 87       	std	Y+11, r18	; 0x0b
 526:	20 e0       	ldi	r18, 0x00	; 0
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	40 e0       	ldi	r20, 0x00	; 0
 52c:	50 e0       	ldi	r21, 0x00	; 0
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	a0 e0       	ldi	r26, 0x00	; 0
 534:	b0 e4       	ldi	r27, 0x40	; 64
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	ea 14       	cp	r14, r10
 53c:	fb 04       	cpc	r15, r11
 53e:	0c 05       	cpc	r16, r12
 540:	1d 05       	cpc	r17, r13
 542:	40 f0       	brcs	.+16     	; 0x554 <__divsf3+0xf4>
 544:	28 2b       	or	r18, r24
 546:	39 2b       	or	r19, r25
 548:	4a 2b       	or	r20, r26
 54a:	5b 2b       	or	r21, r27
 54c:	ea 18       	sub	r14, r10
 54e:	fb 08       	sbc	r15, r11
 550:	0c 09       	sbc	r16, r12
 552:	1d 09       	sbc	r17, r13
 554:	b6 95       	lsr	r27
 556:	a7 95       	ror	r26
 558:	97 95       	ror	r25
 55a:	87 95       	ror	r24
 55c:	ee 0c       	add	r14, r14
 55e:	ff 1c       	adc	r15, r15
 560:	00 1f       	adc	r16, r16
 562:	11 1f       	adc	r17, r17
 564:	6f 5f       	subi	r22, 0xFF	; 255
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	6f 31       	cpi	r22, 0x1F	; 31
 56a:	71 05       	cpc	r23, r1
 56c:	31 f7       	brne	.-52     	; 0x53a <__divsf3+0xda>
 56e:	da 01       	movw	r26, r20
 570:	c9 01       	movw	r24, r18
 572:	8f 77       	andi	r24, 0x7F	; 127
 574:	90 70       	andi	r25, 0x00	; 0
 576:	a0 70       	andi	r26, 0x00	; 0
 578:	b0 70       	andi	r27, 0x00	; 0
 57a:	80 34       	cpi	r24, 0x40	; 64
 57c:	91 05       	cpc	r25, r1
 57e:	a1 05       	cpc	r26, r1
 580:	b1 05       	cpc	r27, r1
 582:	61 f4       	brne	.+24     	; 0x59c <__divsf3+0x13c>
 584:	27 fd       	sbrc	r18, 7
 586:	0a c0       	rjmp	.+20     	; 0x59c <__divsf3+0x13c>
 588:	e1 14       	cp	r14, r1
 58a:	f1 04       	cpc	r15, r1
 58c:	01 05       	cpc	r16, r1
 58e:	11 05       	cpc	r17, r1
 590:	29 f0       	breq	.+10     	; 0x59c <__divsf3+0x13c>
 592:	20 5c       	subi	r18, 0xC0	; 192
 594:	3f 4f       	sbci	r19, 0xFF	; 255
 596:	4f 4f       	sbci	r20, 0xFF	; 255
 598:	5f 4f       	sbci	r21, 0xFF	; 255
 59a:	20 78       	andi	r18, 0x80	; 128
 59c:	2d 87       	std	Y+13, r18	; 0x0d
 59e:	3e 87       	std	Y+14, r19	; 0x0e
 5a0:	4f 87       	std	Y+15, r20	; 0x0f
 5a2:	58 8b       	std	Y+16, r21	; 0x10
 5a4:	be 01       	movw	r22, r28
 5a6:	67 5f       	subi	r22, 0xF7	; 247
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255
 5aa:	cb 01       	movw	r24, r22
 5ac:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__pack_f>
 5b0:	68 96       	adiw	r28, 0x18	; 24
 5b2:	ea e0       	ldi	r30, 0x0A	; 10
 5b4:	0c 94 75 05 	jmp	0xaea	; 0xaea <__epilogue_restores__+0x10>

000005b8 <__floatsisf>:
 5b8:	a8 e0       	ldi	r26, 0x08	; 8
 5ba:	b0 e0       	ldi	r27, 0x00	; 0
 5bc:	e2 ee       	ldi	r30, 0xE2	; 226
 5be:	f2 e0       	ldi	r31, 0x02	; 2
 5c0:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__prologue_saves__+0x12>
 5c4:	9b 01       	movw	r18, r22
 5c6:	ac 01       	movw	r20, r24
 5c8:	83 e0       	ldi	r24, 0x03	; 3
 5ca:	89 83       	std	Y+1, r24	; 0x01
 5cc:	da 01       	movw	r26, r20
 5ce:	c9 01       	movw	r24, r18
 5d0:	88 27       	eor	r24, r24
 5d2:	b7 fd       	sbrc	r27, 7
 5d4:	83 95       	inc	r24
 5d6:	99 27       	eor	r25, r25
 5d8:	aa 27       	eor	r26, r26
 5da:	bb 27       	eor	r27, r27
 5dc:	b8 2e       	mov	r11, r24
 5de:	21 15       	cp	r18, r1
 5e0:	31 05       	cpc	r19, r1
 5e2:	41 05       	cpc	r20, r1
 5e4:	51 05       	cpc	r21, r1
 5e6:	19 f4       	brne	.+6      	; 0x5ee <__floatsisf+0x36>
 5e8:	82 e0       	ldi	r24, 0x02	; 2
 5ea:	89 83       	std	Y+1, r24	; 0x01
 5ec:	3a c0       	rjmp	.+116    	; 0x662 <__floatsisf+0xaa>
 5ee:	88 23       	and	r24, r24
 5f0:	a9 f0       	breq	.+42     	; 0x61c <__floatsisf+0x64>
 5f2:	20 30       	cpi	r18, 0x00	; 0
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	38 07       	cpc	r19, r24
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	48 07       	cpc	r20, r24
 5fc:	80 e8       	ldi	r24, 0x80	; 128
 5fe:	58 07       	cpc	r21, r24
 600:	29 f4       	brne	.+10     	; 0x60c <__floatsisf+0x54>
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	9f ec       	ldi	r25, 0xCF	; 207
 60a:	30 c0       	rjmp	.+96     	; 0x66c <__floatsisf+0xb4>
 60c:	ee 24       	eor	r14, r14
 60e:	ff 24       	eor	r15, r15
 610:	87 01       	movw	r16, r14
 612:	e2 1a       	sub	r14, r18
 614:	f3 0a       	sbc	r15, r19
 616:	04 0b       	sbc	r16, r20
 618:	15 0b       	sbc	r17, r21
 61a:	02 c0       	rjmp	.+4      	; 0x620 <__floatsisf+0x68>
 61c:	79 01       	movw	r14, r18
 61e:	8a 01       	movw	r16, r20
 620:	8e e1       	ldi	r24, 0x1E	; 30
 622:	c8 2e       	mov	r12, r24
 624:	d1 2c       	mov	r13, r1
 626:	dc 82       	std	Y+4, r13	; 0x04
 628:	cb 82       	std	Y+3, r12	; 0x03
 62a:	ed 82       	std	Y+5, r14	; 0x05
 62c:	fe 82       	std	Y+6, r15	; 0x06
 62e:	0f 83       	std	Y+7, r16	; 0x07
 630:	18 87       	std	Y+8, r17	; 0x08
 632:	c8 01       	movw	r24, r16
 634:	b7 01       	movw	r22, r14
 636:	0e 94 8e 03 	call	0x71c	; 0x71c <__clzsi2>
 63a:	01 97       	sbiw	r24, 0x01	; 1
 63c:	18 16       	cp	r1, r24
 63e:	19 06       	cpc	r1, r25
 640:	84 f4       	brge	.+32     	; 0x662 <__floatsisf+0xaa>
 642:	08 2e       	mov	r0, r24
 644:	04 c0       	rjmp	.+8      	; 0x64e <__floatsisf+0x96>
 646:	ee 0c       	add	r14, r14
 648:	ff 1c       	adc	r15, r15
 64a:	00 1f       	adc	r16, r16
 64c:	11 1f       	adc	r17, r17
 64e:	0a 94       	dec	r0
 650:	d2 f7       	brpl	.-12     	; 0x646 <__floatsisf+0x8e>
 652:	ed 82       	std	Y+5, r14	; 0x05
 654:	fe 82       	std	Y+6, r15	; 0x06
 656:	0f 83       	std	Y+7, r16	; 0x07
 658:	18 87       	std	Y+8, r17	; 0x08
 65a:	c8 1a       	sub	r12, r24
 65c:	d9 0a       	sbc	r13, r25
 65e:	dc 82       	std	Y+4, r13	; 0x04
 660:	cb 82       	std	Y+3, r12	; 0x03
 662:	ba 82       	std	Y+2, r11	; 0x02
 664:	ce 01       	movw	r24, r28
 666:	01 96       	adiw	r24, 0x01	; 1
 668:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__pack_f>
 66c:	28 96       	adiw	r28, 0x08	; 8
 66e:	e9 e0       	ldi	r30, 0x09	; 9
 670:	0c 94 76 05 	jmp	0xaec	; 0xaec <__epilogue_restores__+0x12>

00000674 <__fixsfsi>:
 674:	ac e0       	ldi	r26, 0x0C	; 12
 676:	b0 e0       	ldi	r27, 0x00	; 0
 678:	e0 e4       	ldi	r30, 0x40	; 64
 67a:	f3 e0       	ldi	r31, 0x03	; 3
 67c:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__prologue_saves__+0x20>
 680:	69 83       	std	Y+1, r22	; 0x01
 682:	7a 83       	std	Y+2, r23	; 0x02
 684:	8b 83       	std	Y+3, r24	; 0x03
 686:	9c 83       	std	Y+4, r25	; 0x04
 688:	ce 01       	movw	r24, r28
 68a:	01 96       	adiw	r24, 0x01	; 1
 68c:	be 01       	movw	r22, r28
 68e:	6b 5f       	subi	r22, 0xFB	; 251
 690:	7f 4f       	sbci	r23, 0xFF	; 255
 692:	0e 94 b2 04 	call	0x964	; 0x964 <__unpack_f>
 696:	8d 81       	ldd	r24, Y+5	; 0x05
 698:	82 30       	cpi	r24, 0x02	; 2
 69a:	61 f1       	breq	.+88     	; 0x6f4 <__fixsfsi+0x80>
 69c:	82 30       	cpi	r24, 0x02	; 2
 69e:	50 f1       	brcs	.+84     	; 0x6f4 <__fixsfsi+0x80>
 6a0:	84 30       	cpi	r24, 0x04	; 4
 6a2:	21 f4       	brne	.+8      	; 0x6ac <__fixsfsi+0x38>
 6a4:	8e 81       	ldd	r24, Y+6	; 0x06
 6a6:	88 23       	and	r24, r24
 6a8:	51 f1       	breq	.+84     	; 0x6fe <__fixsfsi+0x8a>
 6aa:	2e c0       	rjmp	.+92     	; 0x708 <__fixsfsi+0x94>
 6ac:	2f 81       	ldd	r18, Y+7	; 0x07
 6ae:	38 85       	ldd	r19, Y+8	; 0x08
 6b0:	37 fd       	sbrc	r19, 7
 6b2:	20 c0       	rjmp	.+64     	; 0x6f4 <__fixsfsi+0x80>
 6b4:	6e 81       	ldd	r22, Y+6	; 0x06
 6b6:	2f 31       	cpi	r18, 0x1F	; 31
 6b8:	31 05       	cpc	r19, r1
 6ba:	1c f0       	brlt	.+6      	; 0x6c2 <__fixsfsi+0x4e>
 6bc:	66 23       	and	r22, r22
 6be:	f9 f0       	breq	.+62     	; 0x6fe <__fixsfsi+0x8a>
 6c0:	23 c0       	rjmp	.+70     	; 0x708 <__fixsfsi+0x94>
 6c2:	8e e1       	ldi	r24, 0x1E	; 30
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	82 1b       	sub	r24, r18
 6c8:	93 0b       	sbc	r25, r19
 6ca:	29 85       	ldd	r18, Y+9	; 0x09
 6cc:	3a 85       	ldd	r19, Y+10	; 0x0a
 6ce:	4b 85       	ldd	r20, Y+11	; 0x0b
 6d0:	5c 85       	ldd	r21, Y+12	; 0x0c
 6d2:	04 c0       	rjmp	.+8      	; 0x6dc <__fixsfsi+0x68>
 6d4:	56 95       	lsr	r21
 6d6:	47 95       	ror	r20
 6d8:	37 95       	ror	r19
 6da:	27 95       	ror	r18
 6dc:	8a 95       	dec	r24
 6de:	d2 f7       	brpl	.-12     	; 0x6d4 <__fixsfsi+0x60>
 6e0:	66 23       	and	r22, r22
 6e2:	b1 f0       	breq	.+44     	; 0x710 <__fixsfsi+0x9c>
 6e4:	50 95       	com	r21
 6e6:	40 95       	com	r20
 6e8:	30 95       	com	r19
 6ea:	21 95       	neg	r18
 6ec:	3f 4f       	sbci	r19, 0xFF	; 255
 6ee:	4f 4f       	sbci	r20, 0xFF	; 255
 6f0:	5f 4f       	sbci	r21, 0xFF	; 255
 6f2:	0e c0       	rjmp	.+28     	; 0x710 <__fixsfsi+0x9c>
 6f4:	20 e0       	ldi	r18, 0x00	; 0
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	40 e0       	ldi	r20, 0x00	; 0
 6fa:	50 e0       	ldi	r21, 0x00	; 0
 6fc:	09 c0       	rjmp	.+18     	; 0x710 <__fixsfsi+0x9c>
 6fe:	2f ef       	ldi	r18, 0xFF	; 255
 700:	3f ef       	ldi	r19, 0xFF	; 255
 702:	4f ef       	ldi	r20, 0xFF	; 255
 704:	5f e7       	ldi	r21, 0x7F	; 127
 706:	04 c0       	rjmp	.+8      	; 0x710 <__fixsfsi+0x9c>
 708:	20 e0       	ldi	r18, 0x00	; 0
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	40 e0       	ldi	r20, 0x00	; 0
 70e:	50 e8       	ldi	r21, 0x80	; 128
 710:	b9 01       	movw	r22, r18
 712:	ca 01       	movw	r24, r20
 714:	2c 96       	adiw	r28, 0x0c	; 12
 716:	e2 e0       	ldi	r30, 0x02	; 2
 718:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__epilogue_restores__+0x20>

0000071c <__clzsi2>:
 71c:	ef 92       	push	r14
 71e:	ff 92       	push	r15
 720:	0f 93       	push	r16
 722:	1f 93       	push	r17
 724:	7b 01       	movw	r14, r22
 726:	8c 01       	movw	r16, r24
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	e8 16       	cp	r14, r24
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	f8 06       	cpc	r15, r24
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	08 07       	cpc	r16, r24
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	18 07       	cpc	r17, r24
 738:	88 f4       	brcc	.+34     	; 0x75c <__clzsi2+0x40>
 73a:	8f ef       	ldi	r24, 0xFF	; 255
 73c:	e8 16       	cp	r14, r24
 73e:	f1 04       	cpc	r15, r1
 740:	01 05       	cpc	r16, r1
 742:	11 05       	cpc	r17, r1
 744:	31 f0       	breq	.+12     	; 0x752 <__clzsi2+0x36>
 746:	28 f0       	brcs	.+10     	; 0x752 <__clzsi2+0x36>
 748:	88 e0       	ldi	r24, 0x08	; 8
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	a0 e0       	ldi	r26, 0x00	; 0
 74e:	b0 e0       	ldi	r27, 0x00	; 0
 750:	17 c0       	rjmp	.+46     	; 0x780 <__clzsi2+0x64>
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	a0 e0       	ldi	r26, 0x00	; 0
 758:	b0 e0       	ldi	r27, 0x00	; 0
 75a:	12 c0       	rjmp	.+36     	; 0x780 <__clzsi2+0x64>
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	e8 16       	cp	r14, r24
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	f8 06       	cpc	r15, r24
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	08 07       	cpc	r16, r24
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	18 07       	cpc	r17, r24
 76c:	28 f0       	brcs	.+10     	; 0x778 <__clzsi2+0x5c>
 76e:	88 e1       	ldi	r24, 0x18	; 24
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	a0 e0       	ldi	r26, 0x00	; 0
 774:	b0 e0       	ldi	r27, 0x00	; 0
 776:	04 c0       	rjmp	.+8      	; 0x780 <__clzsi2+0x64>
 778:	80 e1       	ldi	r24, 0x10	; 16
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	a0 e0       	ldi	r26, 0x00	; 0
 77e:	b0 e0       	ldi	r27, 0x00	; 0
 780:	20 e2       	ldi	r18, 0x20	; 32
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	40 e0       	ldi	r20, 0x00	; 0
 786:	50 e0       	ldi	r21, 0x00	; 0
 788:	28 1b       	sub	r18, r24
 78a:	39 0b       	sbc	r19, r25
 78c:	4a 0b       	sbc	r20, r26
 78e:	5b 0b       	sbc	r21, r27
 790:	04 c0       	rjmp	.+8      	; 0x79a <__clzsi2+0x7e>
 792:	16 95       	lsr	r17
 794:	07 95       	ror	r16
 796:	f7 94       	ror	r15
 798:	e7 94       	ror	r14
 79a:	8a 95       	dec	r24
 79c:	d2 f7       	brpl	.-12     	; 0x792 <__clzsi2+0x76>
 79e:	f7 01       	movw	r30, r14
 7a0:	e6 5f       	subi	r30, 0xF6	; 246
 7a2:	fe 4f       	sbci	r31, 0xFE	; 254
 7a4:	80 81       	ld	r24, Z
 7a6:	28 1b       	sub	r18, r24
 7a8:	31 09       	sbc	r19, r1
 7aa:	41 09       	sbc	r20, r1
 7ac:	51 09       	sbc	r21, r1
 7ae:	c9 01       	movw	r24, r18
 7b0:	1f 91       	pop	r17
 7b2:	0f 91       	pop	r16
 7b4:	ff 90       	pop	r15
 7b6:	ef 90       	pop	r14
 7b8:	08 95       	ret

000007ba <__pack_f>:
 7ba:	df 92       	push	r13
 7bc:	ef 92       	push	r14
 7be:	ff 92       	push	r15
 7c0:	0f 93       	push	r16
 7c2:	1f 93       	push	r17
 7c4:	fc 01       	movw	r30, r24
 7c6:	e4 80       	ldd	r14, Z+4	; 0x04
 7c8:	f5 80       	ldd	r15, Z+5	; 0x05
 7ca:	06 81       	ldd	r16, Z+6	; 0x06
 7cc:	17 81       	ldd	r17, Z+7	; 0x07
 7ce:	d1 80       	ldd	r13, Z+1	; 0x01
 7d0:	80 81       	ld	r24, Z
 7d2:	82 30       	cpi	r24, 0x02	; 2
 7d4:	48 f4       	brcc	.+18     	; 0x7e8 <__pack_f+0x2e>
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	a0 e1       	ldi	r26, 0x10	; 16
 7dc:	b0 e0       	ldi	r27, 0x00	; 0
 7de:	e8 2a       	or	r14, r24
 7e0:	f9 2a       	or	r15, r25
 7e2:	0a 2b       	or	r16, r26
 7e4:	1b 2b       	or	r17, r27
 7e6:	a5 c0       	rjmp	.+330    	; 0x932 <__pack_f+0x178>
 7e8:	84 30       	cpi	r24, 0x04	; 4
 7ea:	09 f4       	brne	.+2      	; 0x7ee <__pack_f+0x34>
 7ec:	9f c0       	rjmp	.+318    	; 0x92c <__pack_f+0x172>
 7ee:	82 30       	cpi	r24, 0x02	; 2
 7f0:	21 f4       	brne	.+8      	; 0x7fa <__pack_f+0x40>
 7f2:	ee 24       	eor	r14, r14
 7f4:	ff 24       	eor	r15, r15
 7f6:	87 01       	movw	r16, r14
 7f8:	05 c0       	rjmp	.+10     	; 0x804 <__pack_f+0x4a>
 7fa:	e1 14       	cp	r14, r1
 7fc:	f1 04       	cpc	r15, r1
 7fe:	01 05       	cpc	r16, r1
 800:	11 05       	cpc	r17, r1
 802:	19 f4       	brne	.+6      	; 0x80a <__pack_f+0x50>
 804:	e0 e0       	ldi	r30, 0x00	; 0
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	96 c0       	rjmp	.+300    	; 0x936 <__pack_f+0x17c>
 80a:	62 81       	ldd	r22, Z+2	; 0x02
 80c:	73 81       	ldd	r23, Z+3	; 0x03
 80e:	9f ef       	ldi	r25, 0xFF	; 255
 810:	62 38       	cpi	r22, 0x82	; 130
 812:	79 07       	cpc	r23, r25
 814:	0c f0       	brlt	.+2      	; 0x818 <__pack_f+0x5e>
 816:	5b c0       	rjmp	.+182    	; 0x8ce <__pack_f+0x114>
 818:	22 e8       	ldi	r18, 0x82	; 130
 81a:	3f ef       	ldi	r19, 0xFF	; 255
 81c:	26 1b       	sub	r18, r22
 81e:	37 0b       	sbc	r19, r23
 820:	2a 31       	cpi	r18, 0x1A	; 26
 822:	31 05       	cpc	r19, r1
 824:	2c f0       	brlt	.+10     	; 0x830 <__pack_f+0x76>
 826:	20 e0       	ldi	r18, 0x00	; 0
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	40 e0       	ldi	r20, 0x00	; 0
 82c:	50 e0       	ldi	r21, 0x00	; 0
 82e:	2a c0       	rjmp	.+84     	; 0x884 <__pack_f+0xca>
 830:	b8 01       	movw	r22, r16
 832:	a7 01       	movw	r20, r14
 834:	02 2e       	mov	r0, r18
 836:	04 c0       	rjmp	.+8      	; 0x840 <__pack_f+0x86>
 838:	76 95       	lsr	r23
 83a:	67 95       	ror	r22
 83c:	57 95       	ror	r21
 83e:	47 95       	ror	r20
 840:	0a 94       	dec	r0
 842:	d2 f7       	brpl	.-12     	; 0x838 <__pack_f+0x7e>
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	a0 e0       	ldi	r26, 0x00	; 0
 84a:	b0 e0       	ldi	r27, 0x00	; 0
 84c:	04 c0       	rjmp	.+8      	; 0x856 <__pack_f+0x9c>
 84e:	88 0f       	add	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	aa 1f       	adc	r26, r26
 854:	bb 1f       	adc	r27, r27
 856:	2a 95       	dec	r18
 858:	d2 f7       	brpl	.-12     	; 0x84e <__pack_f+0x94>
 85a:	01 97       	sbiw	r24, 0x01	; 1
 85c:	a1 09       	sbc	r26, r1
 85e:	b1 09       	sbc	r27, r1
 860:	8e 21       	and	r24, r14
 862:	9f 21       	and	r25, r15
 864:	a0 23       	and	r26, r16
 866:	b1 23       	and	r27, r17
 868:	00 97       	sbiw	r24, 0x00	; 0
 86a:	a1 05       	cpc	r26, r1
 86c:	b1 05       	cpc	r27, r1
 86e:	21 f0       	breq	.+8      	; 0x878 <__pack_f+0xbe>
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	a0 e0       	ldi	r26, 0x00	; 0
 876:	b0 e0       	ldi	r27, 0x00	; 0
 878:	9a 01       	movw	r18, r20
 87a:	ab 01       	movw	r20, r22
 87c:	28 2b       	or	r18, r24
 87e:	39 2b       	or	r19, r25
 880:	4a 2b       	or	r20, r26
 882:	5b 2b       	or	r21, r27
 884:	da 01       	movw	r26, r20
 886:	c9 01       	movw	r24, r18
 888:	8f 77       	andi	r24, 0x7F	; 127
 88a:	90 70       	andi	r25, 0x00	; 0
 88c:	a0 70       	andi	r26, 0x00	; 0
 88e:	b0 70       	andi	r27, 0x00	; 0
 890:	80 34       	cpi	r24, 0x40	; 64
 892:	91 05       	cpc	r25, r1
 894:	a1 05       	cpc	r26, r1
 896:	b1 05       	cpc	r27, r1
 898:	39 f4       	brne	.+14     	; 0x8a8 <__pack_f+0xee>
 89a:	27 ff       	sbrs	r18, 7
 89c:	09 c0       	rjmp	.+18     	; 0x8b0 <__pack_f+0xf6>
 89e:	20 5c       	subi	r18, 0xC0	; 192
 8a0:	3f 4f       	sbci	r19, 0xFF	; 255
 8a2:	4f 4f       	sbci	r20, 0xFF	; 255
 8a4:	5f 4f       	sbci	r21, 0xFF	; 255
 8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <__pack_f+0xf6>
 8a8:	21 5c       	subi	r18, 0xC1	; 193
 8aa:	3f 4f       	sbci	r19, 0xFF	; 255
 8ac:	4f 4f       	sbci	r20, 0xFF	; 255
 8ae:	5f 4f       	sbci	r21, 0xFF	; 255
 8b0:	e0 e0       	ldi	r30, 0x00	; 0
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	20 30       	cpi	r18, 0x00	; 0
 8b6:	a0 e0       	ldi	r26, 0x00	; 0
 8b8:	3a 07       	cpc	r19, r26
 8ba:	a0 e0       	ldi	r26, 0x00	; 0
 8bc:	4a 07       	cpc	r20, r26
 8be:	a0 e4       	ldi	r26, 0x40	; 64
 8c0:	5a 07       	cpc	r21, r26
 8c2:	10 f0       	brcs	.+4      	; 0x8c8 <__pack_f+0x10e>
 8c4:	e1 e0       	ldi	r30, 0x01	; 1
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	79 01       	movw	r14, r18
 8ca:	8a 01       	movw	r16, r20
 8cc:	27 c0       	rjmp	.+78     	; 0x91c <__pack_f+0x162>
 8ce:	60 38       	cpi	r22, 0x80	; 128
 8d0:	71 05       	cpc	r23, r1
 8d2:	64 f5       	brge	.+88     	; 0x92c <__pack_f+0x172>
 8d4:	fb 01       	movw	r30, r22
 8d6:	e1 58       	subi	r30, 0x81	; 129
 8d8:	ff 4f       	sbci	r31, 0xFF	; 255
 8da:	d8 01       	movw	r26, r16
 8dc:	c7 01       	movw	r24, r14
 8de:	8f 77       	andi	r24, 0x7F	; 127
 8e0:	90 70       	andi	r25, 0x00	; 0
 8e2:	a0 70       	andi	r26, 0x00	; 0
 8e4:	b0 70       	andi	r27, 0x00	; 0
 8e6:	80 34       	cpi	r24, 0x40	; 64
 8e8:	91 05       	cpc	r25, r1
 8ea:	a1 05       	cpc	r26, r1
 8ec:	b1 05       	cpc	r27, r1
 8ee:	39 f4       	brne	.+14     	; 0x8fe <__pack_f+0x144>
 8f0:	e7 fe       	sbrs	r14, 7
 8f2:	0d c0       	rjmp	.+26     	; 0x90e <__pack_f+0x154>
 8f4:	80 e4       	ldi	r24, 0x40	; 64
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	a0 e0       	ldi	r26, 0x00	; 0
 8fa:	b0 e0       	ldi	r27, 0x00	; 0
 8fc:	04 c0       	rjmp	.+8      	; 0x906 <__pack_f+0x14c>
 8fe:	8f e3       	ldi	r24, 0x3F	; 63
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	a0 e0       	ldi	r26, 0x00	; 0
 904:	b0 e0       	ldi	r27, 0x00	; 0
 906:	e8 0e       	add	r14, r24
 908:	f9 1e       	adc	r15, r25
 90a:	0a 1f       	adc	r16, r26
 90c:	1b 1f       	adc	r17, r27
 90e:	17 ff       	sbrs	r17, 7
 910:	05 c0       	rjmp	.+10     	; 0x91c <__pack_f+0x162>
 912:	16 95       	lsr	r17
 914:	07 95       	ror	r16
 916:	f7 94       	ror	r15
 918:	e7 94       	ror	r14
 91a:	31 96       	adiw	r30, 0x01	; 1
 91c:	87 e0       	ldi	r24, 0x07	; 7
 91e:	16 95       	lsr	r17
 920:	07 95       	ror	r16
 922:	f7 94       	ror	r15
 924:	e7 94       	ror	r14
 926:	8a 95       	dec	r24
 928:	d1 f7       	brne	.-12     	; 0x91e <__pack_f+0x164>
 92a:	05 c0       	rjmp	.+10     	; 0x936 <__pack_f+0x17c>
 92c:	ee 24       	eor	r14, r14
 92e:	ff 24       	eor	r15, r15
 930:	87 01       	movw	r16, r14
 932:	ef ef       	ldi	r30, 0xFF	; 255
 934:	f0 e0       	ldi	r31, 0x00	; 0
 936:	6e 2f       	mov	r22, r30
 938:	67 95       	ror	r22
 93a:	66 27       	eor	r22, r22
 93c:	67 95       	ror	r22
 93e:	90 2f       	mov	r25, r16
 940:	9f 77       	andi	r25, 0x7F	; 127
 942:	d7 94       	ror	r13
 944:	dd 24       	eor	r13, r13
 946:	d7 94       	ror	r13
 948:	8e 2f       	mov	r24, r30
 94a:	86 95       	lsr	r24
 94c:	49 2f       	mov	r20, r25
 94e:	46 2b       	or	r20, r22
 950:	58 2f       	mov	r21, r24
 952:	5d 29       	or	r21, r13
 954:	b7 01       	movw	r22, r14
 956:	ca 01       	movw	r24, r20
 958:	1f 91       	pop	r17
 95a:	0f 91       	pop	r16
 95c:	ff 90       	pop	r15
 95e:	ef 90       	pop	r14
 960:	df 90       	pop	r13
 962:	08 95       	ret

00000964 <__unpack_f>:
 964:	fc 01       	movw	r30, r24
 966:	db 01       	movw	r26, r22
 968:	40 81       	ld	r20, Z
 96a:	51 81       	ldd	r21, Z+1	; 0x01
 96c:	22 81       	ldd	r18, Z+2	; 0x02
 96e:	62 2f       	mov	r22, r18
 970:	6f 77       	andi	r22, 0x7F	; 127
 972:	70 e0       	ldi	r23, 0x00	; 0
 974:	22 1f       	adc	r18, r18
 976:	22 27       	eor	r18, r18
 978:	22 1f       	adc	r18, r18
 97a:	93 81       	ldd	r25, Z+3	; 0x03
 97c:	89 2f       	mov	r24, r25
 97e:	88 0f       	add	r24, r24
 980:	82 2b       	or	r24, r18
 982:	28 2f       	mov	r18, r24
 984:	30 e0       	ldi	r19, 0x00	; 0
 986:	99 1f       	adc	r25, r25
 988:	99 27       	eor	r25, r25
 98a:	99 1f       	adc	r25, r25
 98c:	11 96       	adiw	r26, 0x01	; 1
 98e:	9c 93       	st	X, r25
 990:	11 97       	sbiw	r26, 0x01	; 1
 992:	21 15       	cp	r18, r1
 994:	31 05       	cpc	r19, r1
 996:	a9 f5       	brne	.+106    	; 0xa02 <__unpack_f+0x9e>
 998:	41 15       	cp	r20, r1
 99a:	51 05       	cpc	r21, r1
 99c:	61 05       	cpc	r22, r1
 99e:	71 05       	cpc	r23, r1
 9a0:	11 f4       	brne	.+4      	; 0x9a6 <__unpack_f+0x42>
 9a2:	82 e0       	ldi	r24, 0x02	; 2
 9a4:	37 c0       	rjmp	.+110    	; 0xa14 <__unpack_f+0xb0>
 9a6:	82 e8       	ldi	r24, 0x82	; 130
 9a8:	9f ef       	ldi	r25, 0xFF	; 255
 9aa:	13 96       	adiw	r26, 0x03	; 3
 9ac:	9c 93       	st	X, r25
 9ae:	8e 93       	st	-X, r24
 9b0:	12 97       	sbiw	r26, 0x02	; 2
 9b2:	9a 01       	movw	r18, r20
 9b4:	ab 01       	movw	r20, r22
 9b6:	67 e0       	ldi	r22, 0x07	; 7
 9b8:	22 0f       	add	r18, r18
 9ba:	33 1f       	adc	r19, r19
 9bc:	44 1f       	adc	r20, r20
 9be:	55 1f       	adc	r21, r21
 9c0:	6a 95       	dec	r22
 9c2:	d1 f7       	brne	.-12     	; 0x9b8 <__unpack_f+0x54>
 9c4:	83 e0       	ldi	r24, 0x03	; 3
 9c6:	8c 93       	st	X, r24
 9c8:	0d c0       	rjmp	.+26     	; 0x9e4 <__unpack_f+0x80>
 9ca:	22 0f       	add	r18, r18
 9cc:	33 1f       	adc	r19, r19
 9ce:	44 1f       	adc	r20, r20
 9d0:	55 1f       	adc	r21, r21
 9d2:	12 96       	adiw	r26, 0x02	; 2
 9d4:	8d 91       	ld	r24, X+
 9d6:	9c 91       	ld	r25, X
 9d8:	13 97       	sbiw	r26, 0x03	; 3
 9da:	01 97       	sbiw	r24, 0x01	; 1
 9dc:	13 96       	adiw	r26, 0x03	; 3
 9de:	9c 93       	st	X, r25
 9e0:	8e 93       	st	-X, r24
 9e2:	12 97       	sbiw	r26, 0x02	; 2
 9e4:	20 30       	cpi	r18, 0x00	; 0
 9e6:	80 e0       	ldi	r24, 0x00	; 0
 9e8:	38 07       	cpc	r19, r24
 9ea:	80 e0       	ldi	r24, 0x00	; 0
 9ec:	48 07       	cpc	r20, r24
 9ee:	80 e4       	ldi	r24, 0x40	; 64
 9f0:	58 07       	cpc	r21, r24
 9f2:	58 f3       	brcs	.-42     	; 0x9ca <__unpack_f+0x66>
 9f4:	14 96       	adiw	r26, 0x04	; 4
 9f6:	2d 93       	st	X+, r18
 9f8:	3d 93       	st	X+, r19
 9fa:	4d 93       	st	X+, r20
 9fc:	5c 93       	st	X, r21
 9fe:	17 97       	sbiw	r26, 0x07	; 7
 a00:	08 95       	ret
 a02:	2f 3f       	cpi	r18, 0xFF	; 255
 a04:	31 05       	cpc	r19, r1
 a06:	79 f4       	brne	.+30     	; 0xa26 <__unpack_f+0xc2>
 a08:	41 15       	cp	r20, r1
 a0a:	51 05       	cpc	r21, r1
 a0c:	61 05       	cpc	r22, r1
 a0e:	71 05       	cpc	r23, r1
 a10:	19 f4       	brne	.+6      	; 0xa18 <__unpack_f+0xb4>
 a12:	84 e0       	ldi	r24, 0x04	; 4
 a14:	8c 93       	st	X, r24
 a16:	08 95       	ret
 a18:	64 ff       	sbrs	r22, 4
 a1a:	03 c0       	rjmp	.+6      	; 0xa22 <__unpack_f+0xbe>
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	8c 93       	st	X, r24
 a20:	12 c0       	rjmp	.+36     	; 0xa46 <__unpack_f+0xe2>
 a22:	1c 92       	st	X, r1
 a24:	10 c0       	rjmp	.+32     	; 0xa46 <__unpack_f+0xe2>
 a26:	2f 57       	subi	r18, 0x7F	; 127
 a28:	30 40       	sbci	r19, 0x00	; 0
 a2a:	13 96       	adiw	r26, 0x03	; 3
 a2c:	3c 93       	st	X, r19
 a2e:	2e 93       	st	-X, r18
 a30:	12 97       	sbiw	r26, 0x02	; 2
 a32:	83 e0       	ldi	r24, 0x03	; 3
 a34:	8c 93       	st	X, r24
 a36:	87 e0       	ldi	r24, 0x07	; 7
 a38:	44 0f       	add	r20, r20
 a3a:	55 1f       	adc	r21, r21
 a3c:	66 1f       	adc	r22, r22
 a3e:	77 1f       	adc	r23, r23
 a40:	8a 95       	dec	r24
 a42:	d1 f7       	brne	.-12     	; 0xa38 <__unpack_f+0xd4>
 a44:	70 64       	ori	r23, 0x40	; 64
 a46:	14 96       	adiw	r26, 0x04	; 4
 a48:	4d 93       	st	X+, r20
 a4a:	5d 93       	st	X+, r21
 a4c:	6d 93       	st	X+, r22
 a4e:	7c 93       	st	X, r23
 a50:	17 97       	sbiw	r26, 0x07	; 7
 a52:	08 95       	ret

00000a54 <__divmodhi4>:
 a54:	97 fb       	bst	r25, 7
 a56:	09 2e       	mov	r0, r25
 a58:	07 26       	eor	r0, r23
 a5a:	0a d0       	rcall	.+20     	; 0xa70 <__divmodhi4_neg1>
 a5c:	77 fd       	sbrc	r23, 7
 a5e:	04 d0       	rcall	.+8      	; 0xa68 <__divmodhi4_neg2>
 a60:	0c d0       	rcall	.+24     	; 0xa7a <__udivmodhi4>
 a62:	06 d0       	rcall	.+12     	; 0xa70 <__divmodhi4_neg1>
 a64:	00 20       	and	r0, r0
 a66:	1a f4       	brpl	.+6      	; 0xa6e <__divmodhi4_exit>

00000a68 <__divmodhi4_neg2>:
 a68:	70 95       	com	r23
 a6a:	61 95       	neg	r22
 a6c:	7f 4f       	sbci	r23, 0xFF	; 255

00000a6e <__divmodhi4_exit>:
 a6e:	08 95       	ret

00000a70 <__divmodhi4_neg1>:
 a70:	f6 f7       	brtc	.-4      	; 0xa6e <__divmodhi4_exit>
 a72:	90 95       	com	r25
 a74:	81 95       	neg	r24
 a76:	9f 4f       	sbci	r25, 0xFF	; 255
 a78:	08 95       	ret

00000a7a <__udivmodhi4>:
 a7a:	aa 1b       	sub	r26, r26
 a7c:	bb 1b       	sub	r27, r27
 a7e:	51 e1       	ldi	r21, 0x11	; 17
 a80:	07 c0       	rjmp	.+14     	; 0xa90 <__udivmodhi4_ep>

00000a82 <__udivmodhi4_loop>:
 a82:	aa 1f       	adc	r26, r26
 a84:	bb 1f       	adc	r27, r27
 a86:	a6 17       	cp	r26, r22
 a88:	b7 07       	cpc	r27, r23
 a8a:	10 f0       	brcs	.+4      	; 0xa90 <__udivmodhi4_ep>
 a8c:	a6 1b       	sub	r26, r22
 a8e:	b7 0b       	sbc	r27, r23

00000a90 <__udivmodhi4_ep>:
 a90:	88 1f       	adc	r24, r24
 a92:	99 1f       	adc	r25, r25
 a94:	5a 95       	dec	r21
 a96:	a9 f7       	brne	.-22     	; 0xa82 <__udivmodhi4_loop>
 a98:	80 95       	com	r24
 a9a:	90 95       	com	r25
 a9c:	bc 01       	movw	r22, r24
 a9e:	cd 01       	movw	r24, r26
 aa0:	08 95       	ret

00000aa2 <__prologue_saves__>:
 aa2:	2f 92       	push	r2
 aa4:	3f 92       	push	r3
 aa6:	4f 92       	push	r4
 aa8:	5f 92       	push	r5
 aaa:	6f 92       	push	r6
 aac:	7f 92       	push	r7
 aae:	8f 92       	push	r8
 ab0:	9f 92       	push	r9
 ab2:	af 92       	push	r10
 ab4:	bf 92       	push	r11
 ab6:	cf 92       	push	r12
 ab8:	df 92       	push	r13
 aba:	ef 92       	push	r14
 abc:	ff 92       	push	r15
 abe:	0f 93       	push	r16
 ac0:	1f 93       	push	r17
 ac2:	cf 93       	push	r28
 ac4:	df 93       	push	r29
 ac6:	cd b7       	in	r28, 0x3d	; 61
 ac8:	de b7       	in	r29, 0x3e	; 62
 aca:	ca 1b       	sub	r28, r26
 acc:	db 0b       	sbc	r29, r27
 ace:	0f b6       	in	r0, 0x3f	; 63
 ad0:	f8 94       	cli
 ad2:	de bf       	out	0x3e, r29	; 62
 ad4:	0f be       	out	0x3f, r0	; 63
 ad6:	cd bf       	out	0x3d, r28	; 61
 ad8:	09 94       	ijmp

00000ada <__epilogue_restores__>:
 ada:	2a 88       	ldd	r2, Y+18	; 0x12
 adc:	39 88       	ldd	r3, Y+17	; 0x11
 ade:	48 88       	ldd	r4, Y+16	; 0x10
 ae0:	5f 84       	ldd	r5, Y+15	; 0x0f
 ae2:	6e 84       	ldd	r6, Y+14	; 0x0e
 ae4:	7d 84       	ldd	r7, Y+13	; 0x0d
 ae6:	8c 84       	ldd	r8, Y+12	; 0x0c
 ae8:	9b 84       	ldd	r9, Y+11	; 0x0b
 aea:	aa 84       	ldd	r10, Y+10	; 0x0a
 aec:	b9 84       	ldd	r11, Y+9	; 0x09
 aee:	c8 84       	ldd	r12, Y+8	; 0x08
 af0:	df 80       	ldd	r13, Y+7	; 0x07
 af2:	ee 80       	ldd	r14, Y+6	; 0x06
 af4:	fd 80       	ldd	r15, Y+5	; 0x05
 af6:	0c 81       	ldd	r16, Y+4	; 0x04
 af8:	1b 81       	ldd	r17, Y+3	; 0x03
 afa:	aa 81       	ldd	r26, Y+2	; 0x02
 afc:	b9 81       	ldd	r27, Y+1	; 0x01
 afe:	ce 0f       	add	r28, r30
 b00:	d1 1d       	adc	r29, r1
 b02:	0f b6       	in	r0, 0x3f	; 63
 b04:	f8 94       	cli
 b06:	de bf       	out	0x3e, r29	; 62
 b08:	0f be       	out	0x3f, r0	; 63
 b0a:	cd bf       	out	0x3d, r28	; 61
 b0c:	ed 01       	movw	r28, r26
 b0e:	08 95       	ret

00000b10 <_exit>:
 b10:	f8 94       	cli

00000b12 <__stop_program>:
 b12:	ff cf       	rjmp	.-2      	; 0xb12 <__stop_program>
