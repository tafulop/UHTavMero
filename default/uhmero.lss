
uhmero.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00001080  00001114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001080  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080020c  0080020c  00001220  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003da  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001963  00000000  00000000  000016da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c0d  00000000  00000000  0000303d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012d7  00000000  00000000  00003c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  00004f24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000526  00000000  00000000  00005274  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000627  00000000  00000000  0000579a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 c1 03 	jmp	0x782	; 0x782 <__vector_2>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_9>
      28:	0c 94 a3 04 	jmp	0x946	; 0x946 <__vector_10>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 23 04 	jmp	0x846	; 0x846 <__vector_25>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e8       	ldi	r30, 0x80	; 128
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 30       	cpi	r26, 0x0C	; 12
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	ac e0       	ldi	r26, 0x0C	; 12
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 31       	cpi	r26, 0x1A	; 26
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 48 03 	call	0x690	; 0x690 <main>
      c6:	0c 94 3e 08 	jmp	0x107c	; 0x107c <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <lcd_clock>:
	lcd_clock();
}

void lcd_clock()
{
	LCD_CMD_PORT |= (1<<LCD_EN);
      ce:	e2 e6       	ldi	r30, 0x62	; 98
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	88 60       	ori	r24, 0x08	; 8
      d6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      d8:	20 ea       	ldi	r18, 0xA0	; 160
      da:	3f e0       	ldi	r19, 0x0F	; 15
      dc:	c9 01       	movw	r24, r18
      de:	01 97       	sbiw	r24, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <lcd_clock+0x10>
	_delay_ms(1);
	LCD_CMD_PORT &= ~(1<<LCD_EN);
      e2:	80 81       	ld	r24, Z
      e4:	87 7f       	andi	r24, 0xF7	; 247
      e6:	80 83       	st	Z, r24
      e8:	c9 01       	movw	r24, r18
      ea:	01 97       	sbiw	r24, 0x01	; 1
      ec:	f1 f7       	brne	.-4      	; 0xea <lcd_clock+0x1c>
	_delay_ms(1);
}
      ee:	08 95       	ret

000000f0 <lcd_cmd>:
	LCD_DATA_PORT |= ((data<<4)&0xF0);
	lcd_clock();
}

void lcd_cmd(uint8_t cmd)
{
      f0:	1f 93       	push	r17
      f2:	18 2f       	mov	r17, r24
	LCD_CMD_PORT &= ~(1<<LCD_RS); //parancsot küldünk
      f4:	e2 e6       	ldi	r30, 0x62	; 98
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	80 81       	ld	r24, Z
      fa:	8d 7f       	andi	r24, 0xFD	; 253
      fc:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_RW);
      fe:	80 81       	ld	r24, Z
     100:	8b 7f       	andi	r24, 0xFB	; 251
     102:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_EN);
     104:	80 81       	ld	r24, Z
     106:	87 7f       	andi	r24, 0xF7	; 247
     108:	80 83       	st	Z, r24

	LCD_DATA_PORT &= 0x0F;
     10a:	83 b1       	in	r24, 0x03	; 3
     10c:	8f 70       	andi	r24, 0x0F	; 15
     10e:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= (cmd&0xF0);
     110:	93 b1       	in	r25, 0x03	; 3
     112:	81 2f       	mov	r24, r17
     114:	80 7f       	andi	r24, 0xF0	; 240
     116:	89 2b       	or	r24, r25
     118:	83 b9       	out	0x03, r24	; 3
	lcd_clock();
     11a:	0e 94 67 00 	call	0xce	; 0xce <lcd_clock>
	LCD_DATA_PORT &= 0x0F;
     11e:	83 b1       	in	r24, 0x03	; 3
     120:	8f 70       	andi	r24, 0x0F	; 15
     122:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= ((cmd<<4)&0xF0);
     124:	83 b1       	in	r24, 0x03	; 3
     126:	12 95       	swap	r17
     128:	10 7f       	andi	r17, 0xF0	; 240
     12a:	81 2b       	or	r24, r17
     12c:	83 b9       	out	0x03, r24	; 3
	lcd_clock();
     12e:	0e 94 67 00 	call	0xce	; 0xce <lcd_clock>
}
     132:	1f 91       	pop	r17
     134:	08 95       	ret

00000136 <lcd_clr>:
}


void lcd_clr()
{
	lcd_cmd(0x01);
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
}
     13c:	08 95       	ret

0000013e <lcd_put_data>:

void lcd_put_data(uint8_t data)
{
     13e:	1f 93       	push	r17
     140:	18 2f       	mov	r17, r24
	LCD_CMD_PORT |= (1<<LCD_RS); //adatot küldünk
     142:	e2 e6       	ldi	r30, 0x62	; 98
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	82 60       	ori	r24, 0x02	; 2
     14a:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_RW);
     14c:	80 81       	ld	r24, Z
     14e:	8b 7f       	andi	r24, 0xFB	; 251
     150:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_EN);
     152:	80 81       	ld	r24, Z
     154:	87 7f       	andi	r24, 0xF7	; 247
     156:	80 83       	st	Z, r24

	LCD_DATA_PORT &= 0x0F;
     158:	83 b1       	in	r24, 0x03	; 3
     15a:	8f 70       	andi	r24, 0x0F	; 15
     15c:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= (data&0xF0);
     15e:	93 b1       	in	r25, 0x03	; 3
     160:	81 2f       	mov	r24, r17
     162:	80 7f       	andi	r24, 0xF0	; 240
     164:	89 2b       	or	r24, r25
     166:	83 b9       	out	0x03, r24	; 3
	lcd_clock();
     168:	0e 94 67 00 	call	0xce	; 0xce <lcd_clock>
	LCD_DATA_PORT &= 0x0F;
     16c:	83 b1       	in	r24, 0x03	; 3
     16e:	8f 70       	andi	r24, 0x0F	; 15
     170:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= ((data<<4)&0xF0);
     172:	83 b1       	in	r24, 0x03	; 3
     174:	12 95       	swap	r17
     176:	10 7f       	andi	r17, 0xF0	; 240
     178:	81 2b       	or	r24, r17
     17a:	83 b9       	out	0x03, r24	; 3
	lcd_clock();
     17c:	0e 94 67 00 	call	0xce	; 0xce <lcd_clock>
}
     180:	1f 91       	pop	r17
     182:	08 95       	ret

00000184 <lcd_init>:
void lcd_clr();



void lcd_init()
{
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
	LCD_DATA_DDR |= 0xF0;
     188:	82 b1       	in	r24, 0x02	; 2
     18a:	80 6f       	ori	r24, 0xF0	; 240
     18c:	82 b9       	out	0x02, r24	; 2
	LCD_CMD_DDR |= ((1<<LCD_RS)
     18e:	e1 e6       	ldi	r30, 0x61	; 97
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 81       	ld	r24, Z
     194:	8e 60       	ori	r24, 0x0E	; 14
     196:	80 83       	st	Z, r24
	|(1<<LCD_RW)
	|(1<<LCD_EN));

	LCD_CMD_PORT &= ~(1<<LCD_RW);
     198:	e2 e6       	ldi	r30, 0x62	; 98
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	8b 7f       	andi	r24, 0xFB	; 251
     1a0:	80 83       	st	Z, r24
	//konfig

	lcd_cmd(0x30);
     1a2:	80 e3       	ldi	r24, 0x30	; 48
     1a4:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
     1a8:	80 e2       	ldi	r24, 0x20	; 32
     1aa:	9e e4       	ldi	r25, 0x4E	; 78
     1ac:	01 97       	sbiw	r24, 0x01	; 1
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_init+0x28>
	_delay_ms(5);
	lcd_cmd(0x30);
     1b0:	80 e3       	ldi	r24, 0x30	; 48
     1b2:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
     1b6:	00 ea       	ldi	r16, 0xA0	; 160
     1b8:	1f e0       	ldi	r17, 0x0F	; 15
     1ba:	c8 01       	movw	r24, r16
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_init+0x38>
	_delay_ms(1);
	lcd_cmd(0x30);
     1c0:	80 e3       	ldi	r24, 0x30	; 48
     1c2:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
     1c6:	c8 01       	movw	r24, r16
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_init+0x44>
	_delay_ms(1);
	lcd_cmd(0x20);
     1cc:	80 e2       	ldi	r24, 0x20	; 32
     1ce:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
     1d2:	c8 01       	movw	r24, r16
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x50>
	_delay_ms(1);
	lcd_clock();
     1d8:	0e 94 67 00 	call	0xce	; 0xce <lcd_clock>
	lcd_clock();
     1dc:	0e 94 67 00 	call	0xce	; 0xce <lcd_clock>
	lcd_clock();
     1e0:	0e 94 67 00 	call	0xce	; 0xce <lcd_clock>

	//LCD konf
	lcd_cmd(0x28);
     1e4:	88 e2       	ldi	r24, 0x28	; 40
     1e6:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(0x0C);
     1ea:	8c e0       	ldi	r24, 0x0C	; 12
     1ec:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(0x06);
     1f0:	86 e0       	ldi	r24, 0x06	; 6
     1f2:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(0x01);
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(0x02);
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
}
     202:	1f 91       	pop	r17
     204:	0f 91       	pop	r16
     206:	08 95       	ret

00000208 <lcd_put_bin>:


}

void lcd_put_bin(uint8_t number)
{
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	c0 e0       	ldi	r28, 0x00	; 0
     216:	d0 e0       	ldi	r29, 0x00	; 0
unsigned char bin_string[8];


	for(iterator = 0;iterator<=7;iterator++)
	{
		if(number & (128>>iterator))
     218:	90 e8       	ldi	r25, 0x80	; 128
     21a:	e9 2e       	mov	r14, r25
     21c:	f1 2c       	mov	r15, r1
     21e:	08 2f       	mov	r16, r24
     220:	10 e0       	ldi	r17, 0x00	; 0
     222:	c7 01       	movw	r24, r14
     224:	0c 2e       	mov	r0, r28
     226:	02 c0       	rjmp	.+4      	; 0x22c <lcd_put_bin+0x24>
     228:	95 95       	asr	r25
     22a:	87 95       	ror	r24
     22c:	0a 94       	dec	r0
     22e:	e2 f7       	brpl	.-8      	; 0x228 <lcd_put_bin+0x20>
     230:	80 23       	and	r24, r16
     232:	91 23       	and	r25, r17
     234:	89 2b       	or	r24, r25
     236:	11 f0       	breq	.+4      	; 0x23c <lcd_put_bin+0x34>
		{
			lcd_put_data('1');
     238:	81 e3       	ldi	r24, 0x31	; 49
     23a:	01 c0       	rjmp	.+2      	; 0x23e <lcd_put_bin+0x36>
		}		
		else
		{
			lcd_put_data('0');
     23c:	80 e3       	ldi	r24, 0x30	; 48
     23e:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
     242:	21 96       	adiw	r28, 0x01	; 1

unsigned char iterator;
unsigned char bin_string[8];


	for(iterator = 0;iterator<=7;iterator++)
     244:	c8 30       	cpi	r28, 0x08	; 8
     246:	d1 05       	cpc	r29, r1
     248:	61 f7       	brne	.-40     	; 0x222 <lcd_put_bin+0x1a>
		{
			lcd_put_data('0');
		}
	}

}
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
     252:	ff 90       	pop	r15
     254:	ef 90       	pop	r14
     256:	08 95       	ret

00000258 <lcd_put_int>:


void lcd_put_int(uint16_t num)
{
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	ec 01       	movw	r28, r24
	if(num>9999)lcd_put_data('0'+num/10000%10);
     25e:	87 e2       	ldi	r24, 0x27	; 39
     260:	c0 31       	cpi	r28, 0x10	; 16
     262:	d8 07       	cpc	r29, r24
     264:	70 f0       	brcs	.+28     	; 0x282 <lcd_put_int+0x2a>
     266:	ce 01       	movw	r24, r28
     268:	60 e1       	ldi	r22, 0x10	; 16
     26a:	77 e2       	ldi	r23, 0x27	; 39
     26c:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     270:	cb 01       	movw	r24, r22
     272:	6a e0       	ldi	r22, 0x0A	; 10
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     27a:	80 5d       	subi	r24, 0xD0	; 208
     27c:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
     280:	04 c0       	rjmp	.+8      	; 0x28a <lcd_put_int+0x32>
	if(num>999)lcd_put_data('0'+num/1000%10);
     282:	83 e0       	ldi	r24, 0x03	; 3
     284:	c8 3e       	cpi	r28, 0xE8	; 232
     286:	d8 07       	cpc	r29, r24
     288:	70 f0       	brcs	.+28     	; 0x2a6 <lcd_put_int+0x4e>
     28a:	ce 01       	movw	r24, r28
     28c:	68 ee       	ldi	r22, 0xE8	; 232
     28e:	73 e0       	ldi	r23, 0x03	; 3
     290:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     294:	cb 01       	movw	r24, r22
     296:	6a e0       	ldi	r22, 0x0A	; 10
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     29e:	80 5d       	subi	r24, 0xD0	; 208
     2a0:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
     2a4:	03 c0       	rjmp	.+6      	; 0x2ac <lcd_put_int+0x54>
	if(num>99)lcd_put_data('0'+num/100%10);
     2a6:	c4 36       	cpi	r28, 0x64	; 100
     2a8:	d1 05       	cpc	r29, r1
     2aa:	70 f0       	brcs	.+28     	; 0x2c8 <lcd_put_int+0x70>
     2ac:	ce 01       	movw	r24, r28
     2ae:	64 e6       	ldi	r22, 0x64	; 100
     2b0:	70 e0       	ldi	r23, 0x00	; 0
     2b2:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     2b6:	cb 01       	movw	r24, r22
     2b8:	6a e0       	ldi	r22, 0x0A	; 10
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     2c0:	80 5d       	subi	r24, 0xD0	; 208
     2c2:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
     2c6:	03 c0       	rjmp	.+6      	; 0x2ce <lcd_put_int+0x76>
	if(num>9)lcd_put_data('0'+num/10%10);
     2c8:	ca 30       	cpi	r28, 0x0A	; 10
     2ca:	d1 05       	cpc	r29, r1
     2cc:	68 f0       	brcs	.+26     	; 0x2e8 <lcd_put_int+0x90>
     2ce:	ce 01       	movw	r24, r28
     2d0:	6a e0       	ldi	r22, 0x0A	; 10
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     2d8:	cb 01       	movw	r24, r22
     2da:	6a e0       	ldi	r22, 0x0A	; 10
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     2e2:	80 5d       	subi	r24, 0xD0	; 208
     2e4:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data('0'+num%10);
     2e8:	ce 01       	movw	r24, r28
     2ea:	6a e0       	ldi	r22, 0x0A	; 10
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     2f2:	80 5d       	subi	r24, 0xD0	; 208
     2f4:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
}
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <lcd_put_freq>:

void lcd_put_freq(uint16_t num)
{
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	ec 01       	movw	r28, r24
	if(num>9999)lcd_put_data('0'+num/10000%10);
     304:	87 e2       	ldi	r24, 0x27	; 39
     306:	c0 31       	cpi	r28, 0x10	; 16
     308:	d8 07       	cpc	r29, r24
     30a:	70 f0       	brcs	.+28     	; 0x328 <lcd_put_freq+0x2a>
     30c:	ce 01       	movw	r24, r28
     30e:	60 e1       	ldi	r22, 0x10	; 16
     310:	77 e2       	ldi	r23, 0x27	; 39
     312:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     316:	cb 01       	movw	r24, r22
     318:	6a e0       	ldi	r22, 0x0A	; 10
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     320:	80 5d       	subi	r24, 0xD0	; 208
     322:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
     326:	04 c0       	rjmp	.+8      	; 0x330 <lcd_put_freq+0x32>
	if(num>999)lcd_put_data('0'+num/1000%10);
     328:	83 e0       	ldi	r24, 0x03	; 3
     32a:	c8 3e       	cpi	r28, 0xE8	; 232
     32c:	d8 07       	cpc	r29, r24
     32e:	70 f0       	brcs	.+28     	; 0x34c <lcd_put_freq+0x4e>
     330:	ce 01       	movw	r24, r28
     332:	68 ee       	ldi	r22, 0xE8	; 232
     334:	73 e0       	ldi	r23, 0x03	; 3
     336:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     33a:	cb 01       	movw	r24, r22
     33c:	6a e0       	ldi	r22, 0x0A	; 10
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     344:	80 5d       	subi	r24, 0xD0	; 208
     346:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
     34a:	03 c0       	rjmp	.+6      	; 0x352 <lcd_put_freq+0x54>
	if(num>99)lcd_put_data('0'+num/100%10);
     34c:	c4 36       	cpi	r28, 0x64	; 100
     34e:	d1 05       	cpc	r29, r1
     350:	68 f0       	brcs	.+26     	; 0x36c <lcd_put_freq+0x6e>
     352:	ce 01       	movw	r24, r28
     354:	64 e6       	ldi	r22, 0x64	; 100
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     35c:	cb 01       	movw	r24, r22
     35e:	6a e0       	ldi	r22, 0x0A	; 10
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     366:	80 5d       	subi	r24, 0xD0	; 208
     368:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data('0'+num/10%10);
     36c:	ce 01       	movw	r24, r28
     36e:	6a e0       	ldi	r22, 0x0A	; 10
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     376:	cb 01       	movw	r24, r22
     378:	6a e0       	ldi	r22, 0x0A	; 10
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     380:	80 5d       	subi	r24, 0xD0	; 208
     382:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data('.');
     386:	8e e2       	ldi	r24, 0x2E	; 46
     388:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data('0'+num%10);
     38c:	ce 01       	movw	r24, r28
     38e:	6a e0       	ldi	r22, 0x0A	; 10
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__udivmodhi4>
     396:	80 5d       	subi	r24, 0xD0	; 208
     398:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
}
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <lcd_goto_yx>:

void lcd_goto_yx(uint8_t y, uint8_t x)
{
	switch(y)
     3a2:	81 30       	cpi	r24, 0x01	; 1
     3a4:	51 f0       	breq	.+20     	; 0x3ba <lcd_goto_yx+0x18>
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	28 f0       	brcs	.+10     	; 0x3b4 <lcd_goto_yx+0x12>
     3aa:	82 30       	cpi	r24, 0x02	; 2
     3ac:	49 f0       	breq	.+18     	; 0x3c0 <lcd_goto_yx+0x1e>
     3ae:	83 30       	cpi	r24, 0x03	; 3
     3b0:	61 f4       	brne	.+24     	; 0x3ca <lcd_goto_yx+0x28>
     3b2:	09 c0       	rjmp	.+18     	; 0x3c6 <lcd_goto_yx+0x24>
	{
		case 0: {y= 0x00 + 0x80 + x;break;}
     3b4:	86 2f       	mov	r24, r22
     3b6:	80 58       	subi	r24, 0x80	; 128
     3b8:	08 c0       	rjmp	.+16     	; 0x3ca <lcd_goto_yx+0x28>
		case 1: {y= 0x40 + 0x80 + x;break;}
     3ba:	86 2f       	mov	r24, r22
     3bc:	80 54       	subi	r24, 0x40	; 64
     3be:	05 c0       	rjmp	.+10     	; 0x3ca <lcd_goto_yx+0x28>
		case 2: {y= 0x10 + 0x80 + x;break;}
     3c0:	86 2f       	mov	r24, r22
     3c2:	80 57       	subi	r24, 0x70	; 112
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <lcd_goto_yx+0x28>
		case 3: {y= 0x50 + 0x80 + x;break;}
     3c6:	86 2f       	mov	r24, r22
     3c8:	80 53       	subi	r24, 0x30	; 48

		default: break;
	}
	lcd_cmd(y);
     3ca:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
}
     3ce:	08 95       	ret

000003d0 <lcd_put_string>:
	LCD_CMD_PORT &= ~(1<<LCD_EN);
	_delay_ms(1);
}

void lcd_put_string(uint8_t *p)
{
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	ec 01       	movw	r28, r24
     3d8:	10 e0       	ldi	r17, 0x00	; 0
     3da:	1a c0       	rjmp	.+52     	; 0x410 <lcd_put_string+0x40>
unsigned char counter = 0;

	while(*p)
	{
		lcd_put_data(*p++);
     3dc:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>

		counter++;
     3e0:	1f 5f       	subi	r17, 0xFF	; 255
		
		//lcd_goto_yx(2,0);
		
		switch(counter)
     3e2:	1f 31       	cpi	r17, 0x1F	; 31
     3e4:	61 f0       	breq	.+24     	; 0x3fe <lcd_put_string+0x2e>
     3e6:	10 32       	cpi	r17, 0x20	; 32
     3e8:	18 f4       	brcc	.+6      	; 0x3f0 <lcd_put_string+0x20>
     3ea:	1f 30       	cpi	r17, 0x0F	; 15
     3ec:	81 f4       	brne	.+32     	; 0x40e <lcd_put_string+0x3e>
     3ee:	05 c0       	rjmp	.+10     	; 0x3fa <lcd_put_string+0x2a>
     3f0:	1f 32       	cpi	r17, 0x2F	; 47
     3f2:	39 f0       	breq	.+14     	; 0x402 <lcd_put_string+0x32>
     3f4:	1f 33       	cpi	r17, 0x3F	; 63
     3f6:	59 f4       	brne	.+22     	; 0x40e <lcd_put_string+0x3e>
     3f8:	06 c0       	rjmp	.+12     	; 0x406 <lcd_put_string+0x36>
		{
		case 15: 	lcd_goto_yx(1,0);
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	05 c0       	rjmp	.+10     	; 0x408 <lcd_put_string+0x38>
					break;
		case 31: 	lcd_goto_yx(2,0);
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	03 c0       	rjmp	.+6      	; 0x408 <lcd_put_string+0x38>
					break;
		case 47: 	lcd_goto_yx(3,0);
     402:	83 e0       	ldi	r24, 0x03	; 3
     404:	01 c0       	rjmp	.+2      	; 0x408 <lcd_put_string+0x38>
					break;
		case 63: 	lcd_goto_yx(0,0);
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd_goto_yx>
{
unsigned char counter = 0;

	while(*p)
	{
		lcd_put_data(*p++);
     40e:	21 96       	adiw	r28, 0x01	; 1

void lcd_put_string(uint8_t *p)
{
unsigned char counter = 0;

	while(*p)
     410:	88 81       	ld	r24, Y
     412:	88 23       	and	r24, r24
     414:	19 f7       	brne	.-58     	; 0x3dc <lcd_put_string+0xc>
					break;
		}	
	}


}
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	08 95       	ret

0000041e <lcd_clr_line>:
	lcd_cmd(0x02);
}


void lcd_clr_line(unsigned char line)
{
     41e:	1f 93       	push	r17
unsigned char i;

lcd_goto_yx(line,0);
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd_goto_yx>
     426:	10 e0       	ldi	r17, 0x00	; 0

	for(i=0;i<15;i++)
	{
		lcd_put_data(' ');
     428:	80 e2       	ldi	r24, 0x20	; 32
     42a:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
{
unsigned char i;

lcd_goto_yx(line,0);

	for(i=0;i<15;i++)
     42e:	1f 5f       	subi	r17, 0xFF	; 255
     430:	1f 30       	cpi	r17, 0x0F	; 15
     432:	d1 f7       	brne	.-12     	; 0x428 <lcd_clr_line+0xa>
	{
		lcd_put_data(' ');
	}
}
     434:	1f 91       	pop	r17
     436:	08 95       	ret

00000438 <CreateCGram>:
	lcd_cmd(y);
}

void CreateCGram()
{
	lcd_cmd(0x40+(0<<3));	//címek : 44..
     438:	80 e4       	ldi	r24, 0x40	; 64
     43a:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>

	lcd_put_data(0b00001010);
     43e:	8a e0       	ldi	r24, 0x0A	; 10
     440:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00011111);
     444:	8f e1       	ldi	r24, 0x1F	; 31
     446:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00011111);
     44a:	8f e1       	ldi	r24, 0x1F	; 31
     44c:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00001110);
     450:	8e e0       	ldi	r24, 0x0E	; 14
     452:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00000100);
     456:	84 e0       	ldi	r24, 0x04	; 4
     458:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00000000);
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00000000);
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00000000);
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>

	lcd_cmd(0x80);
     46e:	80 e8       	ldi	r24, 0x80	; 128
     470:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>

	lcd_cmd(0x40+(1<<3));
     474:	88 e4       	ldi	r24, 0x48	; 72
     476:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>

	lcd_put_data(0b00001100);
     47a:	8c e0       	ldi	r24, 0x0C	; 12
     47c:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00011110);
     480:	8e e1       	ldi	r24, 0x1E	; 30
     482:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00001100);
     486:	8c e0       	ldi	r24, 0x0C	; 12
     488:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00011110);
     48c:	8e e1       	ldi	r24, 0x1E	; 30
     48e:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00001100);
     492:	8c e0       	ldi	r24, 0x0C	; 12
     494:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00001100);
     498:	8c e0       	ldi	r24, 0x0C	; 12
     49a:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00010010);
     49e:	82 e1       	ldi	r24, 0x12	; 18
     4a0:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>
	lcd_put_data(0b00011011);
     4a4:	8b e1       	ldi	r24, 0x1B	; 27
     4a6:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_put_data>

	lcd_cmd(0x80);
     4aa:	80 e8       	ldi	r24, 0x80	; 128
     4ac:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
}
     4b0:	08 95       	ret

000004b2 <pushbutton_init>:

void pushbutton_init();

void pushbutton_init()
{
	DDRG |= 0x1F;
     4b2:	e4 e6       	ldi	r30, 0x64	; 100
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	8f 61       	ori	r24, 0x1F	; 31
     4ba:	80 83       	st	Z, r24
}
     4bc:	08 95       	ret

000004be <led_init>:



void led_init()
{
	DDRB |= 0xF0;	// PORTB out
     4be:	87 b3       	in	r24, 0x17	; 23
     4c0:	80 6f       	ori	r24, 0xF0	; 240
     4c2:	87 bb       	out	0x17, r24	; 23
	DDRD |= 0xF0;	// PORTD out
     4c4:	81 b3       	in	r24, 0x11	; 17
     4c6:	80 6f       	ori	r24, 0xF0	; 240
     4c8:	81 bb       	out	0x11, r24	; 17
}
     4ca:	08 95       	ret

000004cc <led_out>:

void led_out(unsigned char data)
{
	PORTD &= 0x0F;
     4cc:	92 b3       	in	r25, 0x12	; 18
     4ce:	9f 70       	andi	r25, 0x0F	; 15
     4d0:	92 bb       	out	0x12, r25	; 18
	PORTB &= 0x0F;
     4d2:	98 b3       	in	r25, 0x18	; 24
     4d4:	9f 70       	andi	r25, 0x0F	; 15
     4d6:	98 bb       	out	0x18, r25	; 24
	
	PORTD |= (data & 0xF0);
     4d8:	22 b3       	in	r18, 0x12	; 18
     4da:	98 2f       	mov	r25, r24
     4dc:	90 7f       	andi	r25, 0xF0	; 240
     4de:	92 2b       	or	r25, r18
     4e0:	92 bb       	out	0x12, r25	; 18
	PORTB |= (data & 0x0F)<<4;
     4e2:	98 b3       	in	r25, 0x18	; 24
     4e4:	82 95       	swap	r24
     4e6:	80 7f       	andi	r24, 0xF0	; 240
     4e8:	98 2b       	or	r25, r24
     4ea:	98 bb       	out	0x18, r25	; 24
}
     4ec:	08 95       	ret

000004ee <segment_init>:



void segment_init()
{
	DDRA |= 0xFF;
     4ee:	8a b3       	in	r24, 0x1a	; 26
     4f0:	8f ef       	ldi	r24, 0xFF	; 255
     4f2:	8a bb       	out	0x1a, r24	; 26
}
     4f4:	08 95       	ret

000004f6 <segment_display>:

void segment_display()
{
static unsigned char iterator,data_address;

PORTA = 0;	// en | _ _ _ | data
     4f6:	1b ba       	out	0x1b, r1	; 27
PORTA |= 0x80|(iterator++<<4)|segment_data[data_address--]; 
     4f8:	2b b3       	in	r18, 0x1b	; 27
     4fa:	90 91 19 02 	lds	r25, 0x0219
     4fe:	30 91 18 02 	lds	r19, 0x0218
     502:	e3 2f       	mov	r30, r19
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	e4 5f       	subi	r30, 0xF4	; 244
     508:	fd 4f       	sbci	r31, 0xFD	; 253
     50a:	40 81       	ld	r20, Z
     50c:	20 68       	ori	r18, 0x80	; 128
     50e:	89 2f       	mov	r24, r25
     510:	82 95       	swap	r24
     512:	80 7f       	andi	r24, 0xF0	; 240
     514:	82 2b       	or	r24, r18
     516:	84 2b       	or	r24, r20
     518:	8b bb       	out	0x1b, r24	; 27
     51a:	9f 5f       	subi	r25, 0xFF	; 255
     51c:	90 93 19 02 	sts	0x0219, r25
     520:	91 50       	subi	r25, 0x01	; 1
     522:	31 50       	subi	r19, 0x01	; 1
     524:	30 93 18 02 	sts	0x0218, r19

	if(iterator >= 	4 || iterator < 1)
     528:	93 30       	cpi	r25, 0x03	; 3
     52a:	28 f0       	brcs	.+10     	; 0x536 <segment_display+0x40>
	{
		iterator = 0;
     52c:	10 92 19 02 	sts	0x0219, r1
		data_address = 3;
     530:	83 e0       	ldi	r24, 0x03	; 3
     532:	80 93 18 02 	sts	0x0218, r24
     536:	08 95       	ret

00000538 <segment_put_int>:
}



void segment_put_int(int data)
{
     538:	9c 01       	movw	r18, r24
	if(data <= 9999 && data >= 0)
     53a:	87 e2       	ldi	r24, 0x27	; 39
     53c:	20 31       	cpi	r18, 0x10	; 16
     53e:	38 07       	cpc	r19, r24
     540:	58 f5       	brcc	.+86     	; 0x598 <segment_put_int+0x60>
	{
		unsigned char temp;
		temp = (data/1000)%10;
     542:	c9 01       	movw	r24, r18
     544:	68 ee       	ldi	r22, 0xE8	; 232
     546:	73 e0       	ldi	r23, 0x03	; 3
     548:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__divmodhi4>
     54c:	cb 01       	movw	r24, r22
     54e:	6a e0       	ldi	r22, 0x0A	; 10
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__divmodhi4>
		segment_data[0] = temp;		
     556:	80 93 0c 02 	sts	0x020C, r24
		temp = (data/100)%10;
     55a:	c9 01       	movw	r24, r18
     55c:	64 e6       	ldi	r22, 0x64	; 100
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__divmodhi4>
     564:	cb 01       	movw	r24, r22
     566:	6a e0       	ldi	r22, 0x0A	; 10
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__divmodhi4>
		segment_data[1] = temp;
     56e:	80 93 0d 02 	sts	0x020D, r24
		temp = (data/10)%10;
     572:	c9 01       	movw	r24, r18
     574:	6a e0       	ldi	r22, 0x0A	; 10
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__divmodhi4>
     57c:	cb 01       	movw	r24, r22
     57e:	6a e0       	ldi	r22, 0x0A	; 10
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__divmodhi4>
		segment_data[2] = temp;
     586:	80 93 0e 02 	sts	0x020E, r24
		temp = data%10;
     58a:	c9 01       	movw	r24, r18
     58c:	6a e0       	ldi	r22, 0x0A	; 10
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__divmodhi4>
		segment_data[3] = temp;
     594:	80 93 0f 02 	sts	0x020F, r24
     598:	08 95       	ret

0000059a <segment_get_int>:

int segment_get_int()
{
	int data = 0;
	
	data = 	segment_data[0]*1000;
     59a:	80 91 0c 02 	lds	r24, 0x020C
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	28 ee       	ldi	r18, 0xE8	; 232
     5a2:	33 e0       	ldi	r19, 0x03	; 3
     5a4:	a9 01       	movw	r20, r18
     5a6:	84 9f       	mul	r24, r20
     5a8:	90 01       	movw	r18, r0
     5aa:	85 9f       	mul	r24, r21
     5ac:	30 0d       	add	r19, r0
     5ae:	94 9f       	mul	r25, r20
     5b0:	30 0d       	add	r19, r0
     5b2:	11 24       	eor	r1, r1
	data += segment_data[1]*100;
     5b4:	80 91 0d 02 	lds	r24, 0x020D
	data += segment_data[2]*10;
     5b8:	40 91 0e 02 	lds	r20, 0x020E
	data += segment_data[3];
     5bc:	70 91 0f 02 	lds	r23, 0x020F
int segment_get_int()
{
	int data = 0;
	
	data = 	segment_data[0]*1000;
	data += segment_data[1]*100;
     5c0:	64 e6       	ldi	r22, 0x64	; 100
     5c2:	86 9f       	mul	r24, r22
     5c4:	c0 01       	movw	r24, r0
     5c6:	11 24       	eor	r1, r1
     5c8:	28 0f       	add	r18, r24
     5ca:	39 1f       	adc	r19, r25
	data += segment_data[2]*10;
     5cc:	27 0f       	add	r18, r23
     5ce:	31 1d       	adc	r19, r1
     5d0:	8a e0       	ldi	r24, 0x0A	; 10
     5d2:	48 9f       	mul	r20, r24
     5d4:	a0 01       	movw	r20, r0
     5d6:	11 24       	eor	r1, r1
     5d8:	24 0f       	add	r18, r20
     5da:	35 1f       	adc	r19, r21
	data += segment_data[3];
	
return data;
}
     5dc:	c9 01       	movw	r24, r18
     5de:	08 95       	ret

000005e0 <__vector_9>:
	return;
}


ISR(TIMER2_COMP_vect)
{	
     5e0:	1f 92       	push	r1
     5e2:	0f 92       	push	r0
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	0f 92       	push	r0
     5e8:	11 24       	eor	r1, r1
     5ea:	8f 93       	push	r24
     5ec:	9f 93       	push	r25
		blabla = blabla + 10;
	} else {
		lcd_put_string("Out of range.");
	}
	*/
	blabla++;
     5ee:	80 91 10 02 	lds	r24, 0x0210
     5f2:	90 91 11 02 	lds	r25, 0x0211
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	90 93 11 02 	sts	0x0211, r25
     5fc:	80 93 10 02 	sts	0x0210, r24
}
     600:	9f 91       	pop	r25
     602:	8f 91       	pop	r24
     604:	0f 90       	pop	r0
     606:	0f be       	out	0x3f, r0	; 63
     608:	0f 90       	pop	r0
     60a:	1f 90       	pop	r1
     60c:	18 95       	reti

0000060e <init_periph>:



void led_init()
{
	DDRB |= 0xF0;	// PORTB out
     60e:	87 b3       	in	r24, 0x17	; 23
     610:	80 6f       	ori	r24, 0xF0	; 240
     612:	87 bb       	out	0x17, r24	; 23
	DDRD |= 0xF0;	// PORTD out
     614:	81 b3       	in	r24, 0x11	; 17
     616:	80 6f       	ori	r24, 0xF0	; 240
     618:	81 bb       	out	0x11, r24	; 17
	TCCR0 |= (1<<3); // CTC mode hogy pontos legyen a trigger
	TIMSK |= (1<<1);	// interrupt enable
}

void set_uh_ports(){
	DDRD |= 1;	// trigger kimenet
     61a:	88 9a       	sbi	0x11, 0	; 17
	DDRD &= 0b11111101;	// echo bemenet
     61c:	89 98       	cbi	0x11, 1	; 17



void segment_init()
{
	DDRA |= 0xFF;
     61e:	8a b3       	in	r24, 0x1a	; 26
     620:	8f ef       	ldi	r24, 0xFF	; 255
     622:	8a bb       	out	0x1a, r24	; 26

}

void timer0_init(){
	
	OCR0 = 159;	// 10 usec széles trigger jelhez
     624:	8f e9       	ldi	r24, 0x9F	; 159
     626:	81 bf       	out	0x31, r24	; 49
	TCCR0 |= (1<<3); // CTC mode hogy pontos legyen a trigger
     628:	83 b7       	in	r24, 0x33	; 51
     62a:	88 60       	ori	r24, 0x08	; 8
     62c:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<1);	// interrupt enable
     62e:	87 b7       	in	r24, 0x37	; 55
     630:	82 60       	ori	r24, 0x02	; 2
     632:	87 bf       	out	0x37, r24	; 55
}

void timer2_init(){
	
	
	TCCR2 |= 3; 
     634:	85 b5       	in	r24, 0x25	; 37
     636:	83 60       	ori	r24, 0x03	; 3
     638:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<6);	// interrupt
     63a:	87 b7       	in	r24, 0x37	; 55
     63c:	80 64       	ori	r24, 0x40	; 64
     63e:	87 bf       	out	0x37, r24	; 55

	
}

void select_rising_edge(){
	EICRA |= (1<<2)|(1<<3);
     640:	ea e6       	ldi	r30, 0x6A	; 106
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	80 81       	ld	r24, Z
     646:	8c 60       	ori	r24, 0x0C	; 12
     648:	80 83       	st	Z, r24
	DDRD &= 0b11111101;	// echo bemenet
}

void ext_int_init(){
	select_rising_edge();
	EIMSK |= 2;
     64a:	89 b7       	in	r24, 0x39	; 57
     64c:	82 60       	ori	r24, 0x02	; 2
     64e:	89 bf       	out	0x39, r24	; 57
	segment_init();
	timer0_init();
	timer2_init();
	ext_int_init();
	
	sei(); // global interrupt enable
     650:	78 94       	sei

}
     652:	08 95       	ret

00000654 <timer0_init>:

void timer0_init(){
	
	OCR0 = 159;	// 10 usec széles trigger jelhez
     654:	8f e9       	ldi	r24, 0x9F	; 159
     656:	81 bf       	out	0x31, r24	; 49
	TCCR0 |= (1<<3); // CTC mode hogy pontos legyen a trigger
     658:	83 b7       	in	r24, 0x33	; 51
     65a:	88 60       	ori	r24, 0x08	; 8
     65c:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<1);	// interrupt enable
     65e:	87 b7       	in	r24, 0x37	; 55
     660:	82 60       	ori	r24, 0x02	; 2
     662:	87 bf       	out	0x37, r24	; 55
}
     664:	08 95       	ret

00000666 <set_uh_ports>:

void set_uh_ports(){
	DDRD |= 1;	// trigger kimenet
     666:	88 9a       	sbi	0x11, 0	; 17
	DDRD &= 0b11111101;	// echo bemenet
     668:	89 98       	cbi	0x11, 1	; 17
}
     66a:	08 95       	ret

0000066c <ext_int_init>:

	
}

void select_rising_edge(){
	EICRA |= (1<<2)|(1<<3);
     66c:	ea e6       	ldi	r30, 0x6A	; 106
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	80 81       	ld	r24, Z
     672:	8c 60       	ori	r24, 0x0C	; 12
     674:	80 83       	st	Z, r24
	DDRD &= 0b11111101;	// echo bemenet
}

void ext_int_init(){
	select_rising_edge();
	EIMSK |= 2;
     676:	89 b7       	in	r24, 0x39	; 57
     678:	82 60       	ori	r24, 0x02	; 2
     67a:	89 bf       	out	0x39, r24	; 57
}
     67c:	08 95       	ret

0000067e <send_trigger>:



void send_trigger(){
	TCNT0 = 0;	// timer számláló regiszter nullázás
     67e:	12 be       	out	0x32, r1	; 50
	TCCR0 |= 1;	// timer 0 indítás
     680:	83 b7       	in	r24, 0x33	; 51
     682:	81 60       	ori	r24, 0x01	; 1
     684:	83 bf       	out	0x33, r24	; 51
	PORTD |= 1;
     686:	90 9a       	sbi	0x12, 0	; 18
	led_out(0);
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	0e 94 66 02 	call	0x4cc	; 0x4cc <led_out>
}
     68e:	08 95       	ret

00000690 <main>:

int main (void){

	

	init_periph();
     690:	0e 94 07 03 	call	0x60e	; 0x60e <init_periph>
	lcd_put_int(blabla);

}

void timer1_input_capture_init(){
	TCNT3 = 0;
     694:	10 92 89 00 	sts	0x0089, r1
     698:	10 92 88 00 	sts	0x0088, r1
	ETIMSK |= 1<<5;	// input capture interrupt enable
     69c:	80 91 7d 00 	lds	r24, 0x007D
     6a0:	80 62       	ori	r24, 0x20	; 32
     6a2:	80 93 7d 00 	sts	0x007D, r24
	TCCR3B |= (1<<7)|(1<<6);	// noise filter + rising edge + 64 prescale
     6a6:	80 91 8a 00 	lds	r24, 0x008A
     6aa:	80 6c       	ori	r24, 0xC0	; 192
     6ac:	80 93 8a 00 	sts	0x008A, r24
	//impulse_start();
	
	

	while(1){
		if(PING == 1){
     6b0:	80 91 63 00 	lds	r24, 0x0063
     6b4:	81 30       	cpi	r24, 0x01	; 1
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <main+0x20>
			send_trigger();
     6b8:	0e 94 3f 03 	call	0x67e	; 0x67e <send_trigger>
			while(PING != 0){}
     6bc:	80 91 63 00 	lds	r24, 0x0063
     6c0:	88 23       	and	r24, r24
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <main+0x2c>
     6c4:	f5 cf       	rjmp	.-22     	; 0x6b0 <main+0x20>

000006c6 <__vector_15>:
	PORTD |= 1;
	led_out(0);
}

ISR(TIMER0_COMP_vect)
{	
     6c6:	1f 92       	push	r1
     6c8:	0f 92       	push	r0
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	0f 92       	push	r0
     6ce:	0b b6       	in	r0, 0x3b	; 59
     6d0:	0f 92       	push	r0
     6d2:	11 24       	eor	r1, r1
     6d4:	2f 93       	push	r18
     6d6:	3f 93       	push	r19
     6d8:	4f 93       	push	r20
     6da:	5f 93       	push	r21
     6dc:	6f 93       	push	r22
     6de:	7f 93       	push	r23
     6e0:	8f 93       	push	r24
     6e2:	9f 93       	push	r25
     6e4:	af 93       	push	r26
     6e6:	bf 93       	push	r27
     6e8:	ef 93       	push	r30
     6ea:	ff 93       	push	r31
	PORTD &= 0b11111110;	// 10 usec impulzus vége, PORTD D0 ->0
     6ec:	90 98       	cbi	0x12, 0	; 18
	led_out(2);
     6ee:	82 e0       	ldi	r24, 0x02	; 2
     6f0:	0e 94 66 02 	call	0x4cc	; 0x4cc <led_out>
	TCCR3B |= 3;	// elindítjuk a Timer 3-at, ami méri az impulzus szélességét
     6f4:	ea e8       	ldi	r30, 0x8A	; 138
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	80 81       	ld	r24, Z
     6fa:	83 60       	ori	r24, 0x03	; 3
     6fc:	80 83       	st	Z, r24
	//measure_echo();	// mérés indítás
		
}
     6fe:	ff 91       	pop	r31
     700:	ef 91       	pop	r30
     702:	bf 91       	pop	r27
     704:	af 91       	pop	r26
     706:	9f 91       	pop	r25
     708:	8f 91       	pop	r24
     70a:	7f 91       	pop	r23
     70c:	6f 91       	pop	r22
     70e:	5f 91       	pop	r21
     710:	4f 91       	pop	r20
     712:	3f 91       	pop	r19
     714:	2f 91       	pop	r18
     716:	0f 90       	pop	r0
     718:	0b be       	out	0x3b, r0	; 59
     71a:	0f 90       	pop	r0
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	0f 90       	pop	r0
     720:	1f 90       	pop	r1
     722:	18 95       	reti

00000724 <impulse_stop>:

void impulse_stop(){
	//TCCR0 &= 0b11111110;
	TIMSK &= 0b11111101;	// timer 0 CTC interrupt disable
     724:	87 b7       	in	r24, 0x37	; 55
     726:	8d 7f       	andi	r24, 0xFD	; 253
     728:	87 bf       	out	0x37, r24	; 55
//	PORTD &= 0xFE;	// trigger impulse 0
	//led_out(16);
}
     72a:	08 95       	ret

0000072c <measure_echo>:

void measure_echo(){
	
	TCCR2 |= 2;	// timer 2 indítás
     72c:	85 b5       	in	r24, 0x25	; 37
     72e:	82 60       	ori	r24, 0x02	; 2
     730:	85 bd       	out	0x25, r24	; 37
	//led_out(3);
	
}
     732:	08 95       	ret

00000734 <select_rising_edge>:

	
}

void select_rising_edge(){
	EICRA |= (1<<2)|(1<<3);
     734:	ea e6       	ldi	r30, 0x6A	; 106
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	80 81       	ld	r24, Z
     73a:	8c 60       	ori	r24, 0x0C	; 12
     73c:	80 83       	st	Z, r24
}
     73e:	08 95       	ret

00000740 <select_falling_edge>:

void select_falling_edge(){
	EICRA = 0;
     740:	ea e6       	ldi	r30, 0x6A	; 106
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	10 82       	st	Z, r1
	EICRA |= (1<<3);
     746:	80 81       	ld	r24, Z
     748:	88 60       	ori	r24, 0x08	; 8
     74a:	80 83       	st	Z, r24
}
     74c:	08 95       	ret

0000074e <getCnt>:
//
//
int* getCnt(){	
	static unsigned int cnt = 0; // 16 bites
	return &cnt;
}
     74e:	86 e1       	ldi	r24, 0x16	; 22
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	08 95       	ret

00000754 <timer2_init>:
}

void timer2_init(){
	
	
	TCCR2 |= 3; 
     754:	85 b5       	in	r24, 0x25	; 37
     756:	83 60       	ori	r24, 0x03	; 3
     758:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<6);	// interrupt
     75a:	87 b7       	in	r24, 0x37	; 55
     75c:	80 64       	ori	r24, 0x40	; 64
     75e:	87 bf       	out	0x37, r24	; 55
}
     760:	08 95       	ret

00000762 <timer2_stop>:

void timer2_stop(){
	//TIMSK = 0;
	TCCR2 = 0;
     762:	15 bc       	out	0x25, r1	; 37
	//led_out(4);
}
     764:	08 95       	ret

00000766 <print_result>:


void print_result(){
	
	lcd_goto_yx(0,0);
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <lcd_goto_yx>
	lcd_put_int(blabla);
     76e:	80 91 10 02 	lds	r24, 0x0210
     772:	90 91 11 02 	lds	r25, 0x0211
     776:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_put_int>

}
     77a:	08 95       	ret

0000077c <calc_distance>:
	//int* cnt = getCnt();
	//int result = 0xff;//*cnt/58;
	//led_out(blabla);

	//led_out(6);
	print_result();
     77c:	0e 94 b3 03 	call	0x766	; 0x766 <print_result>
}
     780:	08 95       	ret

00000782 <__vector_2>:
	//led_out(3);
	
}


ISR(INT1_vect){
     782:	1f 92       	push	r1
     784:	0f 92       	push	r0
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	0f 92       	push	r0
     78a:	0b b6       	in	r0, 0x3b	; 59
     78c:	0f 92       	push	r0
     78e:	11 24       	eor	r1, r1
     790:	2f 93       	push	r18
     792:	3f 93       	push	r19
     794:	4f 93       	push	r20
     796:	5f 93       	push	r21
     798:	6f 93       	push	r22
     79a:	7f 93       	push	r23
     79c:	8f 93       	push	r24
     79e:	9f 93       	push	r25
     7a0:	af 93       	push	r26
     7a2:	bf 93       	push	r27
     7a4:	ef 93       	push	r30
     7a6:	ff 93       	push	r31
	
	static unsigned int run = 1;
	EIFR = 0;
     7a8:	18 be       	out	0x38, r1	; 56


	if(run%2){
     7aa:	20 91 01 01 	lds	r18, 0x0101
     7ae:	30 91 02 01 	lds	r19, 0x0102
     7b2:	a9 01       	movw	r20, r18
     7b4:	4f 5f       	subi	r20, 0xFF	; 255
     7b6:	5f 4f       	sbci	r21, 0xFF	; 255
     7b8:	20 ff       	sbrs	r18, 0
     7ba:	12 c0       	rjmp	.+36     	; 0x7e0 <__vector_2+0x5e>
	//led_out(16);
}

void measure_echo(){
	
	TCCR2 |= 2;	// timer 2 indítás
     7bc:	85 b5       	in	r24, 0x25	; 37
     7be:	82 60       	ori	r24, 0x02	; 2
     7c0:	85 bd       	out	0x25, r24	; 37
void select_rising_edge(){
	EICRA |= (1<<2)|(1<<3);
}

void select_falling_edge(){
	EICRA = 0;
     7c2:	10 92 6a 00 	sts	0x006A, r1
	EICRA |= (1<<3);
     7c6:	80 91 6a 00 	lds	r24, 0x006A
     7ca:	88 60       	ori	r24, 0x08	; 8
     7cc:	80 93 6a 00 	sts	0x006A, r24


	if(run%2){
		measure_echo();	
		select_falling_edge();
		led_out(run++);
     7d0:	50 93 02 01 	sts	0x0102, r21
     7d4:	40 93 01 01 	sts	0x0101, r20
     7d8:	82 2f       	mov	r24, r18
     7da:	0e 94 66 02 	call	0x4cc	; 0x4cc <led_out>
     7de:	11 c0       	rjmp	.+34     	; 0x802 <__vector_2+0x80>
	TIMSK |= (1<<6);	// interrupt
}

void timer2_stop(){
	//TIMSK = 0;
	TCCR2 = 0;
     7e0:	15 bc       	out	0x25, r1	; 37
void select_rising_edge(){
	EICRA |= (1<<2)|(1<<3);
}

void select_falling_edge(){
	EICRA = 0;
     7e2:	10 92 6a 00 	sts	0x006A, r1
	EICRA |= (1<<3);
     7e6:	80 91 6a 00 	lds	r24, 0x006A
     7ea:	88 60       	ori	r24, 0x08	; 8
     7ec:	80 93 6a 00 	sts	0x006A, r24
		select_falling_edge();
		led_out(run++);
	}else{
		timer2_stop();
		select_falling_edge();
		led_out(run++);
     7f0:	50 93 02 01 	sts	0x0102, r21
     7f4:	40 93 01 01 	sts	0x0101, r20
     7f8:	82 2f       	mov	r24, r18
     7fa:	0e 94 66 02 	call	0x4cc	; 0x4cc <led_out>
	//int* cnt = getCnt();
	//int result = 0xff;//*cnt/58;
	//led_out(blabla);

	//led_out(6);
	print_result();
     7fe:	0e 94 b3 03 	call	0x766	; 0x766 <print_result>
		led_out(run++);
		calc_distance();	
	}

	
}
     802:	ff 91       	pop	r31
     804:	ef 91       	pop	r30
     806:	bf 91       	pop	r27
     808:	af 91       	pop	r26
     80a:	9f 91       	pop	r25
     80c:	8f 91       	pop	r24
     80e:	7f 91       	pop	r23
     810:	6f 91       	pop	r22
     812:	5f 91       	pop	r21
     814:	4f 91       	pop	r20
     816:	3f 91       	pop	r19
     818:	2f 91       	pop	r18
     81a:	0f 90       	pop	r0
     81c:	0b be       	out	0x3b, r0	; 59
     81e:	0f 90       	pop	r0
     820:	0f be       	out	0x3f, r0	; 63
     822:	0f 90       	pop	r0
     824:	1f 90       	pop	r1
     826:	18 95       	reti

00000828 <timer1_input_capture_init>:
	lcd_put_int(blabla);

}

void timer1_input_capture_init(){
	TCNT3 = 0;
     828:	10 92 89 00 	sts	0x0089, r1
     82c:	10 92 88 00 	sts	0x0088, r1
	ETIMSK |= 1<<5;	// input capture interrupt enable
     830:	ed e7       	ldi	r30, 0x7D	; 125
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	80 62       	ori	r24, 0x20	; 32
     838:	80 83       	st	Z, r24
	TCCR3B |= (1<<7)|(1<<6);	// noise filter + rising edge + 64 prescale
     83a:	ea e8       	ldi	r30, 0x8A	; 138
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	80 81       	ld	r24, Z
     840:	80 6c       	ori	r24, 0xC0	; 192
     842:	80 83       	st	Z, r24
}
     844:	08 95       	ret

00000846 <__vector_25>:

ISR(TIMER3_CAPT_vect){
     846:	1f 92       	push	r1
     848:	0f 92       	push	r0
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	0f 92       	push	r0
     84e:	0b b6       	in	r0, 0x3b	; 59
     850:	0f 92       	push	r0
     852:	11 24       	eor	r1, r1
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	2f 93       	push	r18
     85e:	3f 93       	push	r19
     860:	4f 93       	push	r20
     862:	5f 93       	push	r21
     864:	6f 93       	push	r22
     866:	7f 93       	push	r23
     868:	8f 93       	push	r24
     86a:	9f 93       	push	r25
     86c:	af 93       	push	r26
     86e:	bf 93       	push	r27
     870:	ef 93       	push	r30
     872:	ff 93       	push	r31
	
	static char i = 1;
	unsigned int res = 0;

	// ebbe fut bele elõször, mert 1/2 maradéka 1
	if(i%2){
     874:	30 91 00 01 	lds	r19, 0x0100
     878:	30 ff       	sbrs	r19, 0
     87a:	13 c0       	rjmp	.+38     	; 0x8a2 <__vector_25+0x5c>
		i1 = ICR3;
     87c:	80 91 80 00 	lds	r24, 0x0080
     880:	90 91 81 00 	lds	r25, 0x0081
     884:	90 93 13 02 	sts	0x0213, r25
     888:	80 93 12 02 	sts	0x0212, r24
		TCCR3B &= ~(1<<6);	// falling edge
     88c:	20 91 8a 00 	lds	r18, 0x008A
     890:	2f 7b       	andi	r18, 0xBF	; 191
     892:	20 93 8a 00 	sts	0x008A, r18
		i++;
     896:	3f 5f       	subi	r19, 0xFF	; 255
     898:	30 93 00 01 	sts	0x0100, r19
		led_out(i1);
     89c:	0e 94 66 02 	call	0x4cc	; 0x4cc <led_out>
     8a0:	2b c0       	rjmp	.+86     	; 0x8f8 <__vector_25+0xb2>
	// ebbe másodszor, mert 2/2 maradéka 0		
	}else{
		TCCR3B |= 1<<6;		// rising edge
     8a2:	80 91 8a 00 	lds	r24, 0x008A
     8a6:	80 64       	ori	r24, 0x40	; 64
     8a8:	80 93 8a 00 	sts	0x008A, r24
		i2 = ICR3;
     8ac:	e0 90 80 00 	lds	r14, 0x0080
     8b0:	f0 90 81 00 	lds	r15, 0x0081
     8b4:	f0 92 15 02 	sts	0x0215, r15
     8b8:	e0 92 14 02 	sts	0x0214, r14
		i = 1;
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	80 93 00 01 	sts	0x0100, r24
		res = i2-i1;
     8c2:	80 91 12 02 	lds	r24, 0x0212
     8c6:	90 91 13 02 	lds	r25, 0x0213
     8ca:	e8 1a       	sub	r14, r24
     8cc:	f9 0a       	sbc	r15, r25
		led_out(res);	
     8ce:	8e 2d       	mov	r24, r14
     8d0:	0e 94 66 02 	call	0x4cc	; 0x4cc <led_out>
		//res = res / 58;
		float test = res / 14.5;
		segment_put_int((int)test);
     8d4:	00 e0       	ldi	r16, 0x00	; 0
     8d6:	10 e0       	ldi	r17, 0x00	; 0
     8d8:	c8 01       	movw	r24, r16
     8da:	b7 01       	movw	r22, r14
     8dc:	0e 94 cb 05 	call	0xb96	; 0xb96 <__floatunsisf>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	48 e6       	ldi	r20, 0x68	; 104
     8e6:	51 e4       	ldi	r21, 0x41	; 65
     8e8:	0e 94 cb 04 	call	0x996	; 0x996 <__divsf3>
     8ec:	0e 94 77 05 	call	0xaee	; 0xaee <__fixsfsi>
     8f0:	dc 01       	movw	r26, r24
     8f2:	cb 01       	movw	r24, r22
     8f4:	0e 94 9c 02 	call	0x538	; 0x538 <segment_put_int>
	}

	// ha egy mérés meg volt, akkor leállítjuk a timert 
	if(i > 2)
     8f8:	80 91 00 01 	lds	r24, 0x0100
     8fc:	83 30       	cpi	r24, 0x03	; 3
     8fe:	60 f0       	brcs	.+24     	; 0x918 <__vector_25+0xd2>
	{
		TCCR3B &= 0b11111000; // clock source off
     900:	80 91 8a 00 	lds	r24, 0x008A
     904:	88 7f       	andi	r24, 0xF8	; 248
     906:	80 93 8a 00 	sts	0x008A, r24
		TCNT3 = 0;
     90a:	10 92 89 00 	sts	0x0089, r1
     90e:	10 92 88 00 	sts	0x0088, r1
		i = 1;	// i beállítása következõ méréshez.
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 93 00 01 	sts	0x0100, r24
	}

}
     918:	ff 91       	pop	r31
     91a:	ef 91       	pop	r30
     91c:	bf 91       	pop	r27
     91e:	af 91       	pop	r26
     920:	9f 91       	pop	r25
     922:	8f 91       	pop	r24
     924:	7f 91       	pop	r23
     926:	6f 91       	pop	r22
     928:	5f 91       	pop	r21
     92a:	4f 91       	pop	r20
     92c:	3f 91       	pop	r19
     92e:	2f 91       	pop	r18
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	0f 90       	pop	r0
     93a:	0b be       	out	0x3b, r0	; 59
     93c:	0f 90       	pop	r0
     93e:	0f be       	out	0x3f, r0	; 63
     940:	0f 90       	pop	r0
     942:	1f 90       	pop	r1
     944:	18 95       	reti

00000946 <__vector_10>:


ISR(TIMER2_OVF_vect){
     946:	1f 92       	push	r1
     948:	0f 92       	push	r0
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	0f 92       	push	r0
     94e:	0b b6       	in	r0, 0x3b	; 59
     950:	0f 92       	push	r0
     952:	11 24       	eor	r1, r1
     954:	2f 93       	push	r18
     956:	3f 93       	push	r19
     958:	4f 93       	push	r20
     95a:	5f 93       	push	r21
     95c:	6f 93       	push	r22
     95e:	7f 93       	push	r23
     960:	8f 93       	push	r24
     962:	9f 93       	push	r25
     964:	af 93       	push	r26
     966:	bf 93       	push	r27
     968:	ef 93       	push	r30
     96a:	ff 93       	push	r31
	segment_display();
     96c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <segment_display>
}
     970:	ff 91       	pop	r31
     972:	ef 91       	pop	r30
     974:	bf 91       	pop	r27
     976:	af 91       	pop	r26
     978:	9f 91       	pop	r25
     97a:	8f 91       	pop	r24
     97c:	7f 91       	pop	r23
     97e:	6f 91       	pop	r22
     980:	5f 91       	pop	r21
     982:	4f 91       	pop	r20
     984:	3f 91       	pop	r19
     986:	2f 91       	pop	r18
     988:	0f 90       	pop	r0
     98a:	0b be       	out	0x3b, r0	; 59
     98c:	0f 90       	pop	r0
     98e:	0f be       	out	0x3f, r0	; 63
     990:	0f 90       	pop	r0
     992:	1f 90       	pop	r1
     994:	18 95       	reti

00000996 <__divsf3>:
     996:	a8 e1       	ldi	r26, 0x18	; 24
     998:	b0 e0       	ldi	r27, 0x00	; 0
     99a:	e1 ed       	ldi	r30, 0xD1	; 209
     99c:	f4 e0       	ldi	r31, 0x04	; 4
     99e:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__prologue_saves__+0x10>
     9a2:	69 83       	std	Y+1, r22	; 0x01
     9a4:	7a 83       	std	Y+2, r23	; 0x02
     9a6:	8b 83       	std	Y+3, r24	; 0x03
     9a8:	9c 83       	std	Y+4, r25	; 0x04
     9aa:	2d 83       	std	Y+5, r18	; 0x05
     9ac:	3e 83       	std	Y+6, r19	; 0x06
     9ae:	4f 83       	std	Y+7, r20	; 0x07
     9b0:	58 87       	std	Y+8, r21	; 0x08
     9b2:	b9 e0       	ldi	r27, 0x09	; 9
     9b4:	eb 2e       	mov	r14, r27
     9b6:	f1 2c       	mov	r15, r1
     9b8:	ec 0e       	add	r14, r28
     9ba:	fd 1e       	adc	r15, r29
     9bc:	ce 01       	movw	r24, r28
     9be:	01 96       	adiw	r24, 0x01	; 1
     9c0:	b7 01       	movw	r22, r14
     9c2:	0e 94 68 07 	call	0xed0	; 0xed0 <__unpack_f>
     9c6:	8e 01       	movw	r16, r28
     9c8:	0f 5e       	subi	r16, 0xEF	; 239
     9ca:	1f 4f       	sbci	r17, 0xFF	; 255
     9cc:	ce 01       	movw	r24, r28
     9ce:	05 96       	adiw	r24, 0x05	; 5
     9d0:	b8 01       	movw	r22, r16
     9d2:	0e 94 68 07 	call	0xed0	; 0xed0 <__unpack_f>
     9d6:	29 85       	ldd	r18, Y+9	; 0x09
     9d8:	22 30       	cpi	r18, 0x02	; 2
     9da:	08 f4       	brcc	.+2      	; 0x9de <__divsf3+0x48>
     9dc:	7e c0       	rjmp	.+252    	; 0xada <__divsf3+0x144>
     9de:	39 89       	ldd	r19, Y+17	; 0x11
     9e0:	32 30       	cpi	r19, 0x02	; 2
     9e2:	10 f4       	brcc	.+4      	; 0x9e8 <__divsf3+0x52>
     9e4:	b8 01       	movw	r22, r16
     9e6:	7c c0       	rjmp	.+248    	; 0xae0 <__divsf3+0x14a>
     9e8:	8a 85       	ldd	r24, Y+10	; 0x0a
     9ea:	9a 89       	ldd	r25, Y+18	; 0x12
     9ec:	89 27       	eor	r24, r25
     9ee:	8a 87       	std	Y+10, r24	; 0x0a
     9f0:	24 30       	cpi	r18, 0x04	; 4
     9f2:	11 f0       	breq	.+4      	; 0x9f8 <__divsf3+0x62>
     9f4:	22 30       	cpi	r18, 0x02	; 2
     9f6:	31 f4       	brne	.+12     	; 0xa04 <__divsf3+0x6e>
     9f8:	23 17       	cp	r18, r19
     9fa:	09 f0       	breq	.+2      	; 0x9fe <__divsf3+0x68>
     9fc:	6e c0       	rjmp	.+220    	; 0xada <__divsf3+0x144>
     9fe:	63 e0       	ldi	r22, 0x03	; 3
     a00:	71 e0       	ldi	r23, 0x01	; 1
     a02:	6e c0       	rjmp	.+220    	; 0xae0 <__divsf3+0x14a>
     a04:	34 30       	cpi	r19, 0x04	; 4
     a06:	39 f4       	brne	.+14     	; 0xa16 <__divsf3+0x80>
     a08:	1d 86       	std	Y+13, r1	; 0x0d
     a0a:	1e 86       	std	Y+14, r1	; 0x0e
     a0c:	1f 86       	std	Y+15, r1	; 0x0f
     a0e:	18 8a       	std	Y+16, r1	; 0x10
     a10:	1c 86       	std	Y+12, r1	; 0x0c
     a12:	1b 86       	std	Y+11, r1	; 0x0b
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__divsf3+0x88>
     a16:	32 30       	cpi	r19, 0x02	; 2
     a18:	21 f4       	brne	.+8      	; 0xa22 <__divsf3+0x8c>
     a1a:	84 e0       	ldi	r24, 0x04	; 4
     a1c:	89 87       	std	Y+9, r24	; 0x09
     a1e:	b7 01       	movw	r22, r14
     a20:	5f c0       	rjmp	.+190    	; 0xae0 <__divsf3+0x14a>
     a22:	2b 85       	ldd	r18, Y+11	; 0x0b
     a24:	3c 85       	ldd	r19, Y+12	; 0x0c
     a26:	8b 89       	ldd	r24, Y+19	; 0x13
     a28:	9c 89       	ldd	r25, Y+20	; 0x14
     a2a:	28 1b       	sub	r18, r24
     a2c:	39 0b       	sbc	r19, r25
     a2e:	3c 87       	std	Y+12, r19	; 0x0c
     a30:	2b 87       	std	Y+11, r18	; 0x0b
     a32:	ed 84       	ldd	r14, Y+13	; 0x0d
     a34:	fe 84       	ldd	r15, Y+14	; 0x0e
     a36:	0f 85       	ldd	r16, Y+15	; 0x0f
     a38:	18 89       	ldd	r17, Y+16	; 0x10
     a3a:	ad 88       	ldd	r10, Y+21	; 0x15
     a3c:	be 88       	ldd	r11, Y+22	; 0x16
     a3e:	cf 88       	ldd	r12, Y+23	; 0x17
     a40:	d8 8c       	ldd	r13, Y+24	; 0x18
     a42:	ea 14       	cp	r14, r10
     a44:	fb 04       	cpc	r15, r11
     a46:	0c 05       	cpc	r16, r12
     a48:	1d 05       	cpc	r17, r13
     a4a:	40 f4       	brcc	.+16     	; 0xa5c <__divsf3+0xc6>
     a4c:	ee 0c       	add	r14, r14
     a4e:	ff 1c       	adc	r15, r15
     a50:	00 1f       	adc	r16, r16
     a52:	11 1f       	adc	r17, r17
     a54:	21 50       	subi	r18, 0x01	; 1
     a56:	30 40       	sbci	r19, 0x00	; 0
     a58:	3c 87       	std	Y+12, r19	; 0x0c
     a5a:	2b 87       	std	Y+11, r18	; 0x0b
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e4       	ldi	r27, 0x40	; 64
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	ea 14       	cp	r14, r10
     a72:	fb 04       	cpc	r15, r11
     a74:	0c 05       	cpc	r16, r12
     a76:	1d 05       	cpc	r17, r13
     a78:	40 f0       	brcs	.+16     	; 0xa8a <__divsf3+0xf4>
     a7a:	28 2b       	or	r18, r24
     a7c:	39 2b       	or	r19, r25
     a7e:	4a 2b       	or	r20, r26
     a80:	5b 2b       	or	r21, r27
     a82:	ea 18       	sub	r14, r10
     a84:	fb 08       	sbc	r15, r11
     a86:	0c 09       	sbc	r16, r12
     a88:	1d 09       	sbc	r17, r13
     a8a:	b6 95       	lsr	r27
     a8c:	a7 95       	ror	r26
     a8e:	97 95       	ror	r25
     a90:	87 95       	ror	r24
     a92:	ee 0c       	add	r14, r14
     a94:	ff 1c       	adc	r15, r15
     a96:	00 1f       	adc	r16, r16
     a98:	11 1f       	adc	r17, r17
     a9a:	6f 5f       	subi	r22, 0xFF	; 255
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	6f 31       	cpi	r22, 0x1F	; 31
     aa0:	71 05       	cpc	r23, r1
     aa2:	31 f7       	brne	.-52     	; 0xa70 <__divsf3+0xda>
     aa4:	da 01       	movw	r26, r20
     aa6:	c9 01       	movw	r24, r18
     aa8:	8f 77       	andi	r24, 0x7F	; 127
     aaa:	90 70       	andi	r25, 0x00	; 0
     aac:	a0 70       	andi	r26, 0x00	; 0
     aae:	b0 70       	andi	r27, 0x00	; 0
     ab0:	80 34       	cpi	r24, 0x40	; 64
     ab2:	91 05       	cpc	r25, r1
     ab4:	a1 05       	cpc	r26, r1
     ab6:	b1 05       	cpc	r27, r1
     ab8:	61 f4       	brne	.+24     	; 0xad2 <__divsf3+0x13c>
     aba:	27 fd       	sbrc	r18, 7
     abc:	0a c0       	rjmp	.+20     	; 0xad2 <__divsf3+0x13c>
     abe:	e1 14       	cp	r14, r1
     ac0:	f1 04       	cpc	r15, r1
     ac2:	01 05       	cpc	r16, r1
     ac4:	11 05       	cpc	r17, r1
     ac6:	29 f0       	breq	.+10     	; 0xad2 <__divsf3+0x13c>
     ac8:	20 5c       	subi	r18, 0xC0	; 192
     aca:	3f 4f       	sbci	r19, 0xFF	; 255
     acc:	4f 4f       	sbci	r20, 0xFF	; 255
     ace:	5f 4f       	sbci	r21, 0xFF	; 255
     ad0:	20 78       	andi	r18, 0x80	; 128
     ad2:	2d 87       	std	Y+13, r18	; 0x0d
     ad4:	3e 87       	std	Y+14, r19	; 0x0e
     ad6:	4f 87       	std	Y+15, r20	; 0x0f
     ad8:	58 8b       	std	Y+16, r21	; 0x10
     ada:	be 01       	movw	r22, r28
     adc:	67 5f       	subi	r22, 0xF7	; 247
     ade:	7f 4f       	sbci	r23, 0xFF	; 255
     ae0:	cb 01       	movw	r24, r22
     ae2:	0e 94 93 06 	call	0xd26	; 0xd26 <__pack_f>
     ae6:	68 96       	adiw	r28, 0x18	; 24
     ae8:	ea e0       	ldi	r30, 0x0A	; 10
     aea:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__epilogue_restores__+0x10>

00000aee <__fixsfsi>:
     aee:	ac e0       	ldi	r26, 0x0C	; 12
     af0:	b0 e0       	ldi	r27, 0x00	; 0
     af2:	ed e7       	ldi	r30, 0x7D	; 125
     af4:	f5 e0       	ldi	r31, 0x05	; 5
     af6:	0c 94 17 08 	jmp	0x102e	; 0x102e <__prologue_saves__+0x20>
     afa:	69 83       	std	Y+1, r22	; 0x01
     afc:	7a 83       	std	Y+2, r23	; 0x02
     afe:	8b 83       	std	Y+3, r24	; 0x03
     b00:	9c 83       	std	Y+4, r25	; 0x04
     b02:	ce 01       	movw	r24, r28
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	be 01       	movw	r22, r28
     b08:	6b 5f       	subi	r22, 0xFB	; 251
     b0a:	7f 4f       	sbci	r23, 0xFF	; 255
     b0c:	0e 94 68 07 	call	0xed0	; 0xed0 <__unpack_f>
     b10:	8d 81       	ldd	r24, Y+5	; 0x05
     b12:	82 30       	cpi	r24, 0x02	; 2
     b14:	61 f1       	breq	.+88     	; 0xb6e <__fixsfsi+0x80>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	50 f1       	brcs	.+84     	; 0xb6e <__fixsfsi+0x80>
     b1a:	84 30       	cpi	r24, 0x04	; 4
     b1c:	21 f4       	brne	.+8      	; 0xb26 <__fixsfsi+0x38>
     b1e:	8e 81       	ldd	r24, Y+6	; 0x06
     b20:	88 23       	and	r24, r24
     b22:	51 f1       	breq	.+84     	; 0xb78 <__fixsfsi+0x8a>
     b24:	2e c0       	rjmp	.+92     	; 0xb82 <__fixsfsi+0x94>
     b26:	2f 81       	ldd	r18, Y+7	; 0x07
     b28:	38 85       	ldd	r19, Y+8	; 0x08
     b2a:	37 fd       	sbrc	r19, 7
     b2c:	20 c0       	rjmp	.+64     	; 0xb6e <__fixsfsi+0x80>
     b2e:	6e 81       	ldd	r22, Y+6	; 0x06
     b30:	2f 31       	cpi	r18, 0x1F	; 31
     b32:	31 05       	cpc	r19, r1
     b34:	1c f0       	brlt	.+6      	; 0xb3c <__fixsfsi+0x4e>
     b36:	66 23       	and	r22, r22
     b38:	f9 f0       	breq	.+62     	; 0xb78 <__fixsfsi+0x8a>
     b3a:	23 c0       	rjmp	.+70     	; 0xb82 <__fixsfsi+0x94>
     b3c:	8e e1       	ldi	r24, 0x1E	; 30
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	82 1b       	sub	r24, r18
     b42:	93 0b       	sbc	r25, r19
     b44:	29 85       	ldd	r18, Y+9	; 0x09
     b46:	3a 85       	ldd	r19, Y+10	; 0x0a
     b48:	4b 85       	ldd	r20, Y+11	; 0x0b
     b4a:	5c 85       	ldd	r21, Y+12	; 0x0c
     b4c:	04 c0       	rjmp	.+8      	; 0xb56 <__fixsfsi+0x68>
     b4e:	56 95       	lsr	r21
     b50:	47 95       	ror	r20
     b52:	37 95       	ror	r19
     b54:	27 95       	ror	r18
     b56:	8a 95       	dec	r24
     b58:	d2 f7       	brpl	.-12     	; 0xb4e <__fixsfsi+0x60>
     b5a:	66 23       	and	r22, r22
     b5c:	b1 f0       	breq	.+44     	; 0xb8a <__fixsfsi+0x9c>
     b5e:	50 95       	com	r21
     b60:	40 95       	com	r20
     b62:	30 95       	com	r19
     b64:	21 95       	neg	r18
     b66:	3f 4f       	sbci	r19, 0xFF	; 255
     b68:	4f 4f       	sbci	r20, 0xFF	; 255
     b6a:	5f 4f       	sbci	r21, 0xFF	; 255
     b6c:	0e c0       	rjmp	.+28     	; 0xb8a <__fixsfsi+0x9c>
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	09 c0       	rjmp	.+18     	; 0xb8a <__fixsfsi+0x9c>
     b78:	2f ef       	ldi	r18, 0xFF	; 255
     b7a:	3f ef       	ldi	r19, 0xFF	; 255
     b7c:	4f ef       	ldi	r20, 0xFF	; 255
     b7e:	5f e7       	ldi	r21, 0x7F	; 127
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <__fixsfsi+0x9c>
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	50 e8       	ldi	r21, 0x80	; 128
     b8a:	b9 01       	movw	r22, r18
     b8c:	ca 01       	movw	r24, r20
     b8e:	2c 96       	adiw	r28, 0x0c	; 12
     b90:	e2 e0       	ldi	r30, 0x02	; 2
     b92:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__epilogue_restores__+0x20>

00000b96 <__floatunsisf>:
     b96:	a8 e0       	ldi	r26, 0x08	; 8
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e1 ed       	ldi	r30, 0xD1	; 209
     b9c:	f5 e0       	ldi	r31, 0x05	; 5
     b9e:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__prologue_saves__+0x10>
     ba2:	7b 01       	movw	r14, r22
     ba4:	8c 01       	movw	r16, r24
     ba6:	61 15       	cp	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	81 05       	cpc	r24, r1
     bac:	91 05       	cpc	r25, r1
     bae:	19 f4       	brne	.+6      	; 0xbb6 <__floatunsisf+0x20>
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	89 83       	std	Y+1, r24	; 0x01
     bb4:	60 c0       	rjmp	.+192    	; 0xc76 <__floatunsisf+0xe0>
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	89 83       	std	Y+1, r24	; 0x01
     bba:	8e e1       	ldi	r24, 0x1E	; 30
     bbc:	c8 2e       	mov	r12, r24
     bbe:	d1 2c       	mov	r13, r1
     bc0:	dc 82       	std	Y+4, r13	; 0x04
     bc2:	cb 82       	std	Y+3, r12	; 0x03
     bc4:	ed 82       	std	Y+5, r14	; 0x05
     bc6:	fe 82       	std	Y+6, r15	; 0x06
     bc8:	0f 83       	std	Y+7, r16	; 0x07
     bca:	18 87       	std	Y+8, r17	; 0x08
     bcc:	c8 01       	movw	r24, r16
     bce:	b7 01       	movw	r22, r14
     bd0:	0e 94 44 06 	call	0xc88	; 0xc88 <__clzsi2>
     bd4:	fc 01       	movw	r30, r24
     bd6:	31 97       	sbiw	r30, 0x01	; 1
     bd8:	f7 ff       	sbrs	r31, 7
     bda:	3b c0       	rjmp	.+118    	; 0xc52 <__floatunsisf+0xbc>
     bdc:	22 27       	eor	r18, r18
     bde:	33 27       	eor	r19, r19
     be0:	2e 1b       	sub	r18, r30
     be2:	3f 0b       	sbc	r19, r31
     be4:	57 01       	movw	r10, r14
     be6:	68 01       	movw	r12, r16
     be8:	02 2e       	mov	r0, r18
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <__floatunsisf+0x5e>
     bec:	d6 94       	lsr	r13
     bee:	c7 94       	ror	r12
     bf0:	b7 94       	ror	r11
     bf2:	a7 94       	ror	r10
     bf4:	0a 94       	dec	r0
     bf6:	d2 f7       	brpl	.-12     	; 0xbec <__floatunsisf+0x56>
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	a0 e0       	ldi	r26, 0x00	; 0
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	04 c0       	rjmp	.+8      	; 0xc12 <__floatunsisf+0x7c>
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	aa 1f       	adc	r26, r26
     c10:	bb 1f       	adc	r27, r27
     c12:	2a 95       	dec	r18
     c14:	d2 f7       	brpl	.-12     	; 0xc0a <__floatunsisf+0x74>
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	a1 09       	sbc	r26, r1
     c1a:	b1 09       	sbc	r27, r1
     c1c:	8e 21       	and	r24, r14
     c1e:	9f 21       	and	r25, r15
     c20:	a0 23       	and	r26, r16
     c22:	b1 23       	and	r27, r17
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	a1 05       	cpc	r26, r1
     c28:	b1 05       	cpc	r27, r1
     c2a:	21 f0       	breq	.+8      	; 0xc34 <__floatunsisf+0x9e>
     c2c:	41 e0       	ldi	r20, 0x01	; 1
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	4a 29       	or	r20, r10
     c36:	5b 29       	or	r21, r11
     c38:	6c 29       	or	r22, r12
     c3a:	7d 29       	or	r23, r13
     c3c:	4d 83       	std	Y+5, r20	; 0x05
     c3e:	5e 83       	std	Y+6, r21	; 0x06
     c40:	6f 83       	std	Y+7, r22	; 0x07
     c42:	78 87       	std	Y+8, r23	; 0x08
     c44:	8e e1       	ldi	r24, 0x1E	; 30
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	8e 1b       	sub	r24, r30
     c4a:	9f 0b       	sbc	r25, r31
     c4c:	9c 83       	std	Y+4, r25	; 0x04
     c4e:	8b 83       	std	Y+3, r24	; 0x03
     c50:	12 c0       	rjmp	.+36     	; 0xc76 <__floatunsisf+0xe0>
     c52:	30 97       	sbiw	r30, 0x00	; 0
     c54:	81 f0       	breq	.+32     	; 0xc76 <__floatunsisf+0xe0>
     c56:	0e 2e       	mov	r0, r30
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__floatunsisf+0xcc>
     c5a:	ee 0c       	add	r14, r14
     c5c:	ff 1c       	adc	r15, r15
     c5e:	00 1f       	adc	r16, r16
     c60:	11 1f       	adc	r17, r17
     c62:	0a 94       	dec	r0
     c64:	d2 f7       	brpl	.-12     	; 0xc5a <__floatunsisf+0xc4>
     c66:	ed 82       	std	Y+5, r14	; 0x05
     c68:	fe 82       	std	Y+6, r15	; 0x06
     c6a:	0f 83       	std	Y+7, r16	; 0x07
     c6c:	18 87       	std	Y+8, r17	; 0x08
     c6e:	ce 1a       	sub	r12, r30
     c70:	df 0a       	sbc	r13, r31
     c72:	dc 82       	std	Y+4, r13	; 0x04
     c74:	cb 82       	std	Y+3, r12	; 0x03
     c76:	1a 82       	std	Y+2, r1	; 0x02
     c78:	ce 01       	movw	r24, r28
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	0e 94 93 06 	call	0xd26	; 0xd26 <__pack_f>
     c80:	28 96       	adiw	r28, 0x08	; 8
     c82:	ea e0       	ldi	r30, 0x0A	; 10
     c84:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__epilogue_restores__+0x10>

00000c88 <__clzsi2>:
     c88:	ef 92       	push	r14
     c8a:	ff 92       	push	r15
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	7b 01       	movw	r14, r22
     c92:	8c 01       	movw	r16, r24
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	e8 16       	cp	r14, r24
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	f8 06       	cpc	r15, r24
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	08 07       	cpc	r16, r24
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	18 07       	cpc	r17, r24
     ca4:	88 f4       	brcc	.+34     	; 0xcc8 <__clzsi2+0x40>
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	e8 16       	cp	r14, r24
     caa:	f1 04       	cpc	r15, r1
     cac:	01 05       	cpc	r16, r1
     cae:	11 05       	cpc	r17, r1
     cb0:	31 f0       	breq	.+12     	; 0xcbe <__clzsi2+0x36>
     cb2:	28 f0       	brcs	.+10     	; 0xcbe <__clzsi2+0x36>
     cb4:	88 e0       	ldi	r24, 0x08	; 8
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	17 c0       	rjmp	.+46     	; 0xcec <__clzsi2+0x64>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	12 c0       	rjmp	.+36     	; 0xcec <__clzsi2+0x64>
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	e8 16       	cp	r14, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	f8 06       	cpc	r15, r24
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	08 07       	cpc	r16, r24
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	18 07       	cpc	r17, r24
     cd8:	28 f0       	brcs	.+10     	; 0xce4 <__clzsi2+0x5c>
     cda:	88 e1       	ldi	r24, 0x18	; 24
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	a0 e0       	ldi	r26, 0x00	; 0
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <__clzsi2+0x64>
     ce4:	80 e1       	ldi	r24, 0x10	; 16
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	a0 e0       	ldi	r26, 0x00	; 0
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	20 e2       	ldi	r18, 0x20	; 32
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	28 1b       	sub	r18, r24
     cf6:	39 0b       	sbc	r19, r25
     cf8:	4a 0b       	sbc	r20, r26
     cfa:	5b 0b       	sbc	r21, r27
     cfc:	04 c0       	rjmp	.+8      	; 0xd06 <__clzsi2+0x7e>
     cfe:	16 95       	lsr	r17
     d00:	07 95       	ror	r16
     d02:	f7 94       	ror	r15
     d04:	e7 94       	ror	r14
     d06:	8a 95       	dec	r24
     d08:	d2 f7       	brpl	.-12     	; 0xcfe <__clzsi2+0x76>
     d0a:	f7 01       	movw	r30, r14
     d0c:	e5 5f       	subi	r30, 0xF5	; 245
     d0e:	fe 4f       	sbci	r31, 0xFE	; 254
     d10:	80 81       	ld	r24, Z
     d12:	28 1b       	sub	r18, r24
     d14:	31 09       	sbc	r19, r1
     d16:	41 09       	sbc	r20, r1
     d18:	51 09       	sbc	r21, r1
     d1a:	c9 01       	movw	r24, r18
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	08 95       	ret

00000d26 <__pack_f>:
     d26:	df 92       	push	r13
     d28:	ef 92       	push	r14
     d2a:	ff 92       	push	r15
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	fc 01       	movw	r30, r24
     d32:	e4 80       	ldd	r14, Z+4	; 0x04
     d34:	f5 80       	ldd	r15, Z+5	; 0x05
     d36:	06 81       	ldd	r16, Z+6	; 0x06
     d38:	17 81       	ldd	r17, Z+7	; 0x07
     d3a:	d1 80       	ldd	r13, Z+1	; 0x01
     d3c:	80 81       	ld	r24, Z
     d3e:	82 30       	cpi	r24, 0x02	; 2
     d40:	48 f4       	brcc	.+18     	; 0xd54 <__pack_f+0x2e>
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e1       	ldi	r26, 0x10	; 16
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 2a       	or	r14, r24
     d4c:	f9 2a       	or	r15, r25
     d4e:	0a 2b       	or	r16, r26
     d50:	1b 2b       	or	r17, r27
     d52:	a5 c0       	rjmp	.+330    	; 0xe9e <__pack_f+0x178>
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	09 f4       	brne	.+2      	; 0xd5a <__pack_f+0x34>
     d58:	9f c0       	rjmp	.+318    	; 0xe98 <__pack_f+0x172>
     d5a:	82 30       	cpi	r24, 0x02	; 2
     d5c:	21 f4       	brne	.+8      	; 0xd66 <__pack_f+0x40>
     d5e:	ee 24       	eor	r14, r14
     d60:	ff 24       	eor	r15, r15
     d62:	87 01       	movw	r16, r14
     d64:	05 c0       	rjmp	.+10     	; 0xd70 <__pack_f+0x4a>
     d66:	e1 14       	cp	r14, r1
     d68:	f1 04       	cpc	r15, r1
     d6a:	01 05       	cpc	r16, r1
     d6c:	11 05       	cpc	r17, r1
     d6e:	19 f4       	brne	.+6      	; 0xd76 <__pack_f+0x50>
     d70:	e0 e0       	ldi	r30, 0x00	; 0
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	96 c0       	rjmp	.+300    	; 0xea2 <__pack_f+0x17c>
     d76:	62 81       	ldd	r22, Z+2	; 0x02
     d78:	73 81       	ldd	r23, Z+3	; 0x03
     d7a:	9f ef       	ldi	r25, 0xFF	; 255
     d7c:	62 38       	cpi	r22, 0x82	; 130
     d7e:	79 07       	cpc	r23, r25
     d80:	0c f0       	brlt	.+2      	; 0xd84 <__pack_f+0x5e>
     d82:	5b c0       	rjmp	.+182    	; 0xe3a <__pack_f+0x114>
     d84:	22 e8       	ldi	r18, 0x82	; 130
     d86:	3f ef       	ldi	r19, 0xFF	; 255
     d88:	26 1b       	sub	r18, r22
     d8a:	37 0b       	sbc	r19, r23
     d8c:	2a 31       	cpi	r18, 0x1A	; 26
     d8e:	31 05       	cpc	r19, r1
     d90:	2c f0       	brlt	.+10     	; 0xd9c <__pack_f+0x76>
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	50 e0       	ldi	r21, 0x00	; 0
     d9a:	2a c0       	rjmp	.+84     	; 0xdf0 <__pack_f+0xca>
     d9c:	b8 01       	movw	r22, r16
     d9e:	a7 01       	movw	r20, r14
     da0:	02 2e       	mov	r0, r18
     da2:	04 c0       	rjmp	.+8      	; 0xdac <__pack_f+0x86>
     da4:	76 95       	lsr	r23
     da6:	67 95       	ror	r22
     da8:	57 95       	ror	r21
     daa:	47 95       	ror	r20
     dac:	0a 94       	dec	r0
     dae:	d2 f7       	brpl	.-12     	; 0xda4 <__pack_f+0x7e>
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	a0 e0       	ldi	r26, 0x00	; 0
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	04 c0       	rjmp	.+8      	; 0xdc2 <__pack_f+0x9c>
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	aa 1f       	adc	r26, r26
     dc0:	bb 1f       	adc	r27, r27
     dc2:	2a 95       	dec	r18
     dc4:	d2 f7       	brpl	.-12     	; 0xdba <__pack_f+0x94>
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	a1 09       	sbc	r26, r1
     dca:	b1 09       	sbc	r27, r1
     dcc:	8e 21       	and	r24, r14
     dce:	9f 21       	and	r25, r15
     dd0:	a0 23       	and	r26, r16
     dd2:	b1 23       	and	r27, r17
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	a1 05       	cpc	r26, r1
     dd8:	b1 05       	cpc	r27, r1
     dda:	21 f0       	breq	.+8      	; 0xde4 <__pack_f+0xbe>
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	a0 e0       	ldi	r26, 0x00	; 0
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	9a 01       	movw	r18, r20
     de6:	ab 01       	movw	r20, r22
     de8:	28 2b       	or	r18, r24
     dea:	39 2b       	or	r19, r25
     dec:	4a 2b       	or	r20, r26
     dee:	5b 2b       	or	r21, r27
     df0:	da 01       	movw	r26, r20
     df2:	c9 01       	movw	r24, r18
     df4:	8f 77       	andi	r24, 0x7F	; 127
     df6:	90 70       	andi	r25, 0x00	; 0
     df8:	a0 70       	andi	r26, 0x00	; 0
     dfa:	b0 70       	andi	r27, 0x00	; 0
     dfc:	80 34       	cpi	r24, 0x40	; 64
     dfe:	91 05       	cpc	r25, r1
     e00:	a1 05       	cpc	r26, r1
     e02:	b1 05       	cpc	r27, r1
     e04:	39 f4       	brne	.+14     	; 0xe14 <__pack_f+0xee>
     e06:	27 ff       	sbrs	r18, 7
     e08:	09 c0       	rjmp	.+18     	; 0xe1c <__pack_f+0xf6>
     e0a:	20 5c       	subi	r18, 0xC0	; 192
     e0c:	3f 4f       	sbci	r19, 0xFF	; 255
     e0e:	4f 4f       	sbci	r20, 0xFF	; 255
     e10:	5f 4f       	sbci	r21, 0xFF	; 255
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <__pack_f+0xf6>
     e14:	21 5c       	subi	r18, 0xC1	; 193
     e16:	3f 4f       	sbci	r19, 0xFF	; 255
     e18:	4f 4f       	sbci	r20, 0xFF	; 255
     e1a:	5f 4f       	sbci	r21, 0xFF	; 255
     e1c:	e0 e0       	ldi	r30, 0x00	; 0
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	20 30       	cpi	r18, 0x00	; 0
     e22:	a0 e0       	ldi	r26, 0x00	; 0
     e24:	3a 07       	cpc	r19, r26
     e26:	a0 e0       	ldi	r26, 0x00	; 0
     e28:	4a 07       	cpc	r20, r26
     e2a:	a0 e4       	ldi	r26, 0x40	; 64
     e2c:	5a 07       	cpc	r21, r26
     e2e:	10 f0       	brcs	.+4      	; 0xe34 <__pack_f+0x10e>
     e30:	e1 e0       	ldi	r30, 0x01	; 1
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	79 01       	movw	r14, r18
     e36:	8a 01       	movw	r16, r20
     e38:	27 c0       	rjmp	.+78     	; 0xe88 <__pack_f+0x162>
     e3a:	60 38       	cpi	r22, 0x80	; 128
     e3c:	71 05       	cpc	r23, r1
     e3e:	64 f5       	brge	.+88     	; 0xe98 <__pack_f+0x172>
     e40:	fb 01       	movw	r30, r22
     e42:	e1 58       	subi	r30, 0x81	; 129
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	d8 01       	movw	r26, r16
     e48:	c7 01       	movw	r24, r14
     e4a:	8f 77       	andi	r24, 0x7F	; 127
     e4c:	90 70       	andi	r25, 0x00	; 0
     e4e:	a0 70       	andi	r26, 0x00	; 0
     e50:	b0 70       	andi	r27, 0x00	; 0
     e52:	80 34       	cpi	r24, 0x40	; 64
     e54:	91 05       	cpc	r25, r1
     e56:	a1 05       	cpc	r26, r1
     e58:	b1 05       	cpc	r27, r1
     e5a:	39 f4       	brne	.+14     	; 0xe6a <__pack_f+0x144>
     e5c:	e7 fe       	sbrs	r14, 7
     e5e:	0d c0       	rjmp	.+26     	; 0xe7a <__pack_f+0x154>
     e60:	80 e4       	ldi	r24, 0x40	; 64
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	a0 e0       	ldi	r26, 0x00	; 0
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	04 c0       	rjmp	.+8      	; 0xe72 <__pack_f+0x14c>
     e6a:	8f e3       	ldi	r24, 0x3F	; 63
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	a0 e0       	ldi	r26, 0x00	; 0
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e8 0e       	add	r14, r24
     e74:	f9 1e       	adc	r15, r25
     e76:	0a 1f       	adc	r16, r26
     e78:	1b 1f       	adc	r17, r27
     e7a:	17 ff       	sbrs	r17, 7
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__pack_f+0x162>
     e7e:	16 95       	lsr	r17
     e80:	07 95       	ror	r16
     e82:	f7 94       	ror	r15
     e84:	e7 94       	ror	r14
     e86:	31 96       	adiw	r30, 0x01	; 1
     e88:	87 e0       	ldi	r24, 0x07	; 7
     e8a:	16 95       	lsr	r17
     e8c:	07 95       	ror	r16
     e8e:	f7 94       	ror	r15
     e90:	e7 94       	ror	r14
     e92:	8a 95       	dec	r24
     e94:	d1 f7       	brne	.-12     	; 0xe8a <__pack_f+0x164>
     e96:	05 c0       	rjmp	.+10     	; 0xea2 <__pack_f+0x17c>
     e98:	ee 24       	eor	r14, r14
     e9a:	ff 24       	eor	r15, r15
     e9c:	87 01       	movw	r16, r14
     e9e:	ef ef       	ldi	r30, 0xFF	; 255
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	6e 2f       	mov	r22, r30
     ea4:	67 95       	ror	r22
     ea6:	66 27       	eor	r22, r22
     ea8:	67 95       	ror	r22
     eaa:	90 2f       	mov	r25, r16
     eac:	9f 77       	andi	r25, 0x7F	; 127
     eae:	d7 94       	ror	r13
     eb0:	dd 24       	eor	r13, r13
     eb2:	d7 94       	ror	r13
     eb4:	8e 2f       	mov	r24, r30
     eb6:	86 95       	lsr	r24
     eb8:	49 2f       	mov	r20, r25
     eba:	46 2b       	or	r20, r22
     ebc:	58 2f       	mov	r21, r24
     ebe:	5d 29       	or	r21, r13
     ec0:	b7 01       	movw	r22, r14
     ec2:	ca 01       	movw	r24, r20
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	08 95       	ret

00000ed0 <__unpack_f>:
     ed0:	fc 01       	movw	r30, r24
     ed2:	db 01       	movw	r26, r22
     ed4:	40 81       	ld	r20, Z
     ed6:	51 81       	ldd	r21, Z+1	; 0x01
     ed8:	22 81       	ldd	r18, Z+2	; 0x02
     eda:	62 2f       	mov	r22, r18
     edc:	6f 77       	andi	r22, 0x7F	; 127
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	22 1f       	adc	r18, r18
     ee2:	22 27       	eor	r18, r18
     ee4:	22 1f       	adc	r18, r18
     ee6:	93 81       	ldd	r25, Z+3	; 0x03
     ee8:	89 2f       	mov	r24, r25
     eea:	88 0f       	add	r24, r24
     eec:	82 2b       	or	r24, r18
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	99 1f       	adc	r25, r25
     ef4:	99 27       	eor	r25, r25
     ef6:	99 1f       	adc	r25, r25
     ef8:	11 96       	adiw	r26, 0x01	; 1
     efa:	9c 93       	st	X, r25
     efc:	11 97       	sbiw	r26, 0x01	; 1
     efe:	21 15       	cp	r18, r1
     f00:	31 05       	cpc	r19, r1
     f02:	a9 f5       	brne	.+106    	; 0xf6e <__unpack_f+0x9e>
     f04:	41 15       	cp	r20, r1
     f06:	51 05       	cpc	r21, r1
     f08:	61 05       	cpc	r22, r1
     f0a:	71 05       	cpc	r23, r1
     f0c:	11 f4       	brne	.+4      	; 0xf12 <__unpack_f+0x42>
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	37 c0       	rjmp	.+110    	; 0xf80 <__unpack_f+0xb0>
     f12:	82 e8       	ldi	r24, 0x82	; 130
     f14:	9f ef       	ldi	r25, 0xFF	; 255
     f16:	13 96       	adiw	r26, 0x03	; 3
     f18:	9c 93       	st	X, r25
     f1a:	8e 93       	st	-X, r24
     f1c:	12 97       	sbiw	r26, 0x02	; 2
     f1e:	9a 01       	movw	r18, r20
     f20:	ab 01       	movw	r20, r22
     f22:	67 e0       	ldi	r22, 0x07	; 7
     f24:	22 0f       	add	r18, r18
     f26:	33 1f       	adc	r19, r19
     f28:	44 1f       	adc	r20, r20
     f2a:	55 1f       	adc	r21, r21
     f2c:	6a 95       	dec	r22
     f2e:	d1 f7       	brne	.-12     	; 0xf24 <__unpack_f+0x54>
     f30:	83 e0       	ldi	r24, 0x03	; 3
     f32:	8c 93       	st	X, r24
     f34:	0d c0       	rjmp	.+26     	; 0xf50 <__unpack_f+0x80>
     f36:	22 0f       	add	r18, r18
     f38:	33 1f       	adc	r19, r19
     f3a:	44 1f       	adc	r20, r20
     f3c:	55 1f       	adc	r21, r21
     f3e:	12 96       	adiw	r26, 0x02	; 2
     f40:	8d 91       	ld	r24, X+
     f42:	9c 91       	ld	r25, X
     f44:	13 97       	sbiw	r26, 0x03	; 3
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	13 96       	adiw	r26, 0x03	; 3
     f4a:	9c 93       	st	X, r25
     f4c:	8e 93       	st	-X, r24
     f4e:	12 97       	sbiw	r26, 0x02	; 2
     f50:	20 30       	cpi	r18, 0x00	; 0
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	38 07       	cpc	r19, r24
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	48 07       	cpc	r20, r24
     f5a:	80 e4       	ldi	r24, 0x40	; 64
     f5c:	58 07       	cpc	r21, r24
     f5e:	58 f3       	brcs	.-42     	; 0xf36 <__unpack_f+0x66>
     f60:	14 96       	adiw	r26, 0x04	; 4
     f62:	2d 93       	st	X+, r18
     f64:	3d 93       	st	X+, r19
     f66:	4d 93       	st	X+, r20
     f68:	5c 93       	st	X, r21
     f6a:	17 97       	sbiw	r26, 0x07	; 7
     f6c:	08 95       	ret
     f6e:	2f 3f       	cpi	r18, 0xFF	; 255
     f70:	31 05       	cpc	r19, r1
     f72:	79 f4       	brne	.+30     	; 0xf92 <__unpack_f+0xc2>
     f74:	41 15       	cp	r20, r1
     f76:	51 05       	cpc	r21, r1
     f78:	61 05       	cpc	r22, r1
     f7a:	71 05       	cpc	r23, r1
     f7c:	19 f4       	brne	.+6      	; 0xf84 <__unpack_f+0xb4>
     f7e:	84 e0       	ldi	r24, 0x04	; 4
     f80:	8c 93       	st	X, r24
     f82:	08 95       	ret
     f84:	64 ff       	sbrs	r22, 4
     f86:	03 c0       	rjmp	.+6      	; 0xf8e <__unpack_f+0xbe>
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	8c 93       	st	X, r24
     f8c:	12 c0       	rjmp	.+36     	; 0xfb2 <__unpack_f+0xe2>
     f8e:	1c 92       	st	X, r1
     f90:	10 c0       	rjmp	.+32     	; 0xfb2 <__unpack_f+0xe2>
     f92:	2f 57       	subi	r18, 0x7F	; 127
     f94:	30 40       	sbci	r19, 0x00	; 0
     f96:	13 96       	adiw	r26, 0x03	; 3
     f98:	3c 93       	st	X, r19
     f9a:	2e 93       	st	-X, r18
     f9c:	12 97       	sbiw	r26, 0x02	; 2
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	8c 93       	st	X, r24
     fa2:	87 e0       	ldi	r24, 0x07	; 7
     fa4:	44 0f       	add	r20, r20
     fa6:	55 1f       	adc	r21, r21
     fa8:	66 1f       	adc	r22, r22
     faa:	77 1f       	adc	r23, r23
     fac:	8a 95       	dec	r24
     fae:	d1 f7       	brne	.-12     	; 0xfa4 <__unpack_f+0xd4>
     fb0:	70 64       	ori	r23, 0x40	; 64
     fb2:	14 96       	adiw	r26, 0x04	; 4
     fb4:	4d 93       	st	X+, r20
     fb6:	5d 93       	st	X+, r21
     fb8:	6d 93       	st	X+, r22
     fba:	7c 93       	st	X, r23
     fbc:	17 97       	sbiw	r26, 0x07	; 7
     fbe:	08 95       	ret

00000fc0 <__udivmodhi4>:
     fc0:	aa 1b       	sub	r26, r26
     fc2:	bb 1b       	sub	r27, r27
     fc4:	51 e1       	ldi	r21, 0x11	; 17
     fc6:	07 c0       	rjmp	.+14     	; 0xfd6 <__udivmodhi4_ep>

00000fc8 <__udivmodhi4_loop>:
     fc8:	aa 1f       	adc	r26, r26
     fca:	bb 1f       	adc	r27, r27
     fcc:	a6 17       	cp	r26, r22
     fce:	b7 07       	cpc	r27, r23
     fd0:	10 f0       	brcs	.+4      	; 0xfd6 <__udivmodhi4_ep>
     fd2:	a6 1b       	sub	r26, r22
     fd4:	b7 0b       	sbc	r27, r23

00000fd6 <__udivmodhi4_ep>:
     fd6:	88 1f       	adc	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	5a 95       	dec	r21
     fdc:	a9 f7       	brne	.-22     	; 0xfc8 <__udivmodhi4_loop>
     fde:	80 95       	com	r24
     fe0:	90 95       	com	r25
     fe2:	bc 01       	movw	r22, r24
     fe4:	cd 01       	movw	r24, r26
     fe6:	08 95       	ret

00000fe8 <__divmodhi4>:
     fe8:	97 fb       	bst	r25, 7
     fea:	09 2e       	mov	r0, r25
     fec:	07 26       	eor	r0, r23
     fee:	0a d0       	rcall	.+20     	; 0x1004 <__divmodhi4_neg1>
     ff0:	77 fd       	sbrc	r23, 7
     ff2:	04 d0       	rcall	.+8      	; 0xffc <__divmodhi4_neg2>
     ff4:	e5 df       	rcall	.-54     	; 0xfc0 <__udivmodhi4>
     ff6:	06 d0       	rcall	.+12     	; 0x1004 <__divmodhi4_neg1>
     ff8:	00 20       	and	r0, r0
     ffa:	1a f4       	brpl	.+6      	; 0x1002 <__divmodhi4_exit>

00000ffc <__divmodhi4_neg2>:
     ffc:	70 95       	com	r23
     ffe:	61 95       	neg	r22
    1000:	7f 4f       	sbci	r23, 0xFF	; 255

00001002 <__divmodhi4_exit>:
    1002:	08 95       	ret

00001004 <__divmodhi4_neg1>:
    1004:	f6 f7       	brtc	.-4      	; 0x1002 <__divmodhi4_exit>
    1006:	90 95       	com	r25
    1008:	81 95       	neg	r24
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	08 95       	ret

0000100e <__prologue_saves__>:
    100e:	2f 92       	push	r2
    1010:	3f 92       	push	r3
    1012:	4f 92       	push	r4
    1014:	5f 92       	push	r5
    1016:	6f 92       	push	r6
    1018:	7f 92       	push	r7
    101a:	8f 92       	push	r8
    101c:	9f 92       	push	r9
    101e:	af 92       	push	r10
    1020:	bf 92       	push	r11
    1022:	cf 92       	push	r12
    1024:	df 92       	push	r13
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	ca 1b       	sub	r28, r26
    1038:	db 0b       	sbc	r29, r27
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	09 94       	ijmp

00001046 <__epilogue_restores__>:
    1046:	2a 88       	ldd	r2, Y+18	; 0x12
    1048:	39 88       	ldd	r3, Y+17	; 0x11
    104a:	48 88       	ldd	r4, Y+16	; 0x10
    104c:	5f 84       	ldd	r5, Y+15	; 0x0f
    104e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1050:	7d 84       	ldd	r7, Y+13	; 0x0d
    1052:	8c 84       	ldd	r8, Y+12	; 0x0c
    1054:	9b 84       	ldd	r9, Y+11	; 0x0b
    1056:	aa 84       	ldd	r10, Y+10	; 0x0a
    1058:	b9 84       	ldd	r11, Y+9	; 0x09
    105a:	c8 84       	ldd	r12, Y+8	; 0x08
    105c:	df 80       	ldd	r13, Y+7	; 0x07
    105e:	ee 80       	ldd	r14, Y+6	; 0x06
    1060:	fd 80       	ldd	r15, Y+5	; 0x05
    1062:	0c 81       	ldd	r16, Y+4	; 0x04
    1064:	1b 81       	ldd	r17, Y+3	; 0x03
    1066:	aa 81       	ldd	r26, Y+2	; 0x02
    1068:	b9 81       	ldd	r27, Y+1	; 0x01
    106a:	ce 0f       	add	r28, r30
    106c:	d1 1d       	adc	r29, r1
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	ed 01       	movw	r28, r26
    107a:	08 95       	ret

0000107c <_exit>:
    107c:	f8 94       	cli

0000107e <__stop_program>:
    107e:	ff cf       	rjmp	.-2      	; 0x107e <__stop_program>
